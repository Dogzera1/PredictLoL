#!/usr/bin/env python3
"""
Script diagn√≥stico e corre√ß√£o para conflitos de polling/webhook
Detecta inst√¢ncias remotas e garante opera√ß√£o limpa
"""
import asyncio
import aiohttp
import subprocess
import sys
import os
import psutil
import time
from pathlib import Path

BOT_TOKEN = "7584060058:AAFTZcmirun47zLiCCm48Trre6c3oXnM-Cg"

class ConflictDiagnostic:
    def __init__(self):
        self.base_url = f"https://api.telegram.org/bot{BOT_TOKEN}"
        self.issues_found = []
        self.solutions_applied = []

    async def run_full_diagnostic(self):
        """Executa diagn√≥stico completo e aplica√ß√£o de solu√ß√µes"""
        print("üîç DIAGN√ìSTICO COMPLETO DE CONFLITOS")
        print("=" * 50)
        
        # 1. Verificar status atual do bot
        await self._check_bot_status()
        
        # 2. Detectar inst√¢ncias locais do Python
        self._check_local_python_instances()
        
        # 3. Verificar webhook status
        await self._check_webhook_status()
        
        # 4. Testar capacidade de polling
        await self._test_polling_capability()
        
        # 5. Verificar inst√¢ncias remotas
        await self._detect_remote_instances()
        
        # 6. Aplicar solu√ß√µes
        await self._apply_solutions()
        
        # 7. Verifica√ß√£o final
        await self._final_verification()
        
        self._show_summary()

    async def _check_bot_status(self):
        """Verifica status b√°sico do bot"""
        print("\nü§ñ VERIFICANDO STATUS DO BOT")
        print("-" * 30)
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/getMe") as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        bot_info = data.get('result', {})
                        print(f"‚úÖ Bot ativo: @{bot_info.get('username')}")
                        print(f"   ID: {bot_info.get('id')}")
                        print(f"   Nome: {bot_info.get('first_name')}")
                    else:
                        print(f"‚ùå Bot inacess√≠vel: Status {resp.status}")
                        self.issues_found.append("Bot inacess√≠vel")
        except Exception as e:
            print(f"‚ùå Erro ao verificar bot: {e}")
            self.issues_found.append(f"Erro de conectividade: {e}")

    def _check_local_python_instances(self):
        """Verifica inst√¢ncias locais do Python rodando"""
        print("\nüêç VERIFICANDO INST√ÇNCIAS PYTHON LOCAIS")
        print("-" * 40)
        
        try:
            python_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if proc.info['name'] and 'python' in proc.info['name'].lower():
                        cmdline = ' '.join(proc.info['cmdline'] or [])
                        if any(keyword in cmdline.lower() for keyword in ['bot', 'telegram', 'main.py', 'schedule']):
                            python_processes.append({
                                'pid': proc.info['pid'],
                                'cmd': cmdline[:100] + '...' if len(cmdline) > 100 else cmdline
                            })
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            if python_processes:
                print(f"‚ö†Ô∏è {len(python_processes)} processos Python relacionados encontrados:")
                for proc in python_processes:
                    print(f"   PID {proc['pid']}: {proc['cmd']}")
                self.issues_found.append(f"{len(python_processes)} processos Python ativos")
            else:
                print("‚úÖ Nenhum processo Python suspeito encontrado")
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar processos: {e}")

    async def _check_webhook_status(self):
        """Verifica status do webhook"""
        print("\nüîó VERIFICANDO STATUS DO WEBHOOK")
        print("-" * 35)
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.base_url}/getWebhookInfo") as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        webhook_info = data.get('result', {})
                        
                        webhook_url = webhook_info.get('url', '')
                        if webhook_url:
                            print(f"‚ö†Ô∏è WEBHOOK ATIVO DETECTADO!")
                            print(f"   URL: {webhook_url}")
                            print(f"   Pending: {webhook_info.get('pending_update_count', 0)}")
                            print(f"   √öltima erro: {webhook_info.get('last_error_message', 'Nenhum')}")
                            self.issues_found.append("Webhook ativo conflitando com polling")
                        else:
                            print("‚úÖ Nenhum webhook ativo")
                    else:
                        print(f"‚ùå Erro ao verificar webhook: Status {resp.status}")
        except Exception as e:
            print(f"‚ùå Erro ao verificar webhook: {e}")

    async def _test_polling_capability(self):
        """Testa capacidade de polling"""
        print("\nüìû TESTANDO CAPACIDADE DE POLLING")
        print("-" * 35)
        
        try:
            async with aiohttp.ClientSession() as session:
                # Teste simples de getUpdates
                async with session.post(
                    f"{self.base_url}/getUpdates",
                    json={"timeout": 1, "limit": 1}
                ) as resp:
                    if resp.status == 200:
                        print("‚úÖ Polling funcional")
                    elif resp.status == 409:
                        response_text = await resp.text()
                        if "conflict" in response_text.lower():
                            print("‚ùå CONFLITO DETECTADO: Outra inst√¢ncia fazendo polling")
                            self.issues_found.append("Conflito de polling ativo")
                        else:
                            print(f"‚ö†Ô∏è Erro 409 n√£o relacionado a conflito: {response_text}")
                    else:
                        print(f"‚ùå Erro no polling: Status {resp.status}")
                        response_text = await resp.text()
                        print(f"   Resposta: {response_text[:200]}")
        except Exception as e:
            print(f"‚ùå Erro ao testar polling: {e}")

    async def _detect_remote_instances(self):
        """Tenta detectar inst√¢ncias remotas"""
        print("\nüåê DETECTANDO INST√ÇNCIAS REMOTAS")
        print("-" * 35)
        
        # Verifica se h√° updates sendo processados rapidamente
        try:
            async with aiohttp.ClientSession() as session:
                print("   Testando reatividade do bot...")
                
                # Faz m√∫ltiplos requests r√°pidos para ver se algu√©m mais est√° consumindo
                start_time = time.time()
                requests_success = 0
                
                for i in range(5):
                    try:
                        async with session.post(
                            f"{self.base_url}/getUpdates",
                            json={"timeout": 0, "limit": 1, "offset": -1}
                        ) as resp:
                            if resp.status == 200:
                                requests_success += 1
                            elif resp.status == 409:
                                print(f"   ‚ùå Conflito na tentativa {i+1}")
                            await asyncio.sleep(0.5)
                    except:
                        pass
                
                end_time = time.time()
                response_time = (end_time - start_time) / 5
                
                if requests_success < 3:
                    print("‚ö†Ô∏è POSS√çVEL INST√ÇNCIA REMOTA ATIVA")
                    print("   Indicadores:")
                    print(f"   - Baixa taxa de sucesso: {requests_success}/5")
                    print(f"   - Tempo m√©dio: {response_time:.2f}s")
                    print("   - Poss√≠veis locais: Railway, Heroku, VPS")
                    self.issues_found.append("Poss√≠vel inst√¢ncia remota ativa")
                else:
                    print("‚úÖ Nenhuma inst√¢ncia remota detectada")
                    
        except Exception as e:
            print(f"‚ùå Erro na detec√ß√£o remota: {e}")

    async def _apply_solutions(self):
        """Aplica solu√ß√µes para os problemas encontrados"""
        print("\nüõ†Ô∏è APLICANDO SOLU√á√ïES")
        print("-" * 25)
        
        if not self.issues_found:
            print("‚úÖ Nenhum problema encontrado, nada a corrigir")
            return
        
        # Solu√ß√£o 1: Remover webhook se existir
        if any("webhook" in issue.lower() for issue in self.issues_found):
            print("üîß Removendo webhook...")
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(f"{self.base_url}/deleteWebhook") as resp:
                        if resp.status == 200:
                            print("   ‚úÖ Webhook removido")
                            self.solutions_applied.append("Webhook removido")
                        else:
                            print(f"   ‚ùå Falha ao remover webhook: {resp.status}")
            except Exception as e:
                print(f"   ‚ùå Erro ao remover webhook: {e}")
        
        # Solu√ß√£o 2: For√ßar limpeza de getUpdates
        if any("conflito" in issue.lower() for issue in self.issues_found):
            print("üîß For√ßando limpeza de conflitos...")
            try:
                async with aiohttp.ClientSession() as session:
                    # M√∫ltiplas tentativas agressivas
                    for i in range(10):
                        async with session.post(
                            f"{self.base_url}/getUpdates",
                            json={"timeout": 0, "limit": 100, "offset": -1}
                        ) as resp:
                            if resp.status == 200:
                                data = await resp.json()
                                updates_count = len(data.get('result', []))
                                if updates_count > 0:
                                    print(f"   üì• Limpou {updates_count} updates")
                        await asyncio.sleep(0.5)
                    
                    self.solutions_applied.append("Conflitos de getUpdates limpos")
                    print("   ‚úÖ Limpeza de conflitos conclu√≠da")
            except Exception as e:
                print(f"   ‚ùå Erro na limpeza: {e}")
        
        # Solu√ß√£o 3: Parar processos Python locais
        if any("processos python" in issue.lower() for issue in self.issues_found):
            print("üîß Sugest√£o: Parar processos Python suspeitos")
            print("   Execute: python stop_all_bots.py")
            self.solutions_applied.append("Sugest√£o para parar processos locais")

    async def _final_verification(self):
        """Verifica√ß√£o final ap√≥s aplica√ß√£o de solu√ß√µes"""
        print("\nüß™ VERIFICA√á√ÉO FINAL")
        print("-" * 20)
        
        await asyncio.sleep(3)  # Aguarda estabiliza√ß√£o
        
        try:
            async with aiohttp.ClientSession() as session:
                # Teste final de polling
                async with session.post(
                    f"{self.base_url}/getUpdates",
                    json={"timeout": 2, "limit": 1}
                ) as resp:
                    if resp.status == 200:
                        print("‚úÖ Polling operacional")
                    elif resp.status == 409:
                        print("‚ùå Conflitos persistem - poss√≠vel inst√¢ncia remota")
                    else:
                        print(f"‚ö†Ô∏è Status inesperado: {resp.status}")
        except Exception as e:
            print(f"‚ùå Erro na verifica√ß√£o final: {e}")

    def _show_summary(self):
        """Mostra resumo do diagn√≥stico"""
        print("\nüìã RESUMO DO DIAGN√ìSTICO")
        print("=" * 30)
        
        print(f"\nüîç Problemas encontrados ({len(self.issues_found)}):")
        for issue in self.issues_found:
            print(f"   ‚ùå {issue}")
        
        print(f"\nüõ†Ô∏è Solu√ß√µes aplicadas ({len(self.solutions_applied)}):")
        for solution in self.solutions_applied:
            print(f"   ‚úÖ {solution}")
        
        if not self.issues_found:
            print("\nüéâ SISTEMA LIMPO!")
            print("üí° Execute: python main.py")
        elif len(self.solutions_applied) >= len(self.issues_found):
            print("\n‚úÖ PROBLEMAS RESOLVIDOS!")
            print("üí° Aguarde 30s e execute: python main.py")
        else:
            print("\n‚ö†Ô∏è PROBLEMAS PERSISTENTES!")
            print("üí° Poss√≠veis a√ß√µes:")
            print("   1. Verificar inst√¢ncias remotas (Railway, Heroku)")
            print("   2. Aguardar mais tempo para estabiliza√ß√£o")
            print("   3. Executar stop_all_bots.py")

async def main():
    print("üîç DIAGN√ìSTICO E CORRE√á√ÉO DE CONFLITOS")
    print("=" * 50)
    print("‚ö° Detectando conflitos polling/webhook")
    print("üåê Verificando inst√¢ncias remotas")
    print("üõ†Ô∏è Aplicando corre√ß√µes autom√°ticas")
    print("=" * 50)
    
    diagnostic = ConflictDiagnostic()
    await diagnostic.run_full_diagnostic()

if __name__ == "__main__":
    asyncio.run(main()) 