#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TESTE COMPLETO DO BOT LOL V3 - Verifica√ß√£o de Funcionalidades
Testa todas as corre√ß√µes implementadas
"""

import asyncio
import sys
import os
from datetime import datetime

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Testa se todas as importa√ß√µes est√£o funcionando"""
    print("üîç Testando importa√ß√µes...")
    
    try:
        from bot_v13_railway import (
            RiotAPIClient, 
            ValueBettingSystem, 
            UnitsSystem, 
            AlertSystem,
            DynamicPredictionSystem,
            ChampionAnalyzer,
            BotLoLV3Railway
        )
        print("‚úÖ Todas as importa√ß√µes funcionando")
        return True
    except Exception as e:
        print(f"‚ùå Erro nas importa√ß√µes: {e}")
        return False

def test_riot_client():
    """Testa o cliente da API Riot"""
    print("\nüîç Testando RiotAPIClient...")
    
    try:
        from bot_v13_railway import RiotAPIClient
        
        client = RiotAPIClient()
        print("‚úÖ RiotAPIClient inicializado")
        
        # Teste ass√≠ncrono
        async def test_async():
            try:
                live_matches = await client.get_live_matches()
                print(f"‚úÖ get_live_matches funcionando - {len(live_matches)} partidas")
                
                scheduled = await client.get_scheduled_matches()
                print(f"‚úÖ get_scheduled_matches funcionando - {len(scheduled)} partidas")
                
                return True
            except Exception as e:
                print(f"‚ùå Erro nos m√©todos ass√≠ncronos: {e}")
                return False
        
        # Executar teste ass√≠ncrono
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(test_async())
        loop.close()
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erro no RiotAPIClient: {e}")
        return False

def test_value_betting():
    """Testa o sistema de value betting"""
    print("\nüîç Testando ValueBettingSystem...")
    
    try:
        from bot_v13_railway import ValueBettingSystem, RiotAPIClient
        
        riot_client = RiotAPIClient()
        value_system = ValueBettingSystem(riot_client=riot_client)
        print("‚úÖ ValueBettingSystem inicializado")
        
        # Testar an√°lise de valor
        mock_match = {
            'id': 'test_match',
            'team1': 'T1',
            'team2': 'GEN',
            'league': 'LCK',
            'status': 'live'
        }
        
        opportunity = value_system._analyze_match_value(mock_match)
        if opportunity:
            print("‚úÖ _analyze_match_value funcionando")
        else:
            print("‚ö†Ô∏è _analyze_match_value retornou None (normal se n√£o h√° value)")
        
        # Testar for√ßa dos times
        strength_t1 = value_system._calculate_team_strength('T1', 'LCK')
        strength_gen = value_system._calculate_team_strength('GEN', 'LCK')
        print(f"‚úÖ For√ßa dos times - T1: {strength_t1}, GEN: {strength_gen}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no ValueBettingSystem: {e}")
        return False

def test_units_system():
    """Testa o sistema de unidades"""
    print("\nüîç Testando UnitsSystem...")
    
    try:
        from bot_v13_railway import UnitsSystem
        
        units_system = UnitsSystem()
        print("‚úÖ UnitsSystem inicializado")
        
        # Testar c√°lculo de unidades
        result = units_system.calculate_units(
            win_prob=0.65,
            odds=1.85,
            confidence='Alta'
        )
        
        print(f"‚úÖ C√°lculo de unidades funcionando:")
        print(f"   - Units: {result['units']}")
        print(f"   - EV: {result['ev_percentage']:.1f}%")
        print(f"   - Risk Level: {result['risk_level']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no UnitsSystem: {e}")
        return False

def test_prediction_system():
    """Testa o sistema de predi√ß√µes"""
    print("\nüîç Testando DynamicPredictionSystem...")
    
    try:
        from bot_v13_railway import DynamicPredictionSystem
        
        prediction_system = DynamicPredictionSystem()
        print("‚úÖ DynamicPredictionSystem inicializado")
        
        # Teste ass√≠ncrono
        async def test_prediction():
            try:
                mock_match = {
                    'team1': 'T1',
                    'team2': 'GEN',
                    'league': 'LCK'
                }
                
                prediction = await prediction_system.predict_live_match(mock_match)
                print(f"‚úÖ Predi√ß√£o funcionando:")
                print(f"   - Favorito: {prediction['favored_team']}")
                print(f"   - Probabilidade: {prediction['win_probability']:.1f}%")
                print(f"   - Confian√ßa: {prediction['confidence']}")
                
                return True
            except Exception as e:
                print(f"‚ùå Erro na predi√ß√£o: {e}")
                return False
        
        # Executar teste ass√≠ncrono
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(test_prediction())
        loop.close()
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erro no DynamicPredictionSystem: {e}")
        return False

def test_champion_analyzer():
    """Testa o analisador de campe√µes"""
    print("\nüîç Testando ChampionAnalyzer...")
    
    try:
        from bot_v13_railway import ChampionAnalyzer
        
        analyzer = ChampionAnalyzer()
        print("‚úÖ ChampionAnalyzer inicializado")
        
        # Testar an√°lise de draft
        team1_comp = ['Aatrox', 'Graves', 'Azir', 'Jinx', 'Nautilus']
        team2_comp = ['Gwen', 'Lee Sin', 'Orianna', 'Kai\'Sa', 'Thresh']
        
        analysis = analyzer.analyze_draft(team1_comp, team2_comp)
        print(f"‚úÖ An√°lise de draft funcionando:")
        print(f"   - Vencedor: {analysis['draft_advantage']['winner']}")
        print(f"   - Confian√ßa: {analysis['draft_advantage']['confidence']}")
        print(f"   - Diferen√ßa: {analysis['draft_advantage']['score_difference']:.1f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no ChampionAnalyzer: {e}")
        return False

def test_alert_system():
    """Testa o sistema de alertas"""
    print("\nüîç Testando AlertSystem...")
    
    try:
        from bot_v13_railway import AlertSystem
        
        alert_system = AlertSystem()
        print("‚úÖ AlertSystem inicializado")
        
        # Testar inscri√ß√£o
        test_chat_id = 12345
        result = alert_system.subscribe_group(test_chat_id)
        print(f"‚úÖ Inscri√ß√£o funcionando: {result}")
        
        # Testar contagem
        count = alert_system.get_subscribed_groups_count()
        print(f"‚úÖ Contagem de grupos: {count}")
        
        # Testar desinscri√ß√£o
        result = alert_system.unsubscribe_group(test_chat_id)
        print(f"‚úÖ Desinscri√ß√£o funcionando: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no AlertSystem: {e}")
        return False

def test_bot_initialization():
    """Testa a inicializa√ß√£o do bot principal"""
    print("\nüîç Testando BotLoLV3Railway...")
    
    try:
        # Verificar se as vari√°veis de ambiente est√£o definidas
        if not os.getenv('TELEGRAM_BOT_TOKEN'):
            print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN n√£o definido - usando token de teste")
            os.environ['TELEGRAM_BOT_TOKEN'] = 'test_token'
        
        from bot_v13_railway import BotLoLV3Railway
        
        # N√£o inicializar completamente para evitar erro de token
        print("‚úÖ BotLoLV3Railway pode ser importado")
        print("‚úÖ Todas as classes est√£o dispon√≠veis")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o do bot: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ INICIANDO TESTE COMPLETO DO BOT LOL V3")
    print("=" * 50)
    
    tests = [
        ("Importa√ß√µes", test_imports),
        ("RiotAPIClient", test_riot_client),
        ("ValueBettingSystem", test_value_betting),
        ("UnitsSystem", test_units_system),
        ("DynamicPredictionSystem", test_prediction_system),
        ("ChampionAnalyzer", test_champion_analyzer),
        ("AlertSystem", test_alert_system),
        ("BotLoLV3Railway", test_bot_initialization)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico no teste {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumo dos resultados
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:25} {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ RESULTADO FINAL: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM! Bot est√° funcionando corretamente.")
    elif passed >= total * 0.8:
        print("‚ö° MAIORIA DOS TESTES PASSOU! Bot est√° funcionando bem.")
    else:
        print("‚ö†Ô∏è V√ÅRIOS TESTES FALHARAM! Verificar problemas no bot.")
    
    print(f"\n‚è∞ Teste conclu√≠do em: {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    main() 