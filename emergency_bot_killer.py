#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRIPT DE EMERG√äNCIA: Parar TODAS as inst√¢ncias do bot
"""

import os
import requests
import time
from datetime import datetime

TOKEN = os.getenv('TELEGRAM_TOKEN', '7584060058:AAFTZcmirun47zLiCCm48Trre6c3oXnM-Cg')

def force_clear_all():
    """For√ßar limpeza completa do bot"""
    print("üö® MODO EMERG√äNCIA: PARANDO TODAS AS INST√ÇNCIAS")
    print("=" * 60)
    
    try:
        # 1. Definir webhook vazio para for√ßar parada de polling
        print("1Ô∏è‚É£ For√ßando parada via webhook vazio...")
        url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
        data = {'url': ''}
        response = requests.post(url, data=data)
        if response.status_code == 200:
            print("‚úÖ Webhook vazio definido (for√ßa parada de polling)")
        else:
            print(f"‚ö†Ô∏è Erro ao definir webhook: {response.status_code}")
        
        time.sleep(3)
        
        # 2. Remover webhook
        print("2Ô∏è‚É£ Removendo webhook...")
        url = f"https://api.telegram.org/bot{TOKEN}/deleteWebhook"
        response = requests.post(url)
        if response.status_code == 200:
            print("‚úÖ Webhook removido")
        
        time.sleep(3)
        
        # 3. Limpar updates m√∫ltiplas vezes
        print("3Ô∏è‚É£ Limpando updates (m√∫ltiplas tentativas)...")
        for i in range(5):
            url = f"https://api.telegram.org/bot{TOKEN}/getUpdates"
            params = {'offset': -1, 'limit': 100, 'timeout': 1}
            response = requests.get(url, params=params, timeout=5)
            print(f"   Tentativa {i+1}/5: Status {response.status_code}")
            time.sleep(1)
        
        print("‚úÖ Limpeza de emerg√™ncia conclu√≠da")
        
        # 4. Aguardar estabiliza√ß√£o
        print("4Ô∏è‚É£ Aguardando estabiliza√ß√£o (30 segundos)...")
        for i in range(30, 0, -1):
            print(f"   Aguardando: {i}s", end='\r')
            time.sleep(1)
        print("\n‚úÖ Estabiliza√ß√£o conclu√≠da")
        
        # 5. Status final
        print("5Ô∏è‚É£ Verificando status final...")
        url = f"https://api.telegram.org/bot{TOKEN}/getMe"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            if data['ok']:
                bot_info = data['result']
                print(f"ü§ñ Bot: @{bot_info['username']} - Status: Pronto")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na limpeza de emerg√™ncia: {e}")
        return False

def check_common_platforms():
    """Verificar plataformas comuns onde o bot pode estar rodando"""
    print("\nüîç VERIFICA√á√ÉO DE PLATAFORMAS COMUNS")
    print("=" * 50)
    
    platforms = [
        "üöÇ Railway: https://railway.app/dashboard",
        "üü£ Heroku: https://dashboard.heroku.com/apps", 
        "üîµ Render: https://dashboard.render.com/",
        "üü° Replit: https://replit.com/~",
        "üü† PythonAnywhere: https://www.pythonanywhere.com/user/dashboard/",
        "‚òÅÔ∏è Google Cloud: https://console.cloud.google.com/",
        "üü† AWS: https://console.aws.amazon.com/",
        "üî¥ DigitalOcean: https://cloud.digitalocean.com/",
        "üü¢ Vercel: https://vercel.com/dashboard",
        "üîµ Netlify: https://app.netlify.com/"
    ]
    
    print("VERIFIQUE ESTAS PLATAFORMAS E PARE QUALQUER INST√ÇNCIA DO BOT:")
    print()
    for platform in platforms:
        print(f"‚Ä¢ {platform}")
    
    print()
    print("üéØ A√á√ïES NECESS√ÅRIAS:")
    print("1. Acesse cada plataforma listada acima")
    print("2. Procure por projetos/apps com nomes relacionados ao bot")
    print("3. PAUSE ou DELETE todas as inst√¢ncias encontradas")
    print("4. Mantenha apenas UMA inst√¢ncia ativa (Railway)")
    print("5. Aguarde 5 minutos ap√≥s parar todas as extras")

def main():
    """Fun√ß√£o principal de emerg√™ncia"""
    print("üÜò SCRIPT DE EMERG√äNCIA - CONFLITO DE INST√ÇNCIAS")
    print("=" * 60)
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    # Executar limpeza de emerg√™ncia
    if force_clear_all():
        print("\n‚úÖ LIMPEZA DE EMERG√äNCIA CONCLU√çDA")
    else:
        print("\n‚ùå FALHA NA LIMPEZA DE EMERG√äNCIA")
    
    # Mostrar plataformas para verificar
    check_common_platforms()
    
    print("\n" + "=" * 60)
    print("‚ö†Ô∏è  IMPORTANTE: ESTE SCRIPT APENAS LIMPA O TELEGRAM")
    print("‚ö†Ô∏è  VOC√ä AINDA PRECISA PARAR AS INST√ÇNCIAS EXTRAS MANUALMENTE")
    print("‚ö†Ô∏è  VERIFIQUE TODAS AS PLATAFORMAS LISTADAS ACIMA")
    print("=" * 60)

if __name__ == "__main__":
    main() 