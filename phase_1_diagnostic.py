#!/usr/bin/env python3
"""
FASE 1 - DIAGN√ìSTICO E DEFINI√á√ÉO DE METAS
Script principal para executar diagn√≥stico completo e definir metas de melhoria
"""

import os
import sys
sys.path.append('.')

from services.model_evaluator import ModelEvaluator
from services.goals_manager import GoalsManager, Goal, MetricType, Priority
import json
from datetime import datetime, timedelta

def main():
    print("üöÄ INICIANDO FASE 1 - DIAGN√ìSTICO E DEFINI√á√ÉO DE METAS")
    print("="*70)
    
    # Verificar se os arquivos necess√°rios existem
    required_files = [
        "data/model.pkl",
        "data/scaler.pkl", 
        "data/processed_match_data.json"
    ]
    
    missing_files = [f for f in required_files if not os.path.exists(f)]
    if missing_files:
        print("‚ùå Arquivos necess√°rios n√£o encontrados:")
        for file in missing_files:
            print(f"   ‚Ä¢ {file}")
        print("\nüí° Execute primeiro o treinamento do modelo ou verifique os caminhos dos arquivos.")
        return
    
    print("‚úÖ Todos os arquivos necess√°rios encontrados\n")
    
    # Etapa 1: Diagn√≥stico Completo
    print("üìã ETAPA 1: DIAGN√ìSTICO COMPLETO DO MODELO")
    print("-" * 50)
    
    evaluator = ModelEvaluator()
    df = evaluator.load_test_data()
    
    if df.empty:
        print("‚ùå N√£o foi poss√≠vel carregar os dados de teste")
        return
    
    # Gerar relat√≥rio de diagn√≥stico
    report = evaluator.generate_report(df)
    
    # Salvar relat√≥rio
    report_file = f"data/diagnostic_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    evaluator.save_report(report, report_file)
    
    # Exibir resumo do diagn√≥stico
    print("\nüìä RESUMO DO DIAGN√ìSTICO:")
    print("-" * 30)
    metrics = report['performance_metrics']
    print(f"üéØ AUC-ROC: {metrics['auc_roc']:.4f}")
    print(f"üìâ Log-Loss: {metrics['log_loss']:.4f}")  
    print(f"‚úÖ Acur√°cia: {metrics['accuracy']:.4f}")
    print(f"‚ö° Tempo infer√™ncia: {metrics['inference_time_ms']:.2f}ms")
    print(f"üéØ Amostras totais: {metrics['total_samples']:,}")
    
    # An√°lise contextual
    if 'context_analysis' in report and report['context_analysis']:
        print("\nüîç AN√ÅLISE CONTEXTUAL:")
        context = report['context_analysis']
        
        if 'by_patch' in context:
            patches = list(context['by_patch'].keys())
            print(f"   üìä Patches analisados: {len(patches)}")
            if patches:
                worst_patch = min(context['by_patch'].items(), 
                                key=lambda x: x[1]['auc_roc'])
                print(f"   ‚ö†Ô∏è Pior patch: {worst_patch[0]} (AUC: {worst_patch[1]['auc_roc']:.3f})")
        
        if 'by_duration' in context:
            durations = list(context['by_duration'].keys())
            print(f"   ‚è±Ô∏è Dura√ß√µes analisadas: {len(durations)}")
            if durations:
                worst_duration = min(context['by_duration'].items(),
                                   key=lambda x: x[1]['auc_roc'])
                print(f"   ‚ö†Ô∏è Pior dura√ß√£o: {worst_duration[0]} (AUC: {worst_duration[1]['auc_roc']:.3f})")
    
    # Cen√°rios problem√°ticos
    if 'worst_scenarios' in report:
        worst = report['worst_scenarios']
        if worst['worst_predictions']:
            print(f"\n‚ö†Ô∏è CEN√ÅRIOS PROBLEM√ÅTICOS:")
            print(f"   üîç {len(worst['worst_predictions'])} piores predi√ß√µes identificadas")
            
            # Mostrar padr√µes comuns
            if 'common_patterns' in worst:
                patterns = worst['common_patterns']
                if 'problematic_patches' in patterns:
                    print("   üìä Patches mais problem√°ticos:")
                    for patch, count in list(patterns['problematic_patches'].items())[:3]:
                        print(f"      ‚Ä¢ {patch}: {count} casos")
    
    # Recomenda√ß√µes
    print(f"\nüí° RECOMENDA√á√ïES ({len(report['recommendations'])}):")
    for i, rec in enumerate(report['recommendations'], 1):
        print(f"   {i}. {rec}")
    
    # Etapa 2: Defini√ß√£o de Metas
    print("\n" + "="*70)
    print("üìã ETAPA 2: DEFINI√á√ÉO DE METAS")
    print("-" * 50)
    
    goals_manager = GoalsManager()
    
    # Definir metas baseadas na performance atual
    current_auc = report['performance_metrics']['auc_roc']
    current_log_loss = report['performance_metrics']['log_loss']
    current_accuracy = report['performance_metrics']['accuracy']
    current_inference_time = report['performance_metrics']['inference_time_ms']
    
    # Criar metas ambiciosas mas realistas
    goals = [
        Goal(
            metric=MetricType.AUC_ROC,
            current_value=current_auc,
            target_value=min(0.95, current_auc + 0.03),  # +3% ou m√°ximo 95%
            priority=Priority.HIGH,
            deadline=(datetime.now() + timedelta(weeks=4)).isoformat(),
            description="Melhorar AUC-ROC atrav√©s de feature engineering avan√ßada",
            business_impact="Aumentar taxa de acerto das apostas em 5-10%",
            success_criteria="AUC-ROC >= 0.95 em dados de valida√ß√£o"
        ),
        Goal(
            metric=MetricType.LOG_LOSS,
            current_value=current_log_loss,
            target_value=max(0.25, current_log_loss - 0.05),  # -0.05 ou m√≠nimo 0.25
            priority=Priority.HIGH,
            deadline=(datetime.now() + timedelta(weeks=4)).isoformat(),
            description="Reduzir log-loss atrav√©s de calibra√ß√£o de modelo",
            business_impact="Melhorar calibra√ß√£o das probabilidades para apostas mais seguras",
            success_criteria="Log-loss <= 0.35 com boa calibra√ß√£o"
        ),
        Goal(
            metric=MetricType.ACCURACY,
            current_value=current_accuracy,
            target_value=min(0.92, current_accuracy + 0.02),  # +2% ou m√°ximo 92%
            priority=Priority.MEDIUM,
            deadline=(datetime.now() + timedelta(weeks=6)).isoformat(),
            description="Aumentar acur√°cia geral do modelo",
            business_impact="Reduzir n√∫mero de apostas perdidas",
            success_criteria="Acur√°cia >= 85% consistente em diferentes cen√°rios"
        ),
        Goal(
            metric=MetricType.INFERENCE_TIME,
            current_value=current_inference_time,
            target_value=min(50.0, current_inference_time * 0.8),  # -20% ou m√°ximo 50ms
            priority=Priority.MEDIUM,
            deadline=(datetime.now() + timedelta(weeks=8)).isoformat(),
            description="Otimizar tempo de infer√™ncia para produ√ß√£o",
            business_impact="Permitir an√°lise em tempo real durante partidas",
            success_criteria="Tempo de infer√™ncia <= 100ms por predi√ß√£o"
        ),
        Goal(
            metric=MetricType.CONFIDENT_ACCURACY,
            current_value=report['performance_metrics'].get('confident_accuracy_0.8', 0.85),
            target_value=0.95,  # 95% de acur√°cia em predi√ß√µes confiantes
            priority=Priority.HIGH,
            deadline=(datetime.now() + timedelta(weeks=6)).isoformat(),
            description="Melhorar acur√°cia em predi√ß√µes de alta confian√ßa",
            business_impact="Identificar apostas de maior probabilidade de sucesso",
            success_criteria="95% de acur√°cia em predi√ß√µes com confian√ßa >= 80%"
        )
    ]
    
    goals_manager.set_goals(goals)
    
    # Exibir metas definidas
    goals_manager.print_goals_summary()
    
    # Etapa 3: An√°lise de Prioridades
    print("\n" + "="*70)
    print("üìã ETAPA 3: AN√ÅLISE DE PRIORIDADES")
    print("-" * 50)
    
    # Calcular esfor√ßo estimado por meta
    priority_analysis = {
        'critical': [],
        'high': [],
        'medium': [],
        'low': []
    }
    
    for goal in goals_manager.goals:
        priority_analysis[goal.priority.value].append({
            'description': goal.description,
            'improvement': f"{goal.improvement_percentage:.1f}%",
            'deadline': goal.deadline[:10]
        })
    
    print("üö® PRIORIDADES DE IMPLEMENTA√á√ÉO:")
    for priority, goals_list in priority_analysis.items():
        if goals_list:
            print(f"\n   {priority.upper()} ({len(goals_list)} metas):")
            for goal in goals_list:
                print(f"      ‚Ä¢ {goal['description']}")
                print(f"        Melhoria necess√°ria: {goal['improvement']}")
                print(f"        Prazo: {goal['deadline']}")
    
    # 4. Pr√≥ximos passos baseados na an√°lise
    print("\n" + "="*70)
    print("üìã PR√ìXIMOS PASSOS RECOMENDADOS")
    print("-"*50)
    
    # Usar metrics do report em vez de current_metrics
    current_auc = report['performance_metrics']['auc_roc']
    current_log_loss = report['performance_metrics']['log_loss']
    current_accuracy = report['performance_metrics']['accuracy']
    
    # Determinar foco principal baseado na performance
    if current_auc < 0.80:
        focus = "üö® CR√çTICO: Foco em feature engineering e sele√ß√£o de modelo"
        phase_priority = "Fase 2 e 3 em paralelo"
    elif current_log_loss > 0.6:
        focus = "‚ö° URGENTE: Foco em calibra√ß√£o e regulariza√ß√£o"
        phase_priority = "Fase 2 (features) seguida da Fase 4 (modelos)"
    elif current_accuracy < 0.75:
        focus = "üìä IMPORTANTE: Foco em dados e features"
        phase_priority = "Fase 2 completa, depois Fase 4"
    else:
        focus = "‚ú® OTIMIZA√á√ÉO: Foco em refinamento e produ√ß√£o"
        phase_priority = "Fase 3, 4 e 5 sequenciais"
    
    print(f"\nüéØ FOCO RECOMENDADO: {focus}")
    print(f"üìã SEQU√äNCIA DE FASES: {phase_priority}")
    
    print("\nüìã PR√ìXIMAS A√á√ïES ESPEC√çFICAS:")
    print("1. üîß FASE 2 - ENRIQUECIMENTO DE DADOS:")
    print("   ‚Ä¢ Integrar APIs de vis√£o de mapa e controle de objetivos")
    print("   ‚Ä¢ Adicionar estat√≠sticas de partidas profissionais (LCS, LEC)")
    print("   ‚Ä¢ Criar features temporais avan√ßadas (deltas por minuto)")
    print("   ‚Ä¢ Implementar features de meta-patch e counter-picks")
    
    print("\n2. üß† FASE 3 - FEATURE ENGINEERING AVAN√áADO:")
    print("   ‚Ä¢ Criar intera√ß√µes entre champions e composi√ß√µes")
    print("   ‚Ä¢ Implementar embeddings de similaridade de comps")
    print("   ‚Ä¢ Adicionar encoding contextual (patch, regi√£o, tier)")
    print("   ‚Ä¢ Features de performance recente de jogadores/times")
    
    print("\n3. ü§ñ FASE 4 - OTIMIZA√á√ÉO DE MODELOS:")
    print("   ‚Ä¢ Testar arquitecturas avan√ßadas (Transformers, GNNs)")
    print("   ‚Ä¢ Implementar ensemble methods e stacking")
    print("   ‚Ä¢ Calibra√ß√£o de probabilidades (Platt scaling)")
    print("   ‚Ä¢ Hyperparameter optimization (Optuna)")
    
    print("\n4. üöÄ FASE 5 - DEPLOY E MONITORAMENTO:")
    print("   ‚Ä¢ Pipeline CI/CD automatizado")
    print("   ‚Ä¢ Monitoramento de drift de dados")
    print("   ‚Ä¢ Sistema de re-treinamento autom√°tico")
    print("   ‚Ä¢ M√©tricas de neg√≥cio e A/B testing")
    
    # Resumo final
    print("\n" + "="*70)
    print("üìä RESUMO DA FASE 1")
    print("-" * 50)
    print(f"‚úÖ Diagn√≥stico completo realizado")
    print(f"üìä {len(goals_manager.goals)} metas definidas")
    print(f"üéØ Pr√≥xima fase recomendada: {phase_priority}")
    print(f"üìÑ Relat√≥rio salvo em: {report_file}")
    print(f"üìÑ Metas salvas em: {goals_manager.goals_file}")
    
    # Estimativa de timeline
    total_weeks = sum([4, 4, 2, 6, 3, 3])  # Baseado nos prazos das metas
    print(f"‚è±Ô∏è Timeline estimado: {total_weeks} semanas para todas as metas")
    
    print("\nüöÄ FASE 1 CONCLU√çDA COM SUCESSO!")
    print("üéØ Execute as pr√≥ximas fases seguindo as prioridades definidas.")
    
    return {
        'report': report,
        'goals': goals_manager.goals,
        'next_steps': [],
        'files_generated': [report_file, goals_manager.goals_file]
    }

if __name__ == "__main__":
    try:
        result = main()
        print(f"\n‚úÖ Execu√ß√£o conclu√≠da com sucesso!")
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        import traceback
        traceback.print_exc() 