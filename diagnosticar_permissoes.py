#!/usr/bin/env python3
"""
Diagn√≥stico de Permiss√µes - Bot Telegram
Identifica problemas com verifica√ß√£o de permiss√µes em grupos
"""

import asyncio
import sys
import os

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from telegram import Bot
    from telegram.error import TelegramError, Forbidden, BadRequest
except ImportError as e:
    print(f"‚ùå Erro de importa√ß√£o: {e}")
    sys.exit(1)

async def diagnose_bot_permissions():
    """Diagn√≥stica problemas de permiss√µes do bot"""
    print("üîç Diagn√≥stico de Permiss√µes do Bot")
    print("=" * 50)
    
    try:
        # Token do bot
        BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7584060058:AAFux8K9JiQUpH27Mg_mlYJEYLL1J8THXY0")
        
        if not BOT_TOKEN:
            print("‚ùå Token n√£o encontrado!")
            return False
        
        # Inicializa bot
        bot = Bot(token=BOT_TOKEN)
        
        # Testa conex√£o b√°sica
        print("ü§ñ Testando conex√£o do bot...")
        try:
            me = await bot.get_me()
            print(f"‚úÖ Bot conectado: @{me.username} ({me.first_name})")
            print(f"   ‚Ä¢ ID: {me.id}")
            print(f"   ‚Ä¢ Pode se juntar a grupos: {me.can_join_groups}")
            print(f"   ‚Ä¢ Pode ler mensagens de grupos: {me.can_read_all_group_messages}")
            print(f"   ‚Ä¢ Suporta comandos inline: {me.supports_inline_queries}")
        except Exception as e:
            print(f"‚ùå Erro ao conectar bot: {e}")
            return False
        
        # Instru√ß√µes para o usu√°rio testar
        print("\n" + "=" * 50)
        print("üìã COMO TESTAR PERMISS√ïES EM UM GRUPO:")
        print("=" * 50)
        
        print("\n1Ô∏è‚É£ ADICIONE O BOT AO SEU GRUPO:")
        print(f"   ‚Ä¢ V√° ao seu grupo no Telegram")
        print(f"   ‚Ä¢ Adicione @{me.username}")
        print(f"   ‚Ä¢ O bot deve aparecer na lista de membros")
        
        print("\n2Ô∏è‚É£ TORNE O BOT ADMINISTRADOR (IMPORTANTE!):")
        print("   ‚Ä¢ V√° em configura√ß√µes do grupo")
        print("   ‚Ä¢ Escolha 'Administradores'")
        print("   ‚Ä¢ Adicione o bot como admin")
        print("   ‚Ä¢ D√™ pelo menos essas permiss√µes:")
        print("     ‚úì Ver mensagens")
        print("     ‚úì Enviar mensagens")
        print("     ‚úì Ver lista de membros")
        
        print("\n3Ô∏è‚É£ TESTE O COMANDO:")
        print("   ‚Ä¢ Digite /activate_group no grupo")
        print("   ‚Ä¢ Se ainda der erro, use o script de teste abaixo")
        
        # Script de teste personalizado
        print("\n" + "=" * 50)
        print("üõ†Ô∏è SCRIPT DE TESTE AVAN√áADO:")
        print("=" * 50)
        
        print("""
Para testar permiss√µes espec√≠ficas, use este c√≥digo Python:

```python
import asyncio
from telegram import Bot

async def test_group_permissions():
    bot = Bot(token="{}")
    
    # Substitua por ID real do seu grupo (negativo)
    GROUP_ID = -1001234567890  # Exemplo
    USER_ID = 123456789        # Seu ID de usu√°rio
    
    try:
        # Testa obter informa√ß√µes do chat
        chat = await bot.get_chat(GROUP_ID)
        print(f"‚úÖ Chat encontrado: {{chat.title}}")
        
        # Testa obter membro espec√≠fico
        member = await bot.get_chat_member(GROUP_ID, USER_ID)
        print(f"‚úÖ Membro encontrado: {{member.user.first_name}}")
        print(f"   Status: {{member.status}}")
        
        # Testa obter admins
        admins = await bot.get_chat_administrators(GROUP_ID)
        print(f"‚úÖ {{len(admins)}} administradores encontrados")
        
        # Verifica se bot √© admin
        bot_member = await bot.get_chat_member(GROUP_ID, bot.id)
        print(f"‚úÖ Status do bot: {{bot_member.status}}")
        
    except Exception as e:
        print(f"‚ùå Erro: {{e}}")

asyncio.run(test_group_permissions())
```""".format(BOT_TOKEN))
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no diagn√≥stico: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_common_group_scenarios():
    """Testa cen√°rios comuns de problemas em grupos"""
    print("\nüîß CEN√ÅRIOS COMUNS DE PROBLEMAS:")
    print("-" * 40)
    
    scenarios = [
        {
            "problema": "Bot n√£o √© administrador",
            "sintoma": "Erro ao verificar permiss√µes",
            "solucao": "Tornar bot admin no grupo"
        },
        {
            "problema": "Grupo √© privado demais",
            "sintoma": "Forbidden: bot can't access chat", 
            "solucao": "Ajustar configura√ß√µes de privacidade"
        },
        {
            "problema": "Bot foi removido",
            "sintoma": "Chat not found",
            "solucao": "Adicionar bot novamente ao grupo"
        },
        {
            "problema": "Permiss√µes insuficientes",
            "sintoma": "BadRequest: not enough rights",
            "solucao": "Dar mais permiss√µes ao bot"
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\n{i}. {scenario['problema']}")
        print(f"   üí• Sintoma: {scenario['sintoma']}")
        print(f"   üîß Solu√ß√£o: {scenario['solucao']}")

if __name__ == "__main__":
    try:
        print("üß™ Iniciando diagn√≥stico de permiss√µes...")
        
        result = asyncio.run(diagnose_bot_permissions())
        asyncio.run(test_common_group_scenarios())
        
        if result:
            print("\n‚úÖ Diagn√≥stico conclu√≠do!")
            print("üí° Siga as instru√ß√µes acima para resolver o problema")
        else:
            print("\n‚ö†Ô∏è Problemas encontrados no diagn√≥stico")
            
    except KeyboardInterrupt:
        print("\nüõë Diagn√≥stico interrompido")
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}") 
