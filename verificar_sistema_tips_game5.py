"""
Verifica√ß√£o do sistema de tips para detectar matches ativos
Foca em verificar se o sistema est√° monitorando corretamente
"""

import asyncio
import sys
import os
from datetime import datetime
import importlib

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def verificar_sistema_tips():
    """Verifica o sistema de tips completo"""
    
    print('üîç VERIFICA√á√ÉO DO SISTEMA DE TIPS')
    print(f'Hor√°rio: {datetime.now().strftime("%H:%M:%S")}')
    print('=' * 60)
    
    try:
        # Importa depend√™ncias
        from bot.api_clients.pandascore_api_client import PandaScoreAPIClient
        from bot.api_clients.riot_api_client import RiotAPIClient
        from bot.core_logic.dynamic_prediction_system import DynamicPredictionSystem
        from bot.systems.tips_system import ProfessionalTipsSystem
        
        print('‚úÖ Imports do sistema funcionando')
        
        # Inicializa clientes
        print('\nüì° INICIALIZANDO CLIENTES...')
        
        pandascore_client = PandaScoreAPIClient()
        print('‚úÖ PandaScore client inicializado')
        
        riot_client = RiotAPIClient()
        print('‚úÖ Riot client inicializado')
        
        prediction_system = DynamicPredictionSystem()
        print('‚úÖ Prediction system inicializado')
        
        # Inicializa sistema de tips
        tips_system = ProfessionalTipsSystem(
            pandascore_client=pandascore_client,
            riot_client=riot_client,
            prediction_system=prediction_system
        )
        print('‚úÖ Tips system inicializado')
        
        # Verifica m√©todo de busca de matches
        print('\nüîç TESTANDO BUSCA DE MATCHES...')
        
        try:
            # Tenta buscar matches usando m√©todo interno
            matches = await tips_system._get_live_matches()
            
            if matches:
                print(f'‚úÖ {len(matches)} matches encontrados!')
                
                for i, match in enumerate(matches):
                    print(f'\n   üìã MATCH {i+1}:')
                    print(f'      ID: {getattr(match, "match_id", "unknown")}')
                    print(f'      Teams: {getattr(match, "team1_name", "?")} vs {getattr(match, "team2_name", "?")}')
                    print(f'      Liga: {getattr(match, "league", "unknown")}')
                    print(f'      Status: {getattr(match, "status", "unknown")}')
                    
                    # Verifica se √© FlyQuest vs Cloud9
                    team1 = str(getattr(match, "team1_name", "")).lower()
                    team2 = str(getattr(match, "team2_name", "")).lower()
                    
                    is_target = any(t in team1 for t in ['flyquest', 'fly']) and any(t in team2 for t in ['cloud9', 'c9'])
                    
                    if is_target:
                        print(f'      üéØ MATCH ALVO ENCONTRADO!')
                        
                        # Testa detec√ß√£o de draft
                        try:
                            draft_complete = await tips_system._is_draft_complete(match)
                            print(f'      üéÆ Draft completo: {draft_complete}')
                            
                            if draft_complete:
                                print(f'      ‚úÖ SISTEMA DETECTA DRAFT COMPLETO!')
                                
                                # Verifica composi√ß√µes
                                team1_comp = getattr(match, 'team1_composition', [])
                                team2_comp = getattr(match, 'team2_composition', [])
                                
                                if team1_comp and team2_comp:
                                    print(f'      üìä Composi√ß√µes via PandaScore:')
                                    print(f'         Team 1: {len(team1_comp)} champions')
                                    print(f'         Team 2: {len(team2_comp)} champions')
                                else:
                                    print(f'      üîÑ Composi√ß√µes via APIs alternativas obtidas')
                            else:
                                print(f'      ‚è≥ Draft ainda n√£o completo')
                                
                        except Exception as e:
                            print(f'      ‚ùå Erro na verifica√ß√£o de draft: {e}')
                    
                return True
            else:
                print('‚ùå Nenhum match encontrado')
                
        except Exception as e:
            print(f'‚ùå Erro na busca de matches: {e}')
        
    except ImportError as e:
        print(f'‚ùå Erro de import: {e}')
    except Exception as e:
        print(f'‚ùå Erro geral: {e}')
    
    return False

async def verificar_apis_diretamente():
    """Verifica APIs diretamente"""
    
    print('\nüåê VERIFICA√á√ÉO DIRETA DAS APIS')
    print('=' * 40)
    
    # Testa PandaScore diretamente
    try:
        from bot.api_clients.pandascore_api_client import PandaScoreAPIClient
        
        client = PandaScoreAPIClient()
        print(f'‚úÖ PandaScore client criado')
        
        # Verifica se tem m√©todo get_live_matches
        if hasattr(client, 'get_live_matches'):
            print(f'‚úÖ M√©todo get_live_matches existe')
        else:
            print(f'‚ùå M√©todo get_live_matches n√£o encontrado')
            
            # Lista m√©todos dispon√≠veis
            methods = [m for m in dir(client) if not m.startswith('_') and callable(getattr(client, m))]
            print(f'üìã M√©todos dispon√≠veis:')
            for method in methods[:10]:  # Primeiros 10
                print(f'   - {method}')
                
    except Exception as e:
        print(f'‚ùå Erro com PandaScore: {e}')
    
    # Testa APIs alternativas
    try:
        from bot.systems.alternative_api_client import AlternativeAPIClient
        
        async with AlternativeAPIClient() as alt_client:
            print(f'‚úÖ Alternative API client criado')
            
            # Verifica Data Dragon
            try:
                await alt_client._load_champion_data()
                champ_count = len(alt_client._champion_id_map)
                print(f'‚úÖ Data Dragon: {champ_count} champions carregados')
            except Exception as e:
                print(f'‚ö†Ô∏è Data Dragon: {e}')
                
    except Exception as e:
        print(f'‚ùå Erro com APIs alternativas: {e}')

async def verificar_status_atual():
    """Verifica status atual do sistema"""
    
    print('\nüìä STATUS ATUAL DO SISTEMA')
    print('=' * 40)
    
    # Verifica arquivos importantes
    arquivos = [
        'bot/systems/tips_system.py',
        'bot/systems/alternative_api_client.py',
        'bot/api_clients/pandascore_api_client.py'
    ]
    
    for arquivo in arquivos:
        if os.path.exists(arquivo):
            print(f'‚úÖ {arquivo}')
            
            # Verifica tamanho
            size = os.path.getsize(arquivo)
            print(f'   üìè {size} bytes')
            
            # Verifica √∫ltima modifica√ß√£o
            import time
            mtime = os.path.getmtime(arquivo)
            mtime_str = datetime.fromtimestamp(mtime).strftime('%H:%M:%S')
            print(f'   üïí Modificado: {mtime_str}')
        else:
            print(f'‚ùå {arquivo}')
    
    # Verifica se h√° processos do bot rodando
    print(f'\nü§ñ VERIFICANDO PROCESSOS DO BOT:')
    try:
        import psutil
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if 'python' in proc.info['name'].lower():
                    cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                    if 'bot' in cmdline.lower() or 'tips' in cmdline.lower():
                        print(f'   üîß Processo: PID {proc.info["pid"]} - {cmdline[:50]}...')
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
                
    except ImportError:
        print('   ‚ö†Ô∏è psutil n√£o dispon√≠vel para verificar processos')

async def main():
    """Verifica√ß√£o principal"""
    
    print('üö® VERIFICA√á√ÉO COMPLETA DO SISTEMA DE TIPS')
    
    # Executa verifica√ß√µes
    tips_working = await verificar_sistema_tips()
    await verificar_apis_diretamente()
    await verificar_status_atual()
    
    # Resultado final
    print(f'\n' + '=' * 60)
    print(f'üìã DIAGN√ìSTICO FINAL:')
    print('=' * 60)
    
    if tips_working:
        print(f'‚úÖ SISTEMA DE TIPS FUNCIONANDO')
        print(f'üéØ Sistema consegue buscar e processar matches')
        print(f'üöÄ APIs alternativas integradas e prontas')
    else:
        print(f'‚ùå SISTEMA DE TIPS COM PROBLEMAS')
        print(f'üîß Necess√°rio investigar erros espec√≠ficos')
    
    print(f'\nüéÆ SOBRE O GAME 5:')
    print(f'üìÖ Se o Game 5 j√° terminou, √© normal n√£o aparecer')
    print(f'‚è∞ Sistema monitora apenas matches ATIVOS/AO VIVO')
    print(f'üîÑ Pr√≥ximo scan em alguns minutos detectar√° novos matches')
    
    print(f'\nüí° PR√ìXIMAS A√á√ïES:')
    print(f'1. üîç Aguardar pr√≥ximo match ao vivo')
    print(f'2. üìä Monitorar logs do Railway')
    print(f'3. üß™ Testar com novo match ativo')

if __name__ == '__main__':
    asyncio.run(main()) 