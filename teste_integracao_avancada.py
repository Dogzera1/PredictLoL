#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste de Integra√ß√£o do Sistema Avan√ßado de Value Betting
Verifica se a integra√ß√£o foi realizada com sucesso
"""

import sys
import os
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_integration():
    """Testa a integra√ß√£o do sistema avan√ßado"""
    
    print("üß™ TESTE DE INTEGRA√á√ÉO - SISTEMA AVAN√áADO DE VALUE BETTING")
    print("=" * 70)
    
    try:
        # Importar o bot principal
        from bot_v13_railway import BotLoLV3Railway, AdvancedValueBettingSystem
        
        print("‚úÖ 1. Importa√ß√£o do bot principal: SUCESSO")
        
        # Verificar se a classe AdvancedValueBettingSystem existe
        if hasattr(sys.modules['bot_v13_railway'], 'AdvancedValueBettingSystem'):
            print("‚úÖ 2. Classe AdvancedValueBettingSystem: ENCONTRADA")
        else:
            print("‚ùå 2. Classe AdvancedValueBettingSystem: N√ÉO ENCONTRADA")
            return False
        
        # Criar inst√¢ncia do sistema avan√ßado
        advanced_system = AdvancedValueBettingSystem()
        print("‚úÖ 3. Instancia√ß√£o do sistema avan√ßado: SUCESSO")
        
        # Verificar m√©todos principais
        required_methods = [
            'analyze_match_comprehensive',
            '_analyze_team_form',
            '_analyze_head_to_head',
            '_analyze_player_performance',
            '_analyze_composition_synergy',
            '_analyze_meta_adaptation',
            '_analyze_league_strength',
            'calculate_bet_units',
            '_generate_recommendation'
        ]
        
        missing_methods = []
        for method in required_methods:
            if hasattr(advanced_system, method):
                print(f"‚úÖ 4.{len(required_methods) - len(missing_methods)}. M√©todo {method}: ENCONTRADO")
            else:
                missing_methods.append(method)
                print(f"‚ùå 4.{len(required_methods) - len(missing_methods)}. M√©todo {method}: N√ÉO ENCONTRADO")
        
        if missing_methods:
            print(f"‚ùå M√©todos faltando: {missing_methods}")
            return False
        
        # Teste de an√°lise completa
        print("\nüî¨ TESTE DE AN√ÅLISE COMPLETA")
        print("-" * 40)
        
        test_match = {
            'team1': 'T1',
            'team2': 'Gen.G Esports',
            'league': 'LCK',
            'tournament': 'LCK Spring 2025'
        }
        
        analysis = advanced_system.analyze_match_comprehensive(test_match)
        print("‚úÖ 5. An√°lise completa executada: SUCESSO")
        
        # Verificar estrutura da an√°lise
        required_keys = [
            'match', 'league', 'comprehensive_analysis', 
            'value_analysis', 'recommendation', 'confidence_level'
        ]
        
        for key in required_keys:
            if key in analysis:
                print(f"‚úÖ 6.{required_keys.index(key)+1}. Chave '{key}': ENCONTRADA")
            else:
                print(f"‚ùå 6.{required_keys.index(key)+1}. Chave '{key}': N√ÉO ENCONTRADA")
                return False
        
        # Verificar dados da an√°lise
        comp_analysis = analysis['comprehensive_analysis']
        value_analysis = analysis['value_analysis']
        recommendation = analysis['recommendation']
        
        print(f"\nüìä RESULTADOS DA AN√ÅLISE:")
        print(f"üéØ Probabilidade T1: {comp_analysis['team1_probability']*100:.1f}%")
        print(f"üéØ Probabilidade Gen.G: {comp_analysis['team2_probability']*100:.1f}%")
        print(f"üîç Confian√ßa: {comp_analysis['overall_confidence']*100:.1f}%")
        
        if value_analysis['has_value']:
            print(f"üí∞ VALUE DETECTADO!")
            print(f"üéØ Recomenda√ß√£o: {recommendation['team']}")
            print(f"üíµ Unidades: {recommendation['units']}")
            print(f"üìä EV: {recommendation['ev']}")
            print(f"‚ö†Ô∏è Risco: {recommendation['risk_level']}")
        else:
            print(f"‚ùå Nenhum value detectado: {value_analysis['reason']}")
        
        print("‚úÖ 7. Estrutura da an√°lise: V√ÅLIDA")
        
        # Teste de integra√ß√£o com bot
        print("\nü§ñ TESTE DE INTEGRA√á√ÉO COM BOT")
        print("-" * 40)
        
        # Simular inicializa√ß√£o do bot (sem conectar ao Telegram)
        os.environ['TELEGRAM_TOKEN'] = 'test_token'
        os.environ['OWNER_ID'] = '123456789'
        
        try:
            # N√£o vamos inicializar completamente para evitar conex√£o
            # Apenas verificar se a classe pode ser importada e tem o sistema
            print("‚úÖ 8. Bot pode ser importado: SUCESSO")
            
            # Verificar se o bot usaria o sistema avan√ßado
            if 'AdvancedValueBettingSystem' in open('bot_v13_railway.py').read():
                print("‚úÖ 9. Bot configurado para usar sistema avan√ßado: SUCESSO")
            else:
                print("‚ùå 9. Bot N√ÉO configurado para sistema avan√ßado: FALHA")
                return False
                
        except Exception as e:
            print(f"‚ùå 8. Erro na integra√ß√£o com bot: {e}")
            return False
        
        # Teste dos pesos de an√°lise
        print("\n‚öñÔ∏è TESTE DOS PESOS DE AN√ÅLISE")
        print("-" * 40)
        
        weights = advanced_system.analysis_weights
        expected_total = 1.0
        actual_total = sum(weights.values())
        
        print(f"üìä Pesos configurados:")
        for factor, weight in weights.items():
            print(f"  ‚Ä¢ {factor}: {weight*100:.0f}%")
        
        print(f"üìä Total dos pesos: {actual_total*100:.0f}%")
        
        if abs(actual_total - expected_total) < 0.01:
            print("‚úÖ 10. Pesos de an√°lise: V√ÅLIDOS")
        else:
            print(f"‚ùå 10. Pesos de an√°lise: INV√ÅLIDOS (total: {actual_total})")
            return False
        
        # Teste de configura√ß√µes avan√ßadas
        print("\n‚öôÔ∏è TESTE DE CONFIGURA√á√ïES AVAN√áADAS")
        print("-" * 40)
        
        print(f"üí∞ Unidade base: R$ {advanced_system.base_unit}")
        print(f"üè¶ Bankroll: R$ {advanced_system.bankroll}")
        print(f"üéØ M√°ximo por aposta: {advanced_system.max_units_per_bet} unidades")
        print(f"üìä EV m√≠nimo: {advanced_system.ev_threshold*100:.0f}%")
        print(f"üîç Confian√ßa m√≠nima: {advanced_system.confidence_threshold*100:.0f}%")
        
        # Verificar se as configura√ß√µes s√£o mais rigorosas que o sistema b√°sico
        if (advanced_system.ev_threshold >= 0.04 and 
            advanced_system.confidence_threshold >= 0.70):
            print("‚úÖ 11. Configura√ß√µes avan√ßadas: V√ÅLIDAS")
        else:
            print("‚ùå 11. Configura√ß√µes avan√ßadas: INSUFICIENTES")
            return False
        
        print("\n" + "=" * 70)
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema Avan√ßado de Value Betting integrado com SUCESSO")
        print("üöÄ Bot pronto para usar an√°lise multifatorial avan√ßada")
        print("=" * 70)
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def test_advanced_features():
    """Testa funcionalidades espec√≠ficas do sistema avan√ßado"""
    
    print("\nüî¨ TESTE DE FUNCIONALIDADES AVAN√áADAS")
    print("=" * 50)
    
    try:
        from bot_v13_railway import AdvancedValueBettingSystem
        
        system = AdvancedValueBettingSystem()
        
        # Teste 1: An√°lise de forma de times
        print("1. Testando an√°lise de forma de times...")
        t1_form = system._analyze_team_form('T1', 'LCK')
        geng_form = system._analyze_team_form('Gen.G Esports', 'LCK')
        
        print(f"   T1 - Record: {t1_form['recent_record']}, Score: {t1_form['form_score']:.3f}")
        print(f"   Gen.G - Record: {geng_form['recent_record']}, Score: {geng_form['form_score']:.3f}")
        print("   ‚úÖ An√°lise de forma: FUNCIONANDO")
        
        # Teste 2: An√°lise head-to-head
        print("\n2. Testando an√°lise head-to-head...")
        h2h = system._analyze_head_to_head('T1', 'Gen.G Esports')
        print(f"   H2H T1: {h2h['team1_h2h_winrate']*100:.1f}%")
        print(f"   H2H Gen.G: {h2h['team2_h2h_winrate']*100:.1f}%")
        print(f"   Confian√ßa H2H: {h2h['h2h_confidence']*100:.1f}%")
        print("   ‚úÖ An√°lise H2H: FUNCIONANDO")
        
        # Teste 3: An√°lise de jogadores
        print("\n3. Testando an√°lise de jogadores...")
        players = system._analyze_player_performance('T1', 'Gen.G Esports', 'LCK')
        print(f"   T1 - Rating m√©dio: {players['team1_avg_rating']:.1f}")
        print(f"   T1 - Jogadores estrela: {players['team1_star_players']}")
        print(f"   Gen.G - Rating m√©dio: {players['team2_avg_rating']:.1f}")
        print(f"   Gen.G - Jogadores estrela: {players['team2_star_players']}")
        print("   ‚úÖ An√°lise de jogadores: FUNCIONANDO")
        
        # Teste 4: An√°lise de composi√ß√µes
        print("\n4. Testando an√°lise de composi√ß√µes...")
        comps = system._analyze_composition_synergy('T1', 'Gen.G Esports', 'LCK')
        print(f"   T1 - Estilo: {comps['team1_playstyle']}")
        print(f"   Gen.G - Estilo: {comps['team2_playstyle']}")
        print(f"   Compatibilidade: {comps['style_compatibility']*100:.1f}%")
        print("   ‚úÖ An√°lise de composi√ß√µes: FUNCIONANDO")
        
        # Teste 5: An√°lise de meta
        print("\n5. Testando an√°lise de meta...")
        meta = system._analyze_meta_adaptation('T1', 'Gen.G Esports', 'LCK')
        print(f"   Patch atual: {meta['current_patch']}")
        print(f"   T1 - Adapta√ß√£o: {meta['team1_adaptation']:.1f}")
        print(f"   Gen.G - Adapta√ß√£o: {meta['team2_adaptation']:.1f}")
        print("   ‚úÖ An√°lise de meta: FUNCIONANDO")
        
        # Teste 6: C√°lculo de unidades avan√ßado
        print("\n6. Testando c√°lculo de unidades avan√ßado...")
        units_high = system.calculate_bet_units(0.10, 0.85, 0.15)  # EV alto
        units_low = system.calculate_bet_units(0.03, 0.65, 0.05)   # EV baixo
        
        print(f"   EV Alto (10%): {units_high['units']} unidades - {units_high['recommendation']}")
        print(f"   EV Baixo (3%): {units_low['units']} unidades - {units_low['recommendation']}")
        print("   ‚úÖ C√°lculo de unidades: FUNCIONANDO")
        
        print("\n‚úÖ TODAS AS FUNCIONALIDADES AVAN√áADAS TESTADAS COM SUCESSO!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de funcionalidades: {e}")
        return False

if __name__ == "__main__":
    print(f"üïê Iniciando testes em {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Teste principal de integra√ß√£o
    integration_success = test_integration()
    
    if integration_success:
        # Teste de funcionalidades avan√ßadas
        features_success = test_advanced_features()
        
        if features_success:
            print(f"\nüéâ INTEGRA√á√ÉO COMPLETA E FUNCIONAL!")
            print(f"‚úÖ Sistema Avan√ßado de Value Betting 100% operacional")
            print(f"üöÄ Bot pronto para an√°lises multifatoriais avan√ßadas")
        else:
            print(f"\n‚ö†Ô∏è Integra√ß√£o OK, mas algumas funcionalidades com problemas")
    else:
        print(f"\n‚ùå FALHA NA INTEGRA√á√ÉO")
        print(f"üîß Verifique os erros acima e corrija antes de usar")
    
    print(f"\nüïê Testes finalizados em {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}") 