#!/usr/bin/env python3
"""
Verifica√ß√£o de Dados Reais - Sistema de Tips LoL V3
Verifica se o sistema est√° conectado apenas a dados reais de jogos ao vivo
"""

import asyncio
import sys
import os
from datetime import datetime
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from bot.api_clients.riot_api_client import RiotAPIClient
    from bot.api_clients.pandascore_api_client import PandaScoreAPIClient
    from bot.systems.tips_system import ProfessionalTipsSystem
    from bot.core_logic.prediction_system import DynamicPredictionSystem
    from bot.utils.logger_config import get_logger
except ImportError as e:
    print(f"‚ùå Erro de importa√ß√£o: {e}")
    sys.exit(1)

logger = get_logger(__name__)


class RealDataVerification:
    """Sistema de verifica√ß√£o de dados reais"""

    def __init__(self):
        self.verification_results = {}
        self.real_matches_found = []
        self.potential_issues = []

    async def verify_real_data_only(self) -> bool:
        """Verifica se o sistema usa apenas dados reais"""
        logger.info("üîç VERIFICA√á√ÉO DE DADOS REAIS - Sistema de Tips LoL V3")
        logger.info("=" * 70)
        
        success = True
        
        try:
            # 1. Verificar APIs conectadas a dados reais
            success &= await self._verify_api_connections()
            
            # 2. Verificar se h√° filtros anti-simula√ß√£o
            success &= await self._verify_anti_simulation_filters()
            
            # 3. Buscar partidas reais ao vivo
            success &= await self._verify_live_real_matches()
            
            # 4. Verificar sistema de valida√ß√£o de dados
            success &= await self._verify_data_validation()
            
            # 5. Gerar relat√≥rio final
            self._generate_verification_report()
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o: {e}")
            return False

    async def _verify_api_connections(self) -> bool:
        """Verifica se as APIs est√£o conectadas a dados reais"""
        logger.info("\n1Ô∏è‚É£ Verificando Conex√µes com APIs Reais")
        logger.info("-" * 50)
        
        try:
            # Testa Riot API (dados oficiais da Riot Games)
            riot_client = RiotAPIClient()
            logger.info("üîó Testando Riot API (dados oficiais)...")
            
            async with riot_client:
                # Busca dados de ligas oficiais
                leagues = await riot_client.get_leagues()
                if leagues:
                    logger.info(f"   ‚úÖ Riot API: {len(leagues)} ligas oficiais encontradas")
                    # Verifica se s√£o ligas reais (n√£o mock)
                    real_leagues = [l for l in leagues if self._is_real_league(l)]
                    logger.info(f"   ‚úÖ Ligas reais verificadas: {len(real_leagues)}")
                    self.verification_results['riot_api_real'] = True
                else:
                    logger.warning("   ‚ö†Ô∏è Riot API: Nenhuma liga encontrada")
                    self.verification_results['riot_api_real'] = False
            
            # Testa PandaScore API (odds reais)
            try:
                pandascore_client = PandaScoreAPIClient()
                logger.info("üí∞ Testando PandaScore API (odds reais)...")
                
                async with pandascore_client:
                    # Verifica health da API
                    health = await pandascore_client.health_check()
                    if health:
                        logger.info("   ‚úÖ PandaScore API: Conectada e respondendo")
                        
                        # Busca partidas com odds reais
                        live_matches = await pandascore_client.get_lol_live_matches()
                        logger.info(f"   ‚úÖ PandaScore: {len(live_matches)} partidas com odds encontradas")
                        self.verification_results['pandascore_real'] = True
                    else:
                        logger.warning("   ‚ö†Ô∏è PandaScore API: N√£o respondendo")
                        self.verification_results['pandascore_real'] = False
            except Exception as e:
                logger.error(f"   ‚ùå PandaScore API: Erro - {e}")
                self.verification_results['pandascore_real'] = False
            
            return self.verification_results.get('riot_api_real', False)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar APIs: {e}")
            return False

    async def _verify_anti_simulation_filters(self) -> bool:
        """Verifica se h√° filtros contra dados simulados"""
        logger.info("\n2Ô∏è‚É£ Verificando Filtros Anti-Simula√ß√£o")
        logger.info("-" * 50)
        
        try:
            # Verifica se o ProfessionalTipsSystem tem m√©todo de valida√ß√£o
            tips_system_class = ProfessionalTipsSystem
            
            # Verifica se existe m√©todo _is_real_match_data
            if hasattr(tips_system_class, '_is_real_match_data'):
                logger.info("   ‚úÖ Filtro anti-simula√ß√£o: _is_real_match_data() encontrado")
                self.verification_results['anti_simulation_filter'] = True
            else:
                logger.warning("   ‚ö†Ô∏è Filtro anti-simula√ß√£o: M√©todo n√£o encontrado")
                self.verification_results['anti_simulation_filter'] = False
            
            # Verifica se existe valida√ß√£o de qualidade de dados
            if hasattr(tips_system_class, '_match_meets_quality_criteria'):
                logger.info("   ‚úÖ Valida√ß√£o de qualidade: _match_meets_quality_criteria() encontrado")
                self.verification_results['quality_validation'] = True
            else:
                logger.warning("   ‚ö†Ô∏è Valida√ß√£o de qualidade: M√©todo n√£o encontrado")
                self.verification_results['quality_validation'] = False
            
            # Verifica palavras-chave de exclus√£o
            keywords_to_check = ['mock', 'test', 'fake', 'dummy', 'simulate']
            logger.info(f"   üîç Verificando exclus√£o de dados com keywords: {keywords_to_check}")
            
            # Se pelo menos um filtro existe, considera v√°lido
            has_filters = (
                self.verification_results.get('anti_simulation_filter', False) or
                self.verification_results.get('quality_validation', False)
            )
            
            if has_filters:
                logger.info("   ‚úÖ Sistema possui filtros para evitar dados simulados")
            else:
                logger.warning("   ‚ö†Ô∏è Sistema pode n√£o ter filtros suficientes contra simula√ß√£o")
                self.potential_issues.append("Faltam filtros anti-simula√ß√£o")
            
            return has_filters
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar filtros: {e}")
            return False

    async def _verify_live_real_matches(self) -> bool:
        """Busca e verifica partidas reais ao vivo"""
        logger.info("\n3Ô∏è‚É£ Buscando Partidas Reais Ao Vivo")
        logger.info("-" * 50)
        
        try:
            # Inicializa clientes
            riot_client = RiotAPIClient()
            pandascore_client = PandaScoreAPIClient()
            
            real_matches_found = 0
            
            async with riot_client, pandascore_client:
                # Busca partidas da Riot API
                logger.info("üéÆ Buscando partidas na Riot API...")
                riot_matches = await riot_client.get_live_matches()
                
                for match in riot_matches:
                    if self._is_real_match(match):
                        real_matches_found += 1
                        self.real_matches_found.append({
                            'source': 'Riot API',
                            'match_id': match.get('id', 'N/A'),
                            'teams': f"{match.get('team1', {}).get('name', 'Team1')} vs {match.get('team2', {}).get('name', 'Team2')}",
                            'league': match.get('league', {}).get('name', 'Unknown')
                        })
                
                logger.info(f"   üìä Riot API: {len(riot_matches)} partidas encontradas, {real_matches_found} validadas como reais")
                
                # Busca partidas do PandaScore
                logger.info("üí∞ Buscando partidas no PandaScore...")
                pandascore_matches = await pandascore_client.get_lol_live_matches()
                
                pandascore_real = 0
                for match in pandascore_matches:
                    if self._is_real_match(match):
                        pandascore_real += 1
                        self.real_matches_found.append({
                            'source': 'PandaScore',
                            'match_id': match.get('id', 'N/A'),
                            'teams': f"{match.get('team1', {}).get('name', 'Team1')} vs {match.get('team2', {}).get('name', 'Team2')}",
                            'league': match.get('league', {}).get('name', 'Unknown')
                        })
                
                logger.info(f"   üìä PandaScore: {len(pandascore_matches)} partidas encontradas, {pandascore_real} validadas como reais")
                
                total_real_matches = real_matches_found + pandascore_real
                
                # Log das partidas encontradas
                if self.real_matches_found:
                    logger.info("   üéØ Partidas reais encontradas:")
                    for match in self.real_matches_found[:5]:  # Mostra apenas as 5 primeiras
                        logger.info(f"      ‚Ä¢ {match['teams']} ({match['league']}) - {match['source']}")
                    
                    if len(self.real_matches_found) > 5:
                        logger.info(f"      ... e mais {len(self.real_matches_found) - 5} partidas")
                
                self.verification_results['real_matches_found'] = total_real_matches > 0
                self.verification_results['total_real_matches'] = total_real_matches
                
                return total_real_matches > 0
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar partidas reais: {e}")
            return False

    async def _verify_data_validation(self) -> bool:
        """Verifica sistema de valida√ß√£o de dados"""
        logger.info("\n4Ô∏è‚É£ Verificando Sistema de Valida√ß√£o")
        logger.info("-" * 50)
        
        try:
            # Verifica se ProfessionalTip tem valida√ß√£o
            from bot.data_models.tip_data import ProfessionalTip
            
            # Testa m√©todo de valida√ß√£o
            if hasattr(ProfessionalTip, 'validate'):
                logger.info("   ‚úÖ ProfessionalTip.validate() - Valida√ß√£o de tips implementada")
                self.verification_results['tip_validation'] = True
            else:
                logger.warning("   ‚ö†Ô∏è ProfessionalTip.validate() - M√©todo de valida√ß√£o n√£o encontrado")
                self.verification_results['tip_validation'] = False
            
            # Verifica filtros de qualidade no sistema de tips
            try:
                from bot.systems.tips_system import ProfessionalTipsSystem
                
                # Simula cria√ß√£o do sistema para verificar filtros
                mock_clients = self._create_mock_clients()
                tips_system = ProfessionalTipsSystem(*mock_clients)
                
                # Verifica configura√ß√£o de filtros
                if hasattr(tips_system, 'quality_filters'):
                    filters = tips_system.quality_filters
                    logger.info(f"   ‚úÖ Filtros de qualidade configurados:")
                    logger.info(f"      ‚Ä¢ Ligas suportadas: {len(filters.get('supported_leagues', []))}")
                    logger.info(f"      ‚Ä¢ Tempo m√≠n/m√°x: {filters.get('min_game_time_minutes')}-{filters.get('max_game_time_minutes')}min")
                    logger.info(f"      ‚Ä¢ Qualidade m√≠nima: {filters.get('min_data_quality', 0):.1%}")
                    self.verification_results['quality_filters'] = True
                else:
                    logger.warning("   ‚ö†Ô∏è Filtros de qualidade n√£o encontrados")
                    self.verification_results['quality_filters'] = False
                    
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è Erro ao verificar sistema de tips: {e}")
                self.verification_results['quality_filters'] = False
            
            # Se pelo menos valida√ß√£o de tip existe, considera v√°lido
            return self.verification_results.get('tip_validation', False)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar valida√ß√£o: {e}")
            return False

    def _is_real_league(self, league_data: dict) -> bool:
        """Verifica se √© uma liga real"""
        if not isinstance(league_data, dict):
            return False
        
        name = league_data.get('name', '').lower()
        
        # Ligas oficiais conhecidas
        real_leagues = [
            'lck', 'lec', 'lcs', 'lpl', 'cblol', 'vcs', 'ljl', 'pcs',
            'worlds', 'msi', 'spring', 'summer', 'playoff'
        ]
        
        # Palavras que indicam dados fake
        fake_keywords = ['mock', 'test', 'fake', 'dummy', 'sample']
        
        # Verifica se cont√©m palavras fake
        if any(keyword in name for keyword in fake_keywords):
            return False
        
        # Verifica se √© liga real
        return any(real_league in name for real_league in real_leagues) or len(name) > 2

    def _is_real_match(self, match_data: dict) -> bool:
        """Verifica se √© uma partida real"""
        if not isinstance(match_data, dict):
            return False
        
        # Verifica ID da partida
        match_id = str(match_data.get('id', ''))
        if any(keyword in match_id.lower() for keyword in ['mock', 'test', 'fake', 'dummy']):
            return False
        
        # Verifica nomes dos times
        team1_name = match_data.get('team1', {}).get('name', '') if isinstance(match_data.get('team1'), dict) else ''
        team2_name = match_data.get('team2', {}).get('name', '') if isinstance(match_data.get('team2'), dict) else ''
        
        # Times com nomes gen√©ricos ou fake
        fake_team_names = ['team1', 'team2', 'teama', 'teamb', 'mock', 'test', 'fake']
        
        if (team1_name.lower() in fake_team_names or 
            team2_name.lower() in fake_team_names or
            not team1_name or not team2_name):
            return False
        
        # Se passou em todos os testes, considera real
        return True

    def _create_mock_clients(self):
        """Cria clients mock para teste"""
        class MockClient:
            pass
        
        return [MockClient(), MockClient(), MockClient()]

    def _generate_verification_report(self):
        """Gera relat√≥rio final da verifica√ß√£o"""
        logger.info("\n" + "=" * 70)
        logger.info("üìã RELAT√ìRIO: VERIFICA√á√ÉO DE DADOS REAIS")
        logger.info("=" * 70)
        
        # Contadores
        total_checks = len(self.verification_results)
        passed_checks = sum(1 for result in self.verification_results.values() if result)
        
        logger.info(f"üìä RESULTADO GERAL: {passed_checks}/{total_checks} verifica√ß√µes aprovadas")
        
        # Detalhes das verifica√ß√µes
        logger.info("\nüîç DETALHES DAS VERIFICA√á√ïES:")
        
        check_details = {
            'riot_api_real': 'Riot API conectada a dados oficiais',
            'pandascore_real': 'PandaScore API conectada a odds reais',
            'anti_simulation_filter': 'Filtros anti-simula√ß√£o implementados',
            'quality_validation': 'Valida√ß√£o de qualidade de dados',
            'real_matches_found': 'Partidas reais encontradas ao vivo',
            'tip_validation': 'Valida√ß√£o de tips profissionais',
            'quality_filters': 'Filtros de qualidade configurados'
        }
        
        for check, description in check_details.items():
            result = self.verification_results.get(check, False)
            icon = "‚úÖ" if result else "‚ùå"
            logger.info(f"   {icon} {description}")
        
        # Estat√≠sticas de partidas reais
        if 'total_real_matches' in self.verification_results:
            total_matches = self.verification_results['total_real_matches']
            logger.info(f"\nüéÆ PARTIDAS REAIS ENCONTRADAS: {total_matches}")
        
        # Problemas encontrados
        if self.potential_issues:
            logger.info("\n‚ö†Ô∏è PROBLEMAS POTENCIAIS:")
            for issue in self.potential_issues:
                logger.info(f"   ‚Ä¢ {issue}")
        
        # Veredicto final
        success_rate = passed_checks / total_checks if total_checks > 0 else 0
        
        if success_rate >= 0.9:
            logger.info("\nüéâ VEREDICTO: ‚úÖ SISTEMA USANDO APENAS DADOS REAIS!")
            logger.info("üîí O sistema est√° corretamente configurado para:")
            logger.info("   ‚Ä¢ Buscar apenas partidas ao vivo de APIs oficiais")
            logger.info("   ‚Ä¢ Filtrar dados simulados e mock")
            logger.info("   ‚Ä¢ Validar qualidade dos dados")
            logger.info("   ‚Ä¢ Gerar tips apenas com base em jogos reais")
        elif success_rate >= 0.7:
            logger.info("\n‚ö†Ô∏è VEREDICTO: üü° SISTEMA MAJORITARIAMENTE SEGURO")
            logger.info("üîß Alguns ajustes recomendados para garantir 100% dados reais")
        else:
            logger.info("\n‚ùå VEREDICTO: üî¥ RISCO DE DADOS SIMULADOS!")
            logger.info("‚ö†Ô∏è O sistema pode estar gerando tips com dados n√£o-reais")
            logger.info("üõ†Ô∏è A√á√ÉO NECESS√ÅRIA: Revisar filtros e conex√µes de API")
        
        # Pr√≥ximos passos
        logger.info("\nüìã PR√ìXIMOS PASSOS RECOMENDADOS:")
        logger.info("   1. Monitorar tips geradas em produ√ß√£o")
        logger.info("   2. Verificar logs de partidas processadas")  
        logger.info("   3. Confirmar IDs de partidas s√£o de jogos oficiais")
        logger.info("   4. Validar se odds v√™m de casas de apostas reais")
        
        logger.info("=" * 70)


async def main():
    """Fun√ß√£o principal"""
    verification = RealDataVerification()
    success = await verification.verify_real_data_only()
    
    return success


if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        if result:
            print("\n‚úÖ Verifica√ß√£o conclu√≠da: Sistema usando dados reais!")
        else:
            print("\n‚ö†Ô∏è Verifica√ß√£o encontrou poss√≠veis problemas com dados")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë Verifica√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro fatal na verifica√ß√£o: {e}")
        sys.exit(1) 
