#!/usr/bin/env python3
"""
Bot LoL V3 - Vers√£o Railway Simplificada
Foco em estabilidade e funcionamento b√°sico
"""

import os
import sys
import asyncio
import threading
import time
from pathlib import Path

# Configura√ß√µes de ambiente
os.environ.setdefault('ENVIRONMENT', 'production')
os.environ.setdefault('TZ', 'America/Sao_Paulo')

# Adiciona o diret√≥rio do bot ao path
BOT_DIR = Path(__file__).parent
sys.path.insert(0, str(BOT_DIR))

# Health check em thread separada
def start_health_server():
    """Inicia servidor de health check"""
    try:
        from simple_health_check import run_server
        print("üè• Iniciando health check server...")
        run_server()
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no health check: {e}")

# Logger b√°sico
class SimpleLogger:
    def info(self, msg):
        print(f"[INFO] {msg}")
    
    def error(self, msg):
        print(f"[ERROR] {msg}")
    
    def warning(self, msg):
        print(f"[WARN] {msg}")
    
    def debug(self, msg):
        print(f"[DEBUG] {msg}")

logger = SimpleLogger()

class RailwayBot:
    """Bot simplificado para Railway"""
    
    def __init__(self):
        self.is_running = False
        self.alerts_system = None
        self.schedule_manager = None
        
    async def initialize(self):
        """Inicializa√ß√£o simplificada"""
        try:
            logger.info("üîß Inicializando componentes essenciais...")
            
            # 1. Sistema de alertas Telegram
            try:
                from bot.telegram_bot.alerts_system import TelegramAlertsSystem
                logger.info("üì± Inicializando Telegram...")
                
                # Pega o token das vari√°veis de ambiente
                bot_token = os.getenv("TELEGRAM_BOT_TOKEN", "")
                if not bot_token:
                    raise ValueError("TELEGRAM_BOT_TOKEN n√£o configurado")
                
                self.alerts_system = TelegramAlertsSystem(bot_token=bot_token)
                await self.alerts_system.initialize()
                
                # CR√çTICO: Inicia o polling para receber comandos
                await self.alerts_system.start_bot()
                logger.info("‚úÖ Telegram inicializado com polling ativo")
            except Exception as e:
                logger.error(f"‚ùå Erro Telegram: {e}")
                raise
            
            # 2. Inicializa√ß√£o b√°sica sem ScheduleManager complexo
            # (Sistema funcionar√° apenas com Telegram para Railway)
            logger.info("‚úÖ Sistema b√°sico inicializado para Railway!")
            logger.info("ü§ñ Bot Telegram operacional")
            
        except Exception as e:
            logger.error(f"‚ùå Falha na inicializa√ß√£o: {e}")
            raise

    async def cleanup(self):
        """Limpeza de recursos"""
        try:
            logger.info("üßπ Iniciando limpeza...")
            
            if hasattr(self, 'alerts_system') and self.alerts_system:
                # Usar o m√©todo correto de limpeza
                if hasattr(self.alerts_system, 'cleanup_old_cache'):
                    self.alerts_system.cleanup_old_cache()
                    
                # Tentar parar o bot de forma segura
                if hasattr(self.alerts_system, 'application') and self.alerts_system.application:
                    try:
                        if self.alerts_system.application.updater and self.alerts_system.application.updater.running:
                            await self.alerts_system.application.updater.stop()
                        if self.alerts_system.application.running:
                            await self.alerts_system.application.stop()
                        await self.alerts_system.application.shutdown()
                    except Exception as cleanup_error:
                        logger.warning(f"‚ö†Ô∏è Erro na limpeza do Telegram: {cleanup_error}")
                    
            logger.info("‚úÖ Limpeza conclu√≠da")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na limpeza: {e}")

    async def run(self):
        """Execu√ß√£o principal simplificada"""
        try:
            await self.initialize()
            
            logger.info("üöÄ Bot LoL V3 Railway executando!")
            logger.info("üí° Sistema b√°sico ativo - Telegram Bot funcionando")
            logger.info("üîÑ Bot aguardando comandos via polling...")
            
            # Loop principal para manter o processo ativo
            # O polling do Telegram roda em background
            while True:
                await asyncio.sleep(30)  # Health check a cada 30s
                
                # Verifica se o bot ainda est√° rodando
                if hasattr(self, 'alerts_system') and self.alerts_system:
                    if (hasattr(self.alerts_system, 'application') and 
                        self.alerts_system.application and 
                        hasattr(self.alerts_system.application, 'updater') and
                        self.alerts_system.application.updater and
                        self.alerts_system.application.updater.running):
                        logger.debug("üîÑ Sistema ativo - Telegram polling OK")
                    else:
                        logger.warning("‚ö†Ô∏è Polling do Telegram n√£o est√° ativo")
                        break
                else:
                    logger.warning("‚ö†Ô∏è Sistema n√£o inicializado corretamente")
                    break
                    
        except KeyboardInterrupt:
            logger.info("üõë Interrompido pelo usu√°rio")
        except Exception as e:
            logger.error(f"‚ùå Erro durante execu√ß√£o: {e}")
            raise
        finally:
            # Cleanup
            await self.cleanup()

async def main():
    """Fun√ß√£o principal"""
    try:
        # Valida√ß√µes b√°sicas
        token = os.getenv("TELEGRAM_BOT_TOKEN", "")
        admin_ids = os.getenv("TELEGRAM_ADMIN_USER_IDS", "")
        
        if not token:
            raise ValueError("‚ùå TELEGRAM_BOT_TOKEN n√£o configurado!")
        
        logger.info("üîç Ambiente Railway detectado")
        logger.info(f"ü§ñ Token: {token[:10]}...")
        logger.info(f"üëë Admin: {admin_ids}")
        
        # Cria e inicia bot
        bot = RailwayBot()
        await bot.run()
        
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è Interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"üí• Erro fatal: {e}")
        sys.exit(1)

def run():
    """Executa o bot"""
    try:
        # Inicia health check em thread separada
        health_thread = threading.Thread(target=start_health_server, daemon=True)
        health_thread.start()
        
        # Configura event loop
        if os.name == 'nt':
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
        # Executa bot
        logger.info("üöÄ Bot LoL V3 Railway - Iniciando...")
        logger.info(f"üìç PID: {os.getpid()}")
        
        asyncio.run(main())
        
    except Exception as e:
        logger.error(f"üí• Erro na execu√ß√£o: {e}")
        sys.exit(1)

if __name__ == "__main__":
    run() 