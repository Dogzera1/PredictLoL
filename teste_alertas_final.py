#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste Final - Sistema de Alertas para Partidas Reais
Confirma que o sistema est√° 100% configurado para dados reais
"""

import sys
sys.path.append('.')

def teste_alertas_partidas_reais():
    """Teste completo do sistema de alertas com partidas reais"""
    print("üöÄ TESTE FINAL - ALERTAS PARA PARTIDAS REAIS")
    print("=" * 70)
    
    try:
        from bot_v13_railway import BotLoLV3Railway
        
        # Inicializar bot
        print("ü§ñ Inicializando bot...")
        bot = BotLoLV3Railway()
        alert_system = bot.alert_system
        print("‚úÖ Bot e sistema de alertas inicializados")
        
        # Teste 1: Verificar dados das partidas
        print(f"\nüìä TESTE 1: DADOS DAS PARTIDAS")
        print("-" * 50)
        
        agenda_data = bot._get_scheduled_matches()
        partidas = agenda_data.get('matches', [])
        
        print(f"‚úÖ Total de partidas: {len(partidas)}")
        
        # Verificar se s√£o partidas reais
        ligas_reais = 0
        times_reais = 0
        
        for partida in partidas:
            liga = partida.get('league', '')
            team1 = partida.get('team1', '')
            team2 = partida.get('team2', '')
            
            # Verificar se liga √© real
            ligas_oficiais = {
                'LCK', 'LPL', 'LEC', 'LTA North', 'LTA South', 'LCP',
                'VCS', 'LJL', 'CBLOL', 'CBLOL Academy', 'NACL',
                'LFL', 'Prime League', 'Superliga', 'NLC', 'PG Nationals',
                'TCL', 'Arabian League', 'Liga Nacional M√©xico', 
                'Liga Nacional Argentina', 'Liga Nacional Chile',
                'LPLOL', 'GLL'
            }
            
            if liga in ligas_oficiais:
                ligas_reais += 1
            
            # Verificar se times s√£o reais (n√£o fict√≠cios)
            if team1 and team2 and team1 != team2:
                times_reais += 1
        
        print(f"‚úÖ Ligas oficiais: {ligas_reais}/{len(partidas)}")
        print(f"‚úÖ Times v√°lidos: {times_reais}/{len(partidas)}")
        
        # Teste 2: Verificar m√©todos de alertas
        print(f"\nüö® TESTE 2: M√âTODOS DE ALERTAS")
        print("-" * 50)
        
        # Testar _check_live_matches
        print("üîç Testando _check_live_matches...")
        try:
            alert_system._check_live_matches()
            print("‚úÖ _check_live_matches executado com sucesso")
            metodo_live_ok = True
        except Exception as e:
            print(f"‚ùå Erro em _check_live_matches: {e}")
            metodo_live_ok = False
        
        # Testar _check_value_opportunities
        print("üîç Testando _check_value_opportunities...")
        try:
            alert_system._check_value_opportunities()
            print("‚úÖ _check_value_opportunities executado com sucesso")
            metodo_value_ok = True
        except Exception as e:
            print(f"‚ùå Erro em _check_value_opportunities: {e}")
            metodo_value_ok = False
        
        # Teste 3: Verificar integra√ß√£o com dados reais
        print(f"\nüîó TESTE 3: INTEGRA√á√ÉO COM DADOS REAIS")
        print("-" * 50)
        
        import inspect
        
        # Verificar se _check_live_matches usa _get_scheduled_matches
        source_live = inspect.getsource(alert_system._check_live_matches)
        usa_dados_reais_live = "_get_scheduled_matches" in source_live
        
        # Verificar se _check_value_opportunities usa _get_scheduled_matches
        source_value = inspect.getsource(alert_system._check_value_opportunities)
        usa_dados_reais_value = "_get_scheduled_matches" in source_value
        
        print(f"‚úÖ _check_live_matches usa dados reais: {usa_dados_reais_live}")
        print(f"‚úÖ _check_value_opportunities usa dados reais: {usa_dados_reais_value}")
        
        # Verificar se n√£o h√° termos de simula√ß√£o
        termos_simulacao = ["simular", "simula√ß√£o", "fake", "mock", "fict√≠cio"]
        tem_simulacao = False
        
        for termo in termos_simulacao:
            if termo.lower() in source_live.lower() or termo.lower() in source_value.lower():
                tem_simulacao = True
                break
        
        print(f"‚úÖ Livre de simula√ß√£o: {not tem_simulacao}")
        
        # Teste 4: Configura√ß√µes do sistema
        print(f"\n‚öôÔ∏è TESTE 4: CONFIGURA√á√ïES DO SISTEMA")
        print("-" * 50)
        
        settings = alert_system.alert_settings
        
        config_ok = (
            settings.get('live_matches', False) and
            settings.get('value_opportunities', False) and
            settings.get('min_ev', 0) > 0 and
            settings.get('min_confidence', 0) > 0
        )
        
        print(f"‚úÖ Alertas de partidas ao vivo: {settings.get('live_matches', False)}")
        print(f"‚úÖ Alertas de value betting: {settings.get('value_opportunities', False)}")
        print(f"‚úÖ EV m√≠nimo: {settings.get('min_ev', 0)}")
        print(f"‚úÖ Confian√ßa m√≠nima: {settings.get('min_confidence', 0)}")
        print(f"‚úÖ Configura√ß√µes v√°lidas: {config_ok}")
        
        # Resultado final
        print(f"\nüìä RESULTADO FINAL")
        print("=" * 70)
        
        todos_testes = [
            ligas_reais == len(partidas),  # Todas as ligas s√£o reais
            times_reais == len(partidas),  # Todos os times s√£o v√°lidos
            metodo_live_ok,                # M√©todo live funciona
            metodo_value_ok,               # M√©todo value funciona
            usa_dados_reais_live,          # Live usa dados reais
            usa_dados_reais_value,         # Value usa dados reais
            not tem_simulacao,             # Sem simula√ß√£o
            config_ok                      # Configura√ß√µes OK
        ]
        
        testes_passaram = sum(todos_testes)
        total_testes = len(todos_testes)
        
        print(f"‚úÖ Testes passaram: {testes_passaram}/{total_testes}")
        print(f"üìà Taxa de sucesso: {(testes_passaram/total_testes)*100:.1f}%")
        
        if testes_passaram == total_testes:
            print(f"\nüéâ SISTEMA DE ALERTAS 100% CONFIGURADO PARA PARTIDAS REAIS!")
            print("‚úÖ Todos os alertas usam apenas dados reais")
            print("‚úÖ Nenhuma simula√ß√£o ou dado fict√≠cio detectado")
            print("‚úÖ Integra√ß√£o perfeita com agenda oficial")
            print("‚úÖ Configura√ß√µes adequadas para produ√ß√£o")
            return True
        else:
            print(f"\n‚ö†Ô∏è ALGUNS PROBLEMAS AINDA EXISTEM")
            print(f"‚ùå {total_testes - testes_passaram} testes falharam")
            return False
            
    except Exception as e:
        print(f"‚ùå ERRO GERAL: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal"""
    resultado = teste_alertas_partidas_reais()
    
    if resultado:
        print(f"\nüèÜ CONCLUS√ÉO: ALERTAS CONFIGURADOS CORRETAMENTE!")
        print("O sistema est√° pronto para detectar apenas partidas reais.")
    else:
        print(f"\n‚ùå CONCLUS√ÉO: AINDA H√Å PROBLEMAS A CORRIGIR")
        print("Verifique os testes que falharam acima.")

if __name__ == "__main__":
    main() 