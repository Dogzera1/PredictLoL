#!/usr/bin/env python3
"""
Script para Resolver Conflito de Inst√¢ncias Telegram

Resolve o erro: "terminated by other getUpdates request"
"""

import os
import asyncio
import aiohttp
import sys
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

async def resolve_telegram_conflict():
    """
    Resolve conflito de inst√¢ncias do bot Telegram
    """
    print("üîß Resolvendo conflito de inst√¢ncias Telegram...")
    
    # Obt√©m token do bot
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN n√£o encontrado!")
        print("üí° Configure no .env ou como vari√°vel de ambiente")
        return False
    
    try:
        async with aiohttp.ClientSession() as session:
            base_url = f"https://api.telegram.org/bot{bot_token}"
            
            print("üìã 1. Verificando status atual do webhook...")
            
            # 1. Verifica webhook atual
            async with session.get(f"{base_url}/getWebhookInfo") as resp:
                if resp.status == 200:
                    webhook_info = await resp.json()
                    webhook_url = webhook_info.get("result", {}).get("url", "")
                    if webhook_url:
                        print(f"‚ö†Ô∏è  Webhook ativo encontrado: {webhook_url}")
                    else:
                        print("‚úÖ Nenhum webhook ativo")
                else:
                    print("‚ö†Ô∏è  N√£o foi poss√≠vel verificar webhook")
            
            print("üßπ 2. Removendo webhook (se existir)...")
            
            # 2. Remove webhook
            async with session.post(f"{base_url}/deleteWebhook") as resp:
                if resp.status == 200:
                    result = await resp.json()
                    if result.get("ok"):
                        print("‚úÖ Webhook removido com sucesso")
                    else:
                        print(f"‚ö†Ô∏è  Resposta webhook: {result}")
                else:
                    print("‚ö†Ô∏è  Erro ao remover webhook")
            
            print("üîÑ 3. Cancelando polling ativo...")
            
            # 3. Cancela polling ativo com timeout 0
            async with session.post(f"{base_url}/getUpdates", 
                                   json={"timeout": 0, "limit": 100}) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    updates_count = len(result.get("result", []))
                    print(f"‚úÖ Polling cancelado ({updates_count} updates limpos)")
                else:
                    print("‚ö†Ô∏è  Erro ao cancelar polling")
            
            print("‚è≥ 4. Aguardando estabiliza√ß√£o...")
            await asyncio.sleep(3)
            
            print("‚úÖ 5. Verificando status final...")
            
            # 4. Verifica status final
            async with session.get(f"{base_url}/getWebhookInfo") as resp:
                if resp.status == 200:
                    webhook_info = await resp.json()
                    webhook_url = webhook_info.get("result", {}).get("url", "")
                    if not webhook_url:
                        print("‚úÖ Webhook limpo confirmado")
                    else:
                        print(f"‚ö†Ô∏è  Webhook ainda ativo: {webhook_url}")
                
            # 5. Teste final com getMe
            async with session.get(f"{base_url}/getMe") as resp:
                if resp.status == 200:
                    bot_info = await resp.json()
                    if bot_info.get("ok"):
                        bot_name = bot_info.get("result", {}).get("username", "unknown")
                        print(f"‚úÖ Bot @{bot_name} pronto para uso")
                        return True
                    else:
                        print("‚ùå Erro na verifica√ß√£o final do bot")
                        return False
                else:
                    print("‚ùå Bot n√£o responde")
                    return False
                    
    except Exception as e:
        print(f"‚ùå Erro durante resolu√ß√£o: {e}")
        return False

def print_instructions():
    """Exibe instru√ß√µes p√≥s-resolu√ß√£o"""
    print("\n" + "="*60)
    print("üìã PR√ìXIMOS PASSOS")
    print("="*60)
    print("1. üöÑ V√° para Railway dashboard")
    print("2. üîÑ Clique em 'Redeploy' na se√ß√£o Deployments") 
    print("3. ‚è≥ Aguarde logs mostrarem: 'üéâ SISTEMA TOTALMENTE OPERACIONAL!'")
    print("4. üì± Teste bot com /start no Telegram")
    print("\nüîç Monitoramento:")
    print("   ‚Ä¢ Health check: https://seu-app.railway.app/health")
    print("   ‚Ä¢ Status: https://seu-app.railway.app/status")
    print("\n‚úÖ Conflito resolvido! Bot pronto para Railway.")

async def main():
    """Fun√ß√£o principal"""
    print("üöÄ RESOLU√á√ÉO DE CONFLITO TELEGRAM - BOT LOL V3")
    print("="*60)
    print("Resolvendo: 'terminated by other getUpdates request'")
    print("")
    
    success = await resolve_telegram_conflict()
    
    print("\n" + "="*60)
    if success:
        print("üéâ CONFLITO RESOLVIDO COM SUCESSO!")
        print_instructions()
    else:
        print("‚ùå Falha na resolu√ß√£o do conflito")
        print("\nüîß Solu√ß√µes manuais:")
        print("1. Verifique TELEGRAM_BOT_TOKEN")
        print("2. Acesse: https://api.telegram.org/botSEU_TOKEN/deleteWebhook")
        print("3. Restart Railway manualmente")
    
    return success

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\nüõë Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")
        sys.exit(1) 
