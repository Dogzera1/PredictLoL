#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para resolver conflito de m√∫ltiplas inst√¢ncias do Telegram Bot
"""

import os
import requests
import time
from datetime import datetime

# Token do bot
TOKEN = os.getenv('TELEGRAM_TOKEN', '7584060058:AAFTZcmirun47zLiCCm48Trre6c3oXnM-Cg')

def clear_webhook():
    """Limpar webhook se existir"""
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/deleteWebhook"
        response = requests.post(url)
        if response.status_code == 200:
            print("‚úÖ Webhook removido com sucesso")
            return True
        else:
            print(f"‚ö†Ô∏è Erro ao remover webhook: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao limpar webhook: {e}")
        return False

def get_bot_info():
    """Obter informa√ß√µes do bot"""
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/getMe"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            if data['ok']:
                bot_info = data['result']
                print(f"ü§ñ Bot: @{bot_info['username']} ({bot_info['first_name']})")
                print(f"üÜî ID: {bot_info['id']}")
                return True
        print(f"‚ùå Erro ao obter info do bot: {response.status_code}")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao conectar com bot: {e}")
        return False

def check_webhook_status():
    """Verificar status do webhook"""
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            if data['ok']:
                webhook_info = data['result']
                if webhook_info['url']:
                    print(f"üîó Webhook ativo: {webhook_info['url']}")
                    print(f"üìä Updates pendentes: {webhook_info.get('pending_update_count', 0)}")
                    return True
                else:
                    print("‚úÖ Nenhum webhook configurado")
                    return False
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar webhook: {e}")
        return False

def clear_pending_updates():
    """Limpar updates pendentes"""
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/getUpdates"
        params = {'offset': -1, 'limit': 1}
        response = requests.get(url, params=params)
        if response.status_code == 200:
            print("‚úÖ Updates pendentes limpos")
            return True
        else:
            print(f"‚ö†Ô∏è Erro ao limpar updates: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao limpar updates: {e}")
        return False

def main():
    """Fun√ß√£o principal para resolver conflitos"""
    print("üîß RESOLVENDO CONFLITO DE INST√ÇNCIAS DO TELEGRAM BOT")
    print("=" * 60)
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    # 1. Verificar conex√£o com o bot
    print("1Ô∏è‚É£ Verificando conex√£o com o bot...")
    if not get_bot_info():
        print("‚ùå Falha na conex√£o. Verifique o token.")
        return
    print()
    
    # 2. Verificar webhook
    print("2Ô∏è‚É£ Verificando status do webhook...")
    has_webhook = check_webhook_status()
    print()
    
    # 3. Limpar webhook se existir
    if has_webhook:
        print("3Ô∏è‚É£ Removendo webhook...")
        clear_webhook()
        time.sleep(2)
        print()
    
    # 4. Limpar updates pendentes
    print("4Ô∏è‚É£ Limpando updates pendentes...")
    clear_pending_updates()
    time.sleep(2)
    print()
    
    # 5. Verificar novamente
    print("5Ô∏è‚É£ Verifica√ß√£o final...")
    check_webhook_status()
    print()
    
    print("‚úÖ RESOLU√á√ÉO CONCLU√çDA!")
    print()
    print("üìã PR√ìXIMOS PASSOS:")
    print("1. Aguarde 30 segundos")
    print("2. Verifique se apenas UMA inst√¢ncia est√° rodando:")
    print("   ‚Ä¢ Railway: Deve estar ativo")
    print("   ‚Ä¢ Local: Deve estar parado")
    print("   ‚Ä¢ Outros servi√ßos: Devem estar parados")
    print("3. Teste o bot no Telegram")
    print()
    print("üí° Se o problema persistir:")
    print("   ‚Ä¢ Pare TODAS as inst√¢ncias")
    print("   ‚Ä¢ Aguarde 5 minutos")
    print("   ‚Ä¢ Inicie apenas UMA inst√¢ncia")

if __name__ == "__main__":
    main() 