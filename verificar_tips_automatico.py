#!/usr/bin/env python3
"""
Verifica√ß√£o do Sistema de Tips Autom√°tico - Bot LoL V3 Ultra Avan√ßado
Verifica se o sistema est√° pronto para gerar tips automaticamente

Execu√ß√£o:
    python verificar_tips_automatico.py
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# Adiciona o diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent))

from bot.utils.logger_config import get_logger

logger = get_logger(__name__)


class TipsSystemVerification:
    """Verifica√ß√£o completa do sistema de tips autom√°tico"""

    def __init__(self):
        self.components_status = {}

    async def verify_complete_system(self):
        """Verifica se o sistema completo est√° funcional"""
        try:
            logger.info("üéØ VERIFICA√á√ÉO SISTEMA DE TIPS AUTOM√ÅTICO")
            logger.info("=" * 60)
            
            # 1. Verificar imports e depend√™ncias
            await self._verify_imports()
            
            # 2. Verificar sistema de tips
            await self._verify_tips_system()
            
            # 3. Verificar componentes de suporte
            await self._verify_support_components()
            
            # 4. Verificar configura√ß√µes
            await self._verify_configurations()
            
            # 5. Simular funcionamento
            await self._simulate_tips_generation()
            
            # 6. Gerar relat√≥rio final
            self._generate_final_report()
            
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o: {e}")
            return False
            
        return True

    async def _verify_imports(self):
        """Verifica se todos os imports est√£o funcionando"""
        try:
            logger.info("üîç Verificando imports e depend√™ncias...")
            
            # Imports principais
            try:
                from bot.systems.professional_tips_system import ProfessionalTipsSystem
                self.components_status['professional_tips'] = True
                logger.info("‚úÖ ProfessionalTipsSystem - OK")
            except Exception as e:
                self.components_status['professional_tips'] = False
                logger.error(f"‚ùå ProfessionalTipsSystem - FALHA: {e}")
            
            try:
                from bot.systems.dynamic_prediction_system import DynamicPredictionSystem
                self.components_status['dynamic_prediction'] = True
                logger.info("‚úÖ DynamicPredictionSystem - OK")
            except Exception as e:
                self.components_status['dynamic_prediction'] = False
                logger.error(f"‚ùå DynamicPredictionSystem - FALHA: {e}")
            
            try:
                from bot.systems.schedule_manager import ScheduleManager
                self.components_status['schedule_manager'] = True
                logger.info("‚úÖ ScheduleManager - OK")
            except Exception as e:
                self.components_status['schedule_manager'] = False
                logger.error(f"‚ùå ScheduleManager - FALHA: {e}")
            
            try:
                from bot.monitoring.performance_monitor import PerformanceMonitor
                self.components_status['performance_monitor'] = True
                logger.info("‚úÖ PerformanceMonitor - OK")
            except Exception as e:
                self.components_status['performance_monitor'] = False
                logger.error(f"‚ùå PerformanceMonitor - FALHA: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o de imports: {e}")

    async def _verify_tips_system(self):
        """Verifica o sistema de tips especificamente"""
        try:
            logger.info("\nü§ñ Verificando Sistema de Tips...")
            
            # Importa e inicializa o sistema de tips
            from bot.systems.professional_tips_system import ProfessionalTipsSystem
            
            tips_system = ProfessionalTipsSystem()
            
            # Verifica inicializa√ß√£o
            logger.info("üîß Inicializando ProfessionalTipsSystem...")
            init_result = await tips_system.initialize()
            
            if init_result:
                logger.info("‚úÖ ProfessionalTipsSystem inicializado com sucesso")
                self.components_status['tips_initialization'] = True
            else:
                logger.error("‚ùå Falha na inicializa√ß√£o do ProfessionalTipsSystem")
                self.components_status['tips_initialization'] = False
            
            # Verifica configura√ß√µes do sistema
            logger.info("üìã Verificando configura√ß√µes...")
            logger.info(f"   ‚Ä¢ Rate limiting: {getattr(tips_system, 'max_tips_per_hour', 'N/A')} tips/hora")
            logger.info(f"   ‚Ä¢ Confian√ßa m√≠nima: {getattr(tips_system, 'min_confidence', 'N/A')}")
            logger.info(f"   ‚Ä¢ ROI m√≠nimo: {getattr(tips_system, 'min_expected_value', 'N/A')}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o do sistema de tips: {e}")
            self.components_status['tips_system'] = False

    async def _verify_support_components(self):
        """Verifica componentes de suporte"""
        try:
            logger.info("\nüîß Verificando componentes de suporte...")
            
            # Verification de APIs
            try:
                from bot.api_clients.riot_api_client import RiotAPIClient
                logger.info("‚úÖ RiotAPIClient - OK")
                self.components_status['riot_api'] = True
            except Exception as e:
                logger.error(f"‚ùå RiotAPIClient - FALHA: {e}")
                self.components_status['riot_api'] = False
            
            # Verifica√ß√£o de analisadores
            try:
                from bot.analyzers.composition_analyzer import CompositionAnalyzer
                logger.info("‚úÖ CompositionAnalyzer - OK")
                self.components_status['composition_analyzer'] = True
            except Exception as e:
                logger.error(f"‚ùå CompositionAnalyzer - FALHA: {e}")
                self.components_status['composition_analyzer'] = False
            
            try:
                from bot.analyzers.patch_analyzer import PatchAnalyzer
                logger.info("‚úÖ PatchAnalyzer - OK")
                self.components_status['patch_analyzer'] = True
            except Exception as e:
                logger.error(f"‚ùå PatchAnalyzer - FALHA: {e}")
                self.components_status['patch_analyzer'] = False
            
            # Verifica√ß√£o de ML
            try:
                from bot.ml.model_predictor import ModelPredictor
                logger.info("‚úÖ ModelPredictor - OK")
                self.components_status['ml_predictor'] = True
            except Exception as e:
                logger.error(f"‚ùå ModelPredictor - FALHA: {e}")
                self.components_status['ml_predictor'] = False
                
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o de componentes: {e}")

    async def _verify_configurations(self):
        """Verifica configura√ß√µes necess√°rias"""
        try:
            logger.info("\n‚öôÔ∏è Verificando configura√ß√µes...")
            
            # Verificar estrutura de diret√≥rios
            required_dirs = [
                "bot/data",
                "bot/data/tips",
                "bot/data/monitoring",
                "bot/data/ml",
                "bot/data/logs"
            ]
            
            for dir_path in required_dirs:
                path = Path(dir_path)
                if path.exists():
                    logger.info(f"‚úÖ Diret√≥rio {dir_path} - OK")
                else:
                    logger.warning(f"‚ö†Ô∏è Diret√≥rio {dir_path} - SER√Å CRIADO")
                    path.mkdir(parents=True, exist_ok=True)
            
            # Verificar vari√°veis de ambiente cr√≠ticas
            import os
            env_vars = [
                "TELEGRAM_BOT_TOKEN",
                "TELEGRAM_ADMIN_USER_IDS"
            ]
            
            for var in env_vars:
                if os.getenv(var):
                    logger.info(f"‚úÖ {var} - CONFIGURADA")
                    self.components_status[f'env_{var.lower()}'] = True
                else:
                    logger.warning(f"‚ö†Ô∏è {var} - N√ÉO CONFIGURADA")
                    self.components_status[f'env_{var.lower()}'] = False
                    
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o de configura√ß√µes: {e}")

    async def _simulate_tips_generation(self):
        """Simula o processo de gera√ß√£o de tips"""
        try:
            logger.info("\nüéÆ Simulando gera√ß√£o de tips...")
            
            # Dados simulados de uma partida
            sample_match_data = {
                "match_id": "sim_001",
                "team1": {
                    "name": "Team Liquid",
                    "players": ["CoreJJ", "Bwipo", "APA", "Yeon", "Umti"],
                    "recent_form": 0.75
                },
                "team2": {
                    "name": "Cloud9", 
                    "players": ["Vulcan", "Thanatos", "Jojopyun", "Berserker", "Blaber"],
                    "recent_form": 0.68
                },
                "tournament": "LCS Spring",
                "odds": {"team1": 1.65, "team2": 2.25}
            }
            
            logger.info(f"üìä Partida simulada: {sample_match_data['team1']['name']} vs {sample_match_data['team2']['name']}")
            
            # Simula an√°lise
            logger.info("üß† Executando an√°lise ML...")
            await asyncio.sleep(0.5)
            
            logger.info("üìà Calculando composi√ß√µes...")
            await asyncio.sleep(0.3)
            
            logger.info("üìã Analisando patch notes...")
            await asyncio.sleep(0.2)
            
            # Simula resultado da an√°lise
            simulated_prediction = {
                "recommendation": "Team Liquid vence",
                "confidence": 72.5,
                "expected_value": 8.2,
                "method": "hybrid",
                "reasoning": "An√°lise h√≠brida indica vantagem em composi√ß√£o e form recente"
            }
            
            logger.info("üéØ RESULTADO DA SIMULA√á√ÉO:")
            logger.info(f"   ‚Ä¢ Predi√ß√£o: {simulated_prediction['recommendation']}")
            logger.info(f"   ‚Ä¢ Confian√ßa: {simulated_prediction['confidence']:.1f}%")
            logger.info(f"   ‚Ä¢ Expected Value: +{simulated_prediction['expected_value']:.1f}%")
            logger.info(f"   ‚Ä¢ M√©todo: {simulated_prediction['method']}")
            
            # Verifica se passa nos crit√©rios
            passes_criteria = (
                simulated_prediction['confidence'] >= 65.0 and
                simulated_prediction['expected_value'] >= 5.0
            )
            
            if passes_criteria:
                logger.info("‚úÖ TIP SERIA ENVIADA - Passou em todos os crit√©rios!")
                self.components_status['tips_generation'] = True
            else:
                logger.warning("‚ö†Ô∏è TIP N√ÉO SERIA ENVIADA - N√£o passou nos crit√©rios")
                self.components_status['tips_generation'] = False
                
        except Exception as e:
            logger.error(f"‚ùå Erro na simula√ß√£o: {e}")
            self.components_status['tips_generation'] = False

    def _generate_final_report(self):
        """Gera relat√≥rio final da verifica√ß√£o"""
        try:
            logger.info("\n" + "=" * 60)
            logger.info("üìã RELAT√ìRIO FINAL - SISTEMA DE TIPS AUTOM√ÅTICO")
            logger.info("=" * 60)
            
            # Contadores
            total_components = len(self.components_status)
            working_components = sum(1 for status in self.components_status.values() if status)
            
            logger.info(f"üìä STATUS GERAL: {working_components}/{total_components} componentes funcionais")
            
            # Detalhes por componente
            logger.info("\nüîß DETALHES DOS COMPONENTES:")
            for component, status in self.components_status.items():
                icon = "‚úÖ" if status else "‚ùå"
                logger.info(f"   {icon} {component.replace('_', ' ').title()}")
            
            # An√°lise de prontid√£o
            critical_components = [
                'professional_tips', 'dynamic_prediction', 'schedule_manager',
                'tips_initialization', 'tips_generation'
            ]
            
            critical_working = sum(1 for comp in critical_components 
                                 if self.components_status.get(comp, False))
            
            logger.info(f"\nüéØ COMPONENTES CR√çTICOS: {critical_working}/{len(critical_components)}")
            
            # Veredicto final
            if critical_working == len(critical_components):
                logger.info("\nüéâ VEREDICTO: ‚úÖ SISTEMA PRONTO PARA GERAR TIPS AUTOMATICAMENTE!")
                logger.info("üöÄ O bot est√° configurado e pode come√ßar a gerar tips profissionais")
            elif critical_working >= len(critical_components) * 0.8:
                logger.info("\n‚ö†Ô∏è VEREDICTO: üü° SISTEMA QUASE PRONTO - Pequenos ajustes necess√°rios")
                logger.info("üîß Corrija os componentes com falha e execute novamente")
            else:
                logger.info("\n‚ùå VEREDICTO: üî¥ SISTEMA N√ÉO EST√Å PRONTO")
                logger.info("üõ†Ô∏è Verifique e corrija os componentes cr√≠ticos listados acima")
            
            # Pr√≥ximos passos
            logger.info("\nüìã PR√ìXIMOS PASSOS:")
            logger.info("   1. Configure as vari√°veis de ambiente (TELEGRAM_BOT_TOKEN)")
            logger.info("   2. Execute: python deploy_production_lite.py")
            logger.info("   3. Inicie o bot: python main.py")
            logger.info("   4. Use /admin_force_scan para testar tips")
            logger.info("   5. Monitore via dashboard: http://localhost:8080/dashboard")
            
            logger.info("=" * 60)
            
        except Exception as e:
            logger.error(f"‚ùå Erro no relat√≥rio final: {e}")


async def main():
    """Fun√ß√£o principal"""
    verification = TipsSystemVerification()
    success = await verification.verify_complete_system()
    
    return success


if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        if result:
            print("\n‚úÖ Verifica√ß√£o conclu√≠da com sucesso!")
        else:
            print("\n‚ùå Verifica√ß√£o encontrou problemas")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë Verifica√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro fatal na verifica√ß√£o: {e}")
        sys.exit(1) 