#!/usr/bin/env python3
"""
Debug do token - rastreia exatamente onde o token est√° sendo usado
"""
import os
import sys

# For√ßa o token correto NO IN√çCIO
os.environ["TELEGRAM_BOT_TOKEN"] = "7584060058:AAHiZkgr-TFlbt8Ym1GNFMdvjfVa6oED9l8"
os.environ["TELEGRAM_ADMIN_USER_IDS"] = "8012415611"

print("=" * 60)
print("üîç DEBUG DO TOKEN - RASTREAMENTO COMPLETO")
print("=" * 60)

# 1. Verifica vari√°vel de ambiente
print(f"1Ô∏è‚É£ ENVIRONMENT: {os.getenv('TELEGRAM_BOT_TOKEN', 'N√ÉO DEFINIDO')[:20]}...")

# 2. Verifica constants.py
try:
    from bot.utils.constants import TELEGRAM_CONFIG
    print(f"2Ô∏è‚É£ CONSTANTS.PY: {TELEGRAM_CONFIG['bot_token'][:20]}...")
except Exception as e:
    print(f"2Ô∏è‚É£ CONSTANTS.PY: ERRO - {e}")

# 3. Simula o main.py
print(f"3Ô∏è‚É£ MAIN.PY SIMULATION:")
bot_token = os.getenv("TELEGRAM_BOT_TOKEN", TELEGRAM_CONFIG["bot_token"])
print(f"   Token escolhido: {bot_token[:20]}...")

# 4. Testa cria√ß√£o da aplica√ß√£o diretamente
try:
    print(f"4Ô∏è‚É£ TESTE APLICA√á√ÉO TELEGRAM:")
    from telegram.ext import Application
    
    app = Application.builder().token(bot_token).build()
    print(f"   ‚úÖ Aplica√ß√£o criada com token: {bot_token[:20]}...")
    
    # 5. Testa conex√£o real
    import asyncio
    import aiohttp
    
    async def test_token():
        try:
            url = f"https://api.telegram.org/bot{bot_token}/getMe"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    data = await response.json()
                    
                    if data.get('ok'):
                        bot_info = data['result']
                        print(f"   ‚úÖ TOKEN V√ÅLIDO! Bot: @{bot_info.get('username')}")
                        print(f"   üìù Nome: {bot_info.get('first_name')}")
                        return True
                    else:
                        print(f"   ‚ùå TOKEN INV√ÅLIDO: {data}")
                        return False
        except Exception as e:
            print(f"   ‚ùå ERRO NO TESTE: {e}")
            return False
    
    result = asyncio.run(test_token())
    
    if result:
        print("\nüéâ TOKEN CORRETO CONFIRMADO!")
    else:
        print("\n‚ùå PROBLEMA COM O TOKEN!")

except Exception as e:
    print(f"4Ô∏è‚É£ ERRO NA APLICA√á√ÉO: {e}")

print("=" * 60)
print("üîß PR√ìXIMO PASSO: Iniciar sistema com este token")
print("=" * 60) 