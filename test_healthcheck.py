#!/usr/bin/env python3
"""
Teste do sistema de healthcheck do Bot LoL V3
"""

import requests
import time
import sys
import os

def test_healthcheck():
    """Testa o endpoint de healthcheck"""
    url = "http://localhost:5000/health"
    
    print("üîç Testando healthcheck do Bot LoL V3...")
    print(f"URL: {url}")
    
    try:
        response = requests.get(url, timeout=10)
        
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.json()}")
        
        if response.status_code == 200:
            print("‚úÖ Healthcheck PASSOU - Bot est√° saud√°vel!")
            return True
        elif response.status_code == 503:
            print("‚ö†Ô∏è Healthcheck FALHOU - Bot n√£o est√° saud√°vel")
            return False
        else:
            print(f"‚ùå Status inesperado: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå N√£o foi poss√≠vel conectar ao healthcheck endpoint")
        print("   Verifique se o bot est√° rodando na porta 5000")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def test_status_endpoint():
    """Testa o endpoint de status detalhado"""
    url = "http://localhost:5000/status"
    
    print("\nüîç Testando status endpoint...")
    
    try:
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Status endpoint funcionando!")
            print(f"   Bot: {data.get('bot_name', 'Unknown')}")
            print(f"   Vers√£o: {data.get('version', 'Unknown')}")
            print(f"   Saud√°vel: {data.get('healthy', False)}")
            print(f"   Uptime: {data.get('uptime', 0):.2f} segundos")
            return True
        else:
            print(f"‚ùå Status endpoint falhou: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no status endpoint: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ TESTE DE HEALTHCHECK - Bot LoL V3 Ultra Avan√ßado")
    print("=" * 60)
    
    # Verificar se Flask est√° dispon√≠vel
    try:
        import flask
        print("‚úÖ Flask dispon√≠vel")
    except ImportError:
        print("‚ùå Flask n√£o encontrado - instale com: pip install flask")
        return False
    
    # Teste 1: Healthcheck
    health_ok = test_healthcheck()
    
    # Teste 2: Status endpoint
    status_ok = test_status_endpoint()
    
    print("\n" + "=" * 60)
    print("üìä RESULTADO DOS TESTES:")
    print(f"Healthcheck: {'‚úÖ PASSOU' if health_ok else '‚ùå FALHOU'}")
    print(f"Status:      {'‚úÖ PASSOU' if status_ok else '‚ùå FALHOU'}")
    
    if health_ok and status_ok:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("   O bot est√° pronto para container com healthcheck")
        return True
    else:
        print("\n‚ö†Ô∏è ALGUNS TESTES FALHARAM")
        print("   Verifique se o bot est√° rodando corretamente")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 