#!/usr/bin/env python3
"""
Corretor completo para arquivo .env
Remove caracteres nulos, problemas de encoding e outros issues
"""
import os
import sys

def clean_env_file():
    """Limpa completamente o arquivo .env"""
    print("üßπ Limpeza completa do arquivo .env...")
    
    env_file = ".env"
    
    if os.path.exists(env_file):
        print(f"üìÑ Removendo arquivo .env existente...")
        os.remove(env_file)
    
    # Cria arquivo .env completamente limpo
    print("‚ú® Criando arquivo .env limpo...")
    
    clean_content = """# Arquivo .env - Sistema LoL V3 Ultra Avan√ßado
# Configure suas vari√°veis de ambiente aqui

# ===========================================
# CONFIGURA√á√ïES PARA RAILWAY DEPLOY
# ===========================================

# Bot Telegram (Configure no Railway Dashboard)
# TELEGRAM_BOT_TOKEN=seu_token_aqui
# TELEGRAM_ADMIN_USER_IDS=seu_id_aqui

# Configura√ß√µes de Ambiente
ENVIRONMENT=development
LOG_LEVEL=INFO
PYTHONUNBUFFERED=1

# ===========================================
# INSTRU√á√ïES PARA RAILWAY
# ===========================================
# 1. N√£o √© necess√°rio usar este arquivo .env no Railway
# 2. Configure as vari√°veis diretamente no Railway Dashboard
# 3. Vari√°veis obrigat√≥rias:
#    - TELEGRAM_BOT_TOKEN
#    - TELEGRAM_ADMIN_USER_IDS
"""
    
    with open(env_file, 'w', encoding='utf-8', newline='\n') as f:
        f.write(clean_content)
    
    print("‚úÖ Arquivo .env criado com sucesso!")
    
    # Verifica se arquivo est√° OK
    try:
        with open(env_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verifica caracteres problem√°ticos
        if '\x00' in content:
            print("‚ùå Ainda h√° caracteres nulos!")
            return False
        
        print(f"‚úÖ Arquivo verificado: {len(content.splitlines())} linhas")
        print(f"‚úÖ Tamanho: {len(content)} caracteres")
        print("‚úÖ Sem caracteres problem√°ticos")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar arquivo: {e}")
        return False

def test_dotenv_loading():
    """Testa se o arquivo .env pode ser carregado"""
    print("\nüß™ Testando carregamento do .env...")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("‚úÖ Arquivo .env carregado com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar .env: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîß CORRETOR COMPLETO - Arquivo .env")
    print("=" * 50)
    
    try:
        # Etapa 1: Limpar arquivo
        if not clean_env_file():
            print("‚ùå Falha na limpeza do arquivo")
            return 1
        
        # Etapa 2: Testar carregamento
        if not test_dotenv_loading():
            print("‚ùå Falha no teste de carregamento")
            return 1
        
        print("\nüéâ RESULTADO FINAL:")
        print("‚úÖ Arquivo .env completamente corrigido!")
        print("‚úÖ Problema de encoding resolvido!")
        print("‚úÖ Caracteres nulos removidos!")
        print("‚úÖ Pronto para uso e deploy Railway!")
        
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("1. Para desenvolvimento local: configure vari√°veis no .env")
        print("2. Para Railway: configure no Dashboard (recomendado)")
        print("3. Execute: python main.py")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 