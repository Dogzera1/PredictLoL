#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BOT LOL V3 ULTRA AVAN√áADO - Vers√£o Railway Compat√≠vel
Sistema completo com valor betting, portfolio e an√°lise avan√ßada
"""

import os
import sys
import time
import random
import asyncio
import logging
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
import json

# Sistema de health check
from flask import Flask, jsonify
import requests

# Telegram Bot - Compatibilidade autom√°tica
try:
    # Tentar vers√£o nova (v20+)
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
    from telegram.constants import ParseMode
    from telegram.error import TelegramError
    NEW_VERSION = True
    print("‚úÖ Usando python-telegram-bot v20+")
except ImportError:
    try:
        # Tentar vers√£o intermedi√°ria (v13-19)
        from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
        from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
        from telegram.error import TelegramError
        NEW_VERSION = False
        print("‚úÖ Usando python-telegram-bot v13-19")
    except ImportError:
        print("‚ùå Erro: Vers√£o do python-telegram-bot n√£o suportada")
        sys.exit(1)

# Scientific computing
import numpy as np

# Configura√ß√µes
TOKEN = os.getenv('TELEGRAM_TOKEN', '7584060058:AAFTZcmirun47zLiCCm48Trre6c3oXnM-Cg')
OWNER_ID = int(os.getenv('OWNER_ID', '6404423764'))

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class HealthCheckManager:
    """Gerenciador de healthcheck para Railway"""
    
    def __init__(self):
        self.flask_app = Flask(__name__)
        self.bot_healthy = False
        self.last_activity = datetime.now()
        self.startup_time = datetime.now()
        
        @self.flask_app.route('/health')
        def health_check():
            if self.bot_healthy and (datetime.now() - self.last_activity).seconds < 300:
                return 'OK', 200
            return 'Bot unhealthy', 503
            
        @self.flask_app.route('/status')
        def status_check():
            return jsonify({
                'status': 'healthy' if self.bot_healthy else 'unhealthy',
                'last_activity': self.last_activity.isoformat(),
                'uptime_seconds': (datetime.now() - self.startup_time).total_seconds(),
                'timestamp': datetime.now().isoformat()
            })
    
    def start_flask_server(self):
        """Inicia servidor Flask em thread separada"""
        def run_flask():
            self.flask_app.run(host='0.0.0.0', port=5000, debug=False)
        
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        logger.info("‚úÖ Flask healthcheck server iniciado na porta 5000")
    
    def mark_healthy(self):
        self.bot_healthy = True
        self.last_activity = datetime.now()
    
    def update_activity(self):
        self.last_activity = datetime.now()

class ValueBettingSystem:
    """Sistema de Value Betting com unidades b√°sicas"""
    
    def __init__(self):
        self.base_unit = 100  # R$ 100 por unidade
        self.bankroll = 10000  # R$ 10.000
        self.max_units_per_bet = 3  # M√°ximo 3 unidades por aposta
        self.confidence_threshold = 0.65  # 65% confian√ßa m√≠nima
        self.ev_threshold = 0.03  # 3% EV m√≠nimo
        logger.info("üí∞ Sistema de Value Betting com unidades inicializado")
    
    def calculate_bet_units(self, ev_percentage, confidence, probability_diff):
        """Calcula unidades baseado em EV e confian√ßa"""
        
        # An√°lise de EV
        if ev_percentage >= 0.08:  # 8%+ EV
            ev_units = 2
            ev_level = "MUITO ALTO"
        elif ev_percentage >= 0.05:  # 5-8% EV
            ev_units = 1.5
            ev_level = "ALTO"
        elif ev_percentage >= 0.03:  # 3-5% EV
            ev_units = 1
            ev_level = "M√âDIO"
        else:
            ev_units = 0.5
            ev_level = "BAIXO"
        
        # An√°lise de Confian√ßa
        if confidence >= 0.85:  # 85%+ confian√ßa
            conf_units = 2
            conf_level = "MUITO ALTA"
        elif confidence >= 0.75:  # 75-85% confian√ßa
            conf_units = 1.5
            conf_level = "ALTA"
        elif confidence >= 0.65:  # 65-75% confian√ßa
            conf_units = 1
            conf_level = "M√âDIA"
        else:
            conf_units = 0.5
            conf_level = "BAIXA"
        
        # C√°lculo final (m√©dia ponderada)
        final_units = min(self.max_units_per_bet, (ev_units + conf_units) / 2)
        final_units = round(final_units * 2) / 2  # Arredondar para 0.5
        
        return {
            'units': final_units,
            'stake': final_units * self.base_unit,
            'ev_level': ev_level,
            'conf_level': conf_level,
            'ev_percentage': ev_percentage * 100,
            'confidence': confidence * 100,
            'recommendation': self._get_recommendation(final_units, ev_percentage, confidence)
        }
    
    def _get_recommendation(self, units, ev, confidence):
        """Gera recomenda√ß√£o baseada na an√°lise"""
        if units >= 2.5:
            return "üî• APOSTA PREMIUM - M√°xima prioridade"
        elif units >= 2.0:
            return "‚≠ê APOSTA FORTE - Alta recomenda√ß√£o"
        elif units >= 1.5:
            return "‚úÖ APOSTA BOA - Recomendada"
        elif units >= 1.0:
            return "‚ö†Ô∏è APOSTA CAUTELOSA - Considerar"
        else:
            return "‚ùå APOSTA FRACA - Evitar"
    
    def analyze_value_opportunity(self, our_prob, bookmaker_odds):
        """Analisa oportunidade de value betting"""
        implied_prob = 1 / bookmaker_odds
        probability_diff = our_prob - implied_prob
        ev = (our_prob * (bookmaker_odds - 1)) - (1 - our_prob)
        
        # Calcular confian√ßa baseada em m√∫ltiplos fatores
        confidence = self._calculate_confidence(our_prob, implied_prob, probability_diff)
        
        if ev > self.ev_threshold and confidence > self.confidence_threshold:
            bet_analysis = self.calculate_bet_units(ev, confidence, probability_diff)
            return {
                'has_value': True,
                'ev': ev,
                'probability_diff': probability_diff,
                'confidence': confidence,
                'bet_analysis': bet_analysis,
                'risk_level': self._assess_risk_level(ev, confidence)
            }
        
        return {'has_value': False, 'reason': 'EV ou confian√ßa insuficiente'}
    
    def _calculate_confidence(self, our_prob, implied_prob, prob_diff):
        """Calcula confian√ßa da aposta baseada em m√∫ltiplos fatores"""
        # Fator 1: Diferen√ßa de probabilidade
        diff_factor = min(1.0, prob_diff * 10)  # Normalizar
        
        # Fator 2: Dist√¢ncia da probabilidade 50/50
        certainty_factor = abs(our_prob - 0.5) * 2
        
        # Fator 3: Margem de seguran√ßa
        safety_factor = min(1.0, prob_diff * 5) if prob_diff > 0 else 0
        
        # Combina√ß√£o ponderada
        confidence = (diff_factor * 0.4 + certainty_factor * 0.3 + safety_factor * 0.3)
        return min(1.0, confidence)
    
    def _assess_risk_level(self, ev, confidence):
        """Avalia n√≠vel de risco da aposta"""
        if ev >= 0.08 and confidence >= 0.85:
            return "BAIXO"
        elif ev >= 0.05 and confidence >= 0.75:
            return "M√âDIO"
        elif ev >= 0.03 and confidence >= 0.65:
            return "ALTO"
        else:
            return "MUITO ALTO"
    
    def get_portfolio_suggestions(self):
        """Sugest√µes para melhorar o sistema"""
        return {
            'bankroll_management': [
                "üí∞ Nunca aposte mais de 5% da banca total por dia",
                "üìä Mantenha registro detalhado de todas as apostas",
                "üîÑ Reavalie unidades a cada 100 apostas",
                "üìà Aumente unidades apenas com ROI consistente >10%"
            ],
            'value_hunting': [
                "üéØ Foque em partidas com EV >5% para maximizar lucros",
                "‚è∞ Aposte pr√≥ximo ao in√≠cio para odds mais precisas",
                "üîç Compare m√∫ltiplas casas para encontrar melhores odds",
                "üì± Use alertas autom√°ticos para oportunidades premium"
            ],
            'risk_management': [
                "üõ°Ô∏è Diversifique entre diferentes ligas e regi√µes",
                "‚ö†Ô∏è Evite apostas consecutivas no mesmo time",
                "üìâ Reduza unidades ap√≥s sequ√™ncia de 3+ perdas",
                "üé≤ Nunca persiga perdas aumentando stakes"
            ],
            'advanced_tips': [
                "üß† Analise meta do jogo e patches recentes",
                "üë• Considere mudan√ßas de roster e forma recente",
                "üèÜ Peso maior para playoffs e finais",
                "üìä Use estat√≠sticas de head-to-head hist√≥rico"
            ]
        }

class LiveStatsSystem:
    """Sistema de estat√≠sticas em tempo real"""
    
    def __init__(self):
        self.cache = {}
        self.value_system = ValueBettingSystem()
        logger.info("üéÆ Sistema de estat√≠sticas ao vivo inicializado")
    
    def get_live_stats(self, match_id="demo_match"):
        """Gera estat√≠sticas din√¢micas em tempo real"""
        current_time = datetime.now()
        
        # Simular tempo de jogo (15-45 minutos)
        game_time = random.randint(15, 45)
        
        # Estat√≠sticas baseadas no tempo de jogo
        if game_time < 20:  # Early game
            kills_range = (3, 8)
            gold_range = (25000, 35000)
            dragons_max = 1
            barons_max = 0
        elif game_time < 30:  # Mid game
            kills_range = (8, 15)
            gold_range = (35000, 50000)
            dragons_max = 2
            barons_max = 1
        else:  # Late game
            kills_range = (15, 25)
            gold_range = (50000, 70000)
            dragons_max = 4
            barons_max = 2
        
        # Gerar stats dos times
        team1_kills = random.randint(*kills_range)
        team2_kills = random.randint(*kills_range)
        team1_deaths = random.randint(max(1, team2_kills - 3), team2_kills + 3)
        team2_deaths = random.randint(max(1, team1_kills - 3), team1_kills + 3)
        
        team1_gold = random.randint(*gold_range)
        team2_gold = random.randint(*gold_range)
        
        team1_cs = random.randint(150, 300)
        team2_cs = random.randint(150, 300)
        
        # Objetivos
        dragons_t1 = random.randint(0, dragons_max)
        dragons_t2 = random.randint(0, dragons_max - dragons_t1)
        
        barons_t1 = random.randint(0, barons_max)
        barons_t2 = random.randint(0, barons_max - barons_t1)
        
        towers_t1 = random.randint(0, 6)
        towers_t2 = random.randint(0, 6)
        
        # Calcular probabilidades din√¢micas
        gold_advantage = team1_gold - team2_gold
        kill_advantage = team1_kills - team2_kills
        obj_advantage = (dragons_t1 + barons_t1 + towers_t1) - (dragons_t2 + barons_t2 + towers_t2)
        
        # F√≥rmula de probabilidade
        base_prob = 0.5
        gold_factor = gold_advantage * 0.000012  # 1.2% por 1000 gold
        kill_factor = kill_advantage * 0.025     # 2.5% por kill
        obj_factor = obj_advantage * 0.04        # 4% por objetivo
        
        team1_prob = max(0.10, min(0.90, base_prob + gold_factor + kill_factor + obj_factor))
        team2_prob = 1 - team1_prob
        
        # Determinar fase da partida
        if game_time < 20:
            phase = "Early Game"
            phase_emoji = "üåÖ"
        elif game_time < 30:
            phase = "Mid Game"
            phase_emoji = "‚ö°"
        else:
            phase = "Late Game"
            phase_emoji = "üî•"
        
        return {
            'game_time': game_time,
            'phase': phase,
            'phase_emoji': phase_emoji,
            'team1': {
                'name': 'T1',
                'kills': team1_kills,
                'deaths': team1_deaths,
                'assists': team1_kills + random.randint(5, 15),
                'gold': team1_gold,
                'cs': team1_cs,
                'dragons': dragons_t1,
                'barons': barons_t1,
                'towers': towers_t1
            },
            'team2': {
                'name': 'Gen.G',
                'kills': team2_kills,
                'deaths': team2_deaths,
                'assists': team2_kills + random.randint(5, 15),
                'gold': team2_gold,
                'cs': team2_cs,
                'dragons': dragons_t2,
                'barons': barons_t2,
                'towers': towers_t2
            },
            'probabilities': {
                'team1': team1_prob,
                'team2': team2_prob
            },
            'advantages': {
                'gold': gold_advantage,
                'kills': kill_advantage,
                'objectives': obj_advantage
            },
            'timestamp': current_time.strftime('%H:%M:%S')
        }

class AdvancedMatchAnalyzer:
    """Sistema avan√ßado de an√°lise de partidas com m√∫ltiplos fatores"""
    
    def __init__(self):
        self.patch_version = "14.23"  # Patch atual
        self.meta_champions = self._load_meta_data()
        self.team_database = self._load_team_database()
        self.player_database = self._load_player_database()
        self.champion_synergies = self._load_champion_synergies()
        self.tournament_context = self._load_tournament_context()
        logger.info("üß† Sistema Avan√ßado de An√°lise inicializado")
    
    def _load_meta_data(self):
        """Carrega dados da meta atual baseado no patch"""
        return {
            'patch_14_23': {
                'op_champions': {
                    'top': ['Aatrox', 'Jax', 'Fiora', 'Camille', 'Gnar'],
                    'jungle': ['Graves', 'Nidalee', 'Elise', 'Kindred', 'Viego'],
                    'mid': ['Azir', 'Orianna', 'Syndra', 'Corki', 'Viktor'],
                    'adc': ['Jinx', 'Aphelios', 'Kai\'Sa', 'Xayah', 'Varus'],
                    'support': ['Thresh', 'Nautilus', 'Leona', 'Alistar', 'Rakan']
                },
                'banned_champions': ['Kalista', 'Azir', 'Ryze', 'Akali'],
                'power_spikes': {
                    'early': ['Draven', 'Renekton', 'Elise', 'Pantheon'],
                    'mid': ['Orianna', 'Graves', 'Syndra', 'Jinx'],
                    'late': ['Kassadin', 'Kayle', 'Vayne', 'Azir']
                },
                'meta_shifts': {
                    'tank_meta': 0.3,
                    'assassin_meta': 0.4,
                    'scaling_meta': 0.6,
                    'early_game_meta': 0.4
                }
            }
        }
    
    def _load_team_database(self):
        """Base de dados completa dos times com m√∫ltiplas m√©tricas"""
        return {
            # LCK
            'T1': {
                'rating': 95, 'region': 'LCK',
                'recent_form': 0.88, 'consistency': 0.90,
                'early_game': 0.85, 'mid_game': 0.92, 'late_game': 0.88,
                'draft_flexibility': 0.90, 'clutch_factor': 0.95,
                'international_exp': 0.95, 'roster_stability': 0.85,
                'coaching_quality': 0.90, 'meta_adaptation': 0.88,
                'recent_matches': [1, 1, 1, 0, 1],  # W/L √∫ltimas 5
                'avg_game_time': 32.5, 'first_blood_rate': 0.65,
                'baron_control': 0.78, 'dragon_control': 0.82
            },
            'Gen.G': {
                'rating': 92, 'region': 'LCK',
                'recent_form': 0.82, 'consistency': 0.88,
                'early_game': 0.80, 'mid_game': 0.85, 'late_game': 0.90,
                'draft_flexibility': 0.85, 'clutch_factor': 0.82,
                'international_exp': 0.85, 'roster_stability': 0.90,
                'coaching_quality': 0.88, 'meta_adaptation': 0.85,
                'recent_matches': [1, 0, 1, 1, 1],
                'avg_game_time': 35.2, 'first_blood_rate': 0.58,
                'baron_control': 0.75, 'dragon_control': 0.80
            },
            # LPL
            'JDG': {
                'rating': 94, 'region': 'LPL',
                'recent_form': 0.90, 'consistency': 0.85,
                'early_game': 0.92, 'mid_game': 0.88, 'late_game': 0.82,
                'draft_flexibility': 0.88, 'clutch_factor': 0.85,
                'international_exp': 0.90, 'roster_stability': 0.80,
                'coaching_quality': 0.85, 'meta_adaptation': 0.90,
                'recent_matches': [1, 1, 0, 1, 1],
                'avg_game_time': 30.8, 'first_blood_rate': 0.72,
                'baron_control': 0.80, 'dragon_control': 0.85
            },
            'BLG': {
                'rating': 90, 'region': 'LPL',
                'recent_form': 0.85, 'consistency': 0.82,
                'early_game': 0.88, 'mid_game': 0.85, 'late_game': 0.80,
                'draft_flexibility': 0.82, 'clutch_factor': 0.80,
                'international_exp': 0.75, 'roster_stability': 0.85,
                'coaching_quality': 0.82, 'meta_adaptation': 0.85,
                'recent_matches': [1, 1, 1, 0, 0],
                'avg_game_time': 31.5, 'first_blood_rate': 0.68,
                'baron_control': 0.76, 'dragon_control': 0.78
            },
            # LEC
            'G2': {
                'rating': 88, 'region': 'LEC',
                'recent_form': 0.85, 'consistency': 0.80,
                'early_game': 0.82, 'mid_game': 0.88, 'late_game': 0.85,
                'draft_flexibility': 0.92, 'clutch_factor': 0.88,
                'international_exp': 0.90, 'roster_stability': 0.75,
                'coaching_quality': 0.85, 'meta_adaptation': 0.88,
                'recent_matches': [1, 0, 1, 1, 1],
                'avg_game_time': 33.2, 'first_blood_rate': 0.62,
                'baron_control': 0.72, 'dragon_control': 0.75
            },
            'Fnatic': {
                'rating': 85, 'region': 'LEC',
                'recent_form': 0.78, 'consistency': 0.82,
                'early_game': 0.75, 'mid_game': 0.82, 'late_game': 0.88,
                'draft_flexibility': 0.80, 'clutch_factor': 0.75,
                'international_exp': 0.85, 'roster_stability': 0.70,
                'coaching_quality': 0.80, 'meta_adaptation': 0.78,
                'recent_matches': [0, 1, 1, 0, 1],
                'avg_game_time': 34.8, 'first_blood_rate': 0.55,
                'baron_control': 0.70, 'dragon_control': 0.72
            },
            # LCS
            'C9': {
                'rating': 82, 'region': 'LCS',
                'recent_form': 0.80, 'consistency': 0.75,
                'early_game': 0.78, 'mid_game': 0.80, 'late_game': 0.82,
                'draft_flexibility': 0.85, 'clutch_factor': 0.78,
                'international_exp': 0.70, 'roster_stability': 0.80,
                'coaching_quality': 0.78, 'meta_adaptation': 0.80,
                'recent_matches': [1, 1, 0, 1, 0],
                'avg_game_time': 32.8, 'first_blood_rate': 0.60,
                'baron_control': 0.68, 'dragon_control': 0.70
            },
            # CBLOL
            'LOUD': {
                'rating': 85, 'region': 'CBLOL',
                'recent_form': 0.88, 'consistency': 0.85,
                'early_game': 0.85, 'mid_game': 0.82, 'late_game': 0.78,
                'draft_flexibility': 0.80, 'clutch_factor': 0.85,
                'international_exp': 0.60, 'roster_stability': 0.90,
                'coaching_quality': 0.82, 'meta_adaptation': 0.85,
                'recent_matches': [1, 1, 1, 1, 0],
                'avg_game_time': 31.2, 'first_blood_rate': 0.70,
                'baron_control': 0.75, 'dragon_control': 0.78
            }
        }
    
    def _load_player_database(self):
        """Base de dados de jogadores individuais"""
        return {
            # T1
            'Zeus': {'role': 'top', 'team': 'T1', 'skill': 95, 'consistency': 90, 'clutch': 92},
            'Oner': {'role': 'jungle', 'team': 'T1', 'skill': 92, 'consistency': 88, 'clutch': 90},
            'Faker': {'role': 'mid', 'team': 'T1', 'skill': 98, 'consistency': 95, 'clutch': 98},
            'Gumayusi': {'role': 'adc', 'team': 'T1', 'skill': 94, 'consistency': 90, 'clutch': 88},
            'Keria': {'role': 'support', 'team': 'T1', 'skill': 96, 'consistency': 92, 'clutch': 94},
            
            # Gen.G
            'Kiin': {'role': 'top', 'team': 'Gen.G', 'skill': 90, 'consistency': 92, 'clutch': 85},
            'Canyon': {'role': 'jungle', 'team': 'Gen.G', 'skill': 96, 'consistency': 90, 'clutch': 92},
            'Chovy': {'role': 'mid', 'team': 'Gen.G', 'skill': 96, 'consistency': 94, 'clutch': 88},
            'Peyz': {'role': 'adc', 'team': 'Gen.G', 'skill': 88, 'consistency': 85, 'clutch': 82},
            'Lehends': {'role': 'support', 'team': 'Gen.G', 'skill': 90, 'consistency': 88, 'clutch': 85},
            
            # Adicionar mais jogadores conforme necess√°rio...
        }
    
    def _load_champion_synergies(self):
        """Sinergias e anti-sinergias entre champions"""
        return {
            'strong_synergies': {
                ('Yasuo', 'Malphite'): 0.85,
                ('Orianna', 'Malphite'): 0.80,
                ('Jinx', 'Thresh'): 0.75,
                ('Azir', 'Sejuani'): 0.80,
                ('Kai\'Sa', 'Nautilus'): 0.78,
                ('Graves', 'Orianna'): 0.82,
                ('Aphelios', 'Thresh'): 0.80
            },
            'counters': {
                'Yasuo': ['Malzahar', 'Annie', 'Pantheon'],
                'Azir': ['Zed', 'Fizz', 'Kassadin'],
                'Jinx': ['Zed', 'Rengar', 'Kha\'Zix'],
                'Graves': ['Rammus', 'Malphite', 'Sejuani']
            },
            'meta_priority': {
                'S_tier': ['Azir', 'Graves', 'Thresh', 'Jinx', 'Aatrox'],
                'A_tier': ['Orianna', 'Nidalee', 'Nautilus', 'Kai\'Sa', 'Jax'],
                'B_tier': ['Syndra', 'Elise', 'Leona', 'Aphelios', 'Fiora']
            }
        }
    
    def _load_tournament_context(self):
        """Contexto do torneio e import√¢ncia das partidas"""
        return {
            'worlds_2024': {
                'importance_multiplier': 1.5,
                'pressure_factor': 1.3,
                'international_bonus': 0.1
            },
            'lck_spring': {
                'importance_multiplier': 1.2,
                'pressure_factor': 1.1,
                'regional_bonus': 0.05
            },
            'regular_season': {
                'importance_multiplier': 1.0,
                'pressure_factor': 1.0,
                'bonus': 0.0
            }
        }
    
    def analyze_comprehensive_match(self, team1: str, team2: str, 
                                  team1_comp: List[str] = None, 
                                  team2_comp: List[str] = None,
                                  tournament_type: str = "regular_season") -> Dict:
        """An√°lise completa da partida considerando todos os fatores"""
        
        # 1. Dados b√°sicos dos times
        team1_data = self.team_database.get(team1, self._get_default_team_data())
        team2_data = self.team_database.get(team2, self._get_default_team_data())
        
        # 2. An√°lise de composi√ß√£o (se dispon√≠vel)
        draft_analysis = self._analyze_draft(team1_comp, team2_comp) if team1_comp and team2_comp else None
        
        # 3. An√°lise de performance individual
        player_analysis = self._analyze_players(team1, team2)
        
        # 4. Contexto do torneio
        tournament_context = self.tournament_context.get(tournament_type, self.tournament_context['regular_season'])
        
        # 5. An√°lise da meta atual
        meta_analysis = self._analyze_meta_fit(team1_data, team2_data, team1_comp, team2_comp)
        
        # 6. Head-to-head hist√≥rico
        h2h_analysis = self._analyze_head_to_head(team1, team2)
        
        # 7. C√°lculo de probabilidade final
        final_probability = self._calculate_comprehensive_probability(
            team1_data, team2_data, draft_analysis, player_analysis,
            meta_analysis, h2h_analysis, tournament_context
        )
        
        # 8. Gerar an√°lise textual
        analysis_text = self._generate_comprehensive_analysis(
            team1, team2, team1_data, team2_data, draft_analysis,
            player_analysis, meta_analysis, final_probability
        )
        
        return {
            'teams': {'team1': team1, 'team2': team2},
            'probability': final_probability,
            'team_analysis': {'team1': team1_data, 'team2': team2_data},
            'draft_analysis': draft_analysis,
            'player_analysis': player_analysis,
            'meta_analysis': meta_analysis,
            'h2h_analysis': h2h_analysis,
            'tournament_context': tournament_context,
            'detailed_analysis': analysis_text,
            'confidence_level': self._calculate_confidence(final_probability, team1_data, team2_data),
            'key_factors': self._identify_key_factors(team1_data, team2_data, draft_analysis),
            'patch_version': self.patch_version
        }
    
    def _analyze_draft(self, team1_comp: List[str], team2_comp: List[str]) -> Dict:
        """An√°lise detalhada do draft"""
        if not team1_comp or not team2_comp:
            return None
        
        # An√°lise de tier dos champions
        team1_tiers = self._get_champion_tiers(team1_comp)
        team2_tiers = self._get_champion_tiers(team2_comp)
        
        # An√°lise de sinergias
        team1_synergy = self._calculate_team_synergy(team1_comp)
        team2_synergy = self._calculate_team_synergy(team2_comp)
        
        # An√°lise de power spikes
        team1_spikes = self._analyze_power_spikes(team1_comp)
        team2_spikes = self._analyze_power_spikes(team2_comp)
        
        # An√°lise de counters
        team1_counters = self._analyze_counters(team1_comp, team2_comp)
        team2_counters = self._analyze_counters(team2_comp, team1_comp)
        
        draft_advantage = (team1_tiers + team1_synergy - team2_counters) - (team2_tiers + team2_synergy - team1_counters)
        
        return {
            'team1_composition': team1_comp,
            'team2_composition': team2_comp,
            'team1_tier_score': team1_tiers,
            'team2_tier_score': team2_tiers,
            'team1_synergy': team1_synergy,
            'team2_synergy': team2_synergy,
            'team1_power_spikes': team1_spikes,
            'team2_power_spikes': team2_spikes,
            'draft_advantage': draft_advantage,
            'draft_winner': 'team1' if draft_advantage > 0 else 'team2',
            'advantage_magnitude': abs(draft_advantage)
        }
    
    def _analyze_players(self, team1: str, team2: str) -> Dict:
        """An√°lise de performance individual dos jogadores"""
        team1_players = [p for p in self.player_database.values() if p['team'] == team1]
        team2_players = [p for p in self.player_database.values() if p['team'] == team2]
        
        if not team1_players or not team2_players:
            return {'available': False}
        
        team1_avg_skill = np.mean([p['skill'] for p in team1_players])
        team2_avg_skill = np.mean([p['skill'] for p in team2_players])
        
        team1_consistency = np.mean([p['consistency'] for p in team1_players])
        team2_consistency = np.mean([p['consistency'] for p in team2_players])
        
        team1_clutch = np.mean([p['clutch'] for p in team1_players])
        team2_clutch = np.mean([p['clutch'] for p in team2_players])
        
        return {
            'available': True,
            'team1_skill': team1_avg_skill,
            'team2_skill': team2_avg_skill,
            'team1_consistency': team1_consistency,
            'team2_consistency': team2_consistency,
            'team1_clutch': team1_clutch,
            'team2_clutch': team2_clutch,
            'skill_advantage': team1_avg_skill - team2_avg_skill,
            'consistency_advantage': team1_consistency - team2_consistency,
            'clutch_advantage': team1_clutch - team2_clutch
        }
    
    def _analyze_meta_fit(self, team1_data: Dict, team2_data: Dict, 
                         team1_comp: List[str] = None, team2_comp: List[str] = None) -> Dict:
        """An√°lise de adapta√ß√£o √† meta atual"""
        meta_data = self.meta_champions['patch_14_23']
        
        team1_meta_score = team1_data.get('meta_adaptation', 0.7)
        team2_meta_score = team2_data.get('meta_adaptation', 0.7)
        
        # Bonus se a composi√ß√£o est√° na meta
        if team1_comp:
            team1_meta_bonus = self._calculate_meta_bonus(team1_comp, meta_data)
            team1_meta_score += team1_meta_bonus
        
        if team2_comp:
            team2_meta_bonus = self._calculate_meta_bonus(team2_comp, meta_data)
            team2_meta_score += team2_meta_bonus
        
        return {
            'team1_meta_score': team1_meta_score,
            'team2_meta_score': team2_meta_score,
            'meta_advantage': team1_meta_score - team2_meta_score,
            'patch_version': self.patch_version,
            'meta_type': self._determine_meta_type(meta_data)
        }
    
    def _analyze_head_to_head(self, team1: str, team2: str) -> Dict:
        """An√°lise hist√≥rica entre os times"""
        # Simula√ß√£o de dados hist√≥ricos (em implementa√ß√£o real, viria de banco de dados)
        h2h_data = {
            ('T1', 'Gen.G'): {'wins': 7, 'losses': 3, 'avg_game_time': 33.2},
            ('Gen.G', 'T1'): {'wins': 3, 'losses': 7, 'avg_game_time': 33.2},
            ('JDG', 'BLG'): {'wins': 6, 'losses': 4, 'avg_game_time': 31.8},
            ('BLG', 'JDG'): {'wins': 4, 'losses': 6, 'avg_game_time': 31.8}
        }
        
        key = (team1, team2)
        reverse_key = (team2, team1)
        
        if key in h2h_data:
            data = h2h_data[key]
            total_games = data['wins'] + data['losses']
            win_rate = data['wins'] / total_games if total_games > 0 else 0.5
        elif reverse_key in h2h_data:
            data = h2h_data[reverse_key]
            total_games = data['wins'] + data['losses']
            win_rate = data['losses'] / total_games if total_games > 0 else 0.5
        else:
            return {'available': False, 'win_rate': 0.5}
        
        return {
            'available': True,
            'total_games': total_games,
            'team1_wins': data['wins'] if key in h2h_data else data['losses'],
            'team2_wins': data['losses'] if key in h2h_data else data['wins'],
            'win_rate': win_rate,
            'avg_game_time': data.get('avg_game_time', 32.0),
            'historical_advantage': 'team1' if win_rate > 0.5 else 'team2'
        }
    
    def _calculate_comprehensive_probability(self, team1_data: Dict, team2_data: Dict,
                                           draft_analysis: Dict, player_analysis: Dict,
                                           meta_analysis: Dict, h2h_analysis: Dict,
                                           tournament_context: Dict) -> Dict:
        """C√°lculo final de probabilidade considerando todos os fatores"""
        
        # Pesos para cada fator
        weights = {
            'team_rating': 0.25,
            'recent_form': 0.20,
            'draft': 0.15,
            'players': 0.15,
            'meta_fit': 0.10,
            'h2h': 0.10,
            'tournament_context': 0.05
        }
        
        # C√°lculo base (rating dos times)
        rating_diff = (team1_data['rating'] - team2_data['rating']) / 100
        base_prob = 0.5 + (rating_diff * 0.3)
        
        # Forma recente
        form_diff = team1_data['recent_form'] - team2_data['recent_form']
        form_adjustment = form_diff * 0.2
        
        # Draft advantage
        draft_adjustment = 0
        if draft_analysis:
            draft_adjustment = draft_analysis['draft_advantage'] * 0.1
        
        # Player skill
        player_adjustment = 0
        if player_analysis.get('available'):
            skill_diff = player_analysis['skill_advantage'] / 100
            player_adjustment = skill_diff * 0.15
        
        # Meta fit
        meta_adjustment = meta_analysis['meta_advantage'] * 0.1
        
        # Head-to-head
        h2h_adjustment = 0
        if h2h_analysis.get('available'):
            h2h_adjustment = (h2h_analysis['win_rate'] - 0.5) * 0.2
        
        # Tournament context
        tournament_multiplier = tournament_context['importance_multiplier']
        pressure_factor = tournament_context['pressure_factor']
        
        # C√°lculo final
        final_prob = base_prob + form_adjustment + draft_adjustment + player_adjustment + meta_adjustment + h2h_adjustment
        
        # Aplicar contexto do torneio
        if final_prob > 0.5:
            final_prob = 0.5 + (final_prob - 0.5) * tournament_multiplier
        else:
            final_prob = 0.5 - (0.5 - final_prob) * tournament_multiplier
        
        # Limitar entre 0.1 e 0.9
        final_prob = max(0.1, min(0.9, final_prob))
        
        return {
            'team1_probability': final_prob,
            'team2_probability': 1 - final_prob,
            'confidence': self._calculate_analysis_confidence(team1_data, team2_data, draft_analysis),
            'factors_breakdown': {
                'base_rating': base_prob,
                'form_impact': form_adjustment,
                'draft_impact': draft_adjustment,
                'player_impact': player_adjustment,
                'meta_impact': meta_adjustment,
                'h2h_impact': h2h_adjustment,
                'tournament_multiplier': tournament_multiplier
            }
        }
    
    def _generate_comprehensive_analysis(self, team1: str, team2: str, team1_data: Dict,
                                       team2_data: Dict, draft_analysis: Dict,
                                       player_analysis: Dict, meta_analysis: Dict,
                                       probability: Dict) -> str:
        """Gera an√°lise textual completa"""
        
        analysis_parts = []
        
        # An√°lise de rating e forma
        rating_diff = team1_data['rating'] - team2_data['rating']
        if rating_diff > 5:
            analysis_parts.append(f"üìä {team1} tem vantagem no ranking ({team1_data['rating']} vs {team2_data['rating']})")
        elif rating_diff < -5:
            analysis_parts.append(f"üìä {team2} tem vantagem no ranking ({team2_data['rating']} vs {team1_data['rating']})")
        else:
            analysis_parts.append("üìä Times com for√ßa similar no ranking")
        
        # Forma recente
        if team1_data['recent_form'] > team2_data['recent_form'] + 0.1:
            analysis_parts.append(f"üìà {team1} em melhor forma recente ({team1_data['recent_form']:.1%})")
        elif team2_data['recent_form'] > team1_data['recent_form'] + 0.1:
            analysis_parts.append(f"üìà {team2} em melhor forma recente ({team2_data['recent_form']:.1%})")
        
        # Draft analysis
        if draft_analysis:
            if draft_analysis['draft_advantage'] > 0.1:
                analysis_parts.append(f"üéØ {team1} com vantagem no draft")
            elif draft_analysis['draft_advantage'] < -0.1:
                analysis_parts.append(f"üéØ {team2} com vantagem no draft")
        
        # Player analysis
        if player_analysis.get('available'):
            if player_analysis['skill_advantage'] > 2:
                analysis_parts.append(f"‚≠ê {team1} com jogadores mais habilidosos")
            elif player_analysis['skill_advantage'] < -2:
                analysis_parts.append(f"‚≠ê {team2} com jogadores mais habilidosos")
        
        # Meta fit
        if meta_analysis['meta_advantage'] > 0.05:
            analysis_parts.append(f"üîÑ {team1} melhor adaptado √† meta atual")
        elif meta_analysis['meta_advantage'] < -0.05:
            analysis_parts.append(f"üîÑ {team2} melhor adaptado √† meta atual")
        
        # Probabilidade final
        team1_prob = probability['team1_probability']
        if team1_prob > 0.65:
            analysis_parts.append(f"üèÜ {team1} √© forte favorito ({team1_prob:.1%})")
        elif team1_prob > 0.55:
            analysis_parts.append(f"üèÜ {team1} √© ligeiro favorito ({team1_prob:.1%})")
        elif team1_prob < 0.35:
            analysis_parts.append(f"üèÜ {team2} √© forte favorito ({1-team1_prob:.1%})")
        elif team1_prob < 0.45:
            analysis_parts.append(f"üèÜ {team2} √© ligeiro favorito ({1-team1_prob:.1%})")
        else:
            analysis_parts.append("‚öñÔ∏è Partida muito equilibrada")
        
        return "\n".join(analysis_parts)
    
    # M√©todos auxiliares
    def _get_default_team_data(self):
        return {
            'rating': 75, 'recent_form': 0.6, 'consistency': 0.6,
            'early_game': 0.6, 'mid_game': 0.6, 'late_game': 0.6,
            'meta_adaptation': 0.6
        }
    
    def _get_champion_tiers(self, composition: List[str]) -> float:
        meta = self.meta_champions['patch_14_23']
        score = 0
        for champ in composition:
            if champ in meta['op_champions'].get('top', []) + meta['op_champions'].get('jungle', []) + meta['op_champions'].get('mid', []) + meta['op_champions'].get('adc', []) + meta['op_champions'].get('support', []):
                score += 1
        return score / len(composition) if composition else 0
    
    def _calculate_team_synergy(self, composition: List[str]) -> float:
        synergies = self.champion_synergies['strong_synergies']
        score = 0
        count = 0
        for i, champ1 in enumerate(composition):
            for champ2 in composition[i+1:]:
                if (champ1, champ2) in synergies:
                    score += synergies[(champ1, champ2)]
                    count += 1
                elif (champ2, champ1) in synergies:
                    score += synergies[(champ2, champ1)]
                    count += 1
        return score / count if count > 0 else 0.5
    
    def _analyze_power_spikes(self, composition: List[str]) -> Dict:
        meta = self.meta_champions['patch_14_23']['power_spikes']
        early = sum(1 for champ in composition if champ in meta['early'])
        mid = sum(1 for champ in composition if champ in meta['mid'])
        late = sum(1 for champ in composition if champ in meta['late'])
        return {'early': early, 'mid': mid, 'late': late}
    
    def _analyze_counters(self, team_comp: List[str], enemy_comp: List[str]) -> float:
        counters = self.champion_synergies['counters']
        counter_score = 0
        for champ in team_comp:
            for enemy_champ in enemy_comp:
                if enemy_champ in counters.get(champ, []):
                    counter_score += 1
        return counter_score / (len(team_comp) * len(enemy_comp)) if team_comp and enemy_comp else 0
    
    def _calculate_meta_bonus(self, composition: List[str], meta_data: Dict) -> float:
        bonus = 0
        for champ in composition:
            if champ in meta_data['op_champions'].get('top', []) + meta_data['op_champions'].get('jungle', []) + meta_data['op_champions'].get('mid', []) + meta_data['op_champions'].get('adc', []) + meta_data['op_champions'].get('support', []):
                bonus += 0.02
        return bonus
    
    def _determine_meta_type(self, meta_data: Dict) -> str:
        shifts = meta_data['meta_shifts']
        max_meta = max(shifts, key=shifts.get)
        return max_meta
    
    def _calculate_confidence(self, probability: Dict, team1_data: Dict, team2_data: Dict) -> float:
        # Confian√ßa baseada na diferen√ßa de probabilidade e consist√™ncia dos times
        prob_diff = abs(probability['team1_probability'] - 0.5)
        consistency_avg = (team1_data.get('consistency', 0.6) + team2_data.get('consistency', 0.6)) / 2
        return min(0.95, prob_diff * 2 + consistency_avg * 0.3)
    
    def _calculate_analysis_confidence(self, team1_data: Dict, team2_data: Dict, draft_analysis: Dict) -> float:
        base_confidence = 0.7
        if draft_analysis:
            base_confidence += 0.1
        if team1_data.get('recent_matches') and team2_data.get('recent_matches'):
            base_confidence += 0.1
        return min(0.95, base_confidence)
    
    def _identify_key_factors(self, team1_data: Dict, team2_data: Dict, draft_analysis: Dict) -> List[str]:
        factors = []
        
        rating_diff = abs(team1_data['rating'] - team2_data['rating'])
        if rating_diff > 10:
            factors.append("Diferen√ßa significativa de rating")
        
        form_diff = abs(team1_data['recent_form'] - team2_data['recent_form'])
        if form_diff > 0.15:
            factors.append("Diferen√ßa na forma recente")
        
        if draft_analysis and abs(draft_analysis['draft_advantage']) > 0.1:
            factors.append("Vantagem no draft")
        
        return factors

class BotLoLV3Railway:
    """Bot principal compat√≠vel com Railway"""
    
    def __init__(self):
        """Inicializar o bot com todas as funcionalidades"""
        if NEW_VERSION:
            # Vers√£o nova (v20+)
            self.application = Application.builder().token(TOKEN).build()
            self.bot_instance = self.application
        else:
            # Vers√£o antiga (v13-19)
            self.updater = Updater(TOKEN, use_context=True)
            self.bot_instance = self.updater
            
        self.health_manager = HealthCheckManager()
        self.live_stats = LiveStatsSystem()
        self.value_system = ValueBettingSystem()
        self.advanced_analyzer = AdvancedMatchAnalyzer()
        
        self.setup_commands()
        self.health_manager.start_flask_server()
        self.health_manager.mark_healthy()
        
        logger.info("ü§ñ Bot V13 Railway inicializado com sistema de unidades")
    
    def setup_commands(self):
        """Configurar comandos do bot"""
        if NEW_VERSION:
            # Vers√£o nova
            self.application.add_handler(CommandHandler("start", self.start))
            self.application.add_handler(CommandHandler("help", self.help))
            self.application.add_handler(CommandHandler("partidas", self.partidas))
            self.application.add_handler(CommandHandler("stats", self.stats))
            self.application.add_handler(CommandHandler("value", self.value))
            self.application.add_handler(CommandHandler("portfolio", self.portfolio))
            self.application.add_handler(CommandHandler("units", self.units_info))
            self.application.add_handler(CommandHandler("tips", self.betting_tips))
            self.application.add_handler(CommandHandler("demo", self.demo_system))
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        else:
            # Vers√£o antiga
            self.updater.dispatcher.add_handler(CommandHandler("start", self.start))
            self.updater.dispatcher.add_handler(CommandHandler("help", self.help))
            self.updater.dispatcher.add_handler(CommandHandler("partidas", self.partidas))
            self.updater.dispatcher.add_handler(CommandHandler("stats", self.stats))
            self.updater.dispatcher.add_handler(CommandHandler("value", self.value))
            self.updater.dispatcher.add_handler(CommandHandler("portfolio", self.portfolio))
            self.updater.dispatcher.add_handler(CommandHandler("units", self.units_info))
            self.updater.dispatcher.add_handler(CommandHandler("tips", self.betting_tips))
            self.updater.dispatcher.add_handler(CommandHandler("demo", self.demo_system))
            self.updater.dispatcher.add_handler(CallbackQueryHandler(self.handle_callback))
    
    def start(self, update: Update, context):
        """Comando /start"""
        self.health_manager.update_activity()
        return self.show_main_menu(update, context)
    
    def show_main_menu(self, update, context, edit_message=False):
        """Exibe o menu principal com bot√µes"""
        keyboard = [
            [InlineKeyboardButton("üéÆ Ver Partidas", callback_data="partidas"),
             InlineKeyboardButton("üìä Estat√≠sticas", callback_data="stats")],
            [InlineKeyboardButton("üí∞ Value Betting", callback_data="value"),
             InlineKeyboardButton("üìà Portfolio", callback_data="portfolio")],
            [InlineKeyboardButton("üéØ Sistema Unidades", callback_data="units"),
             InlineKeyboardButton("üí° Dicas Pro", callback_data="tips")],
            [InlineKeyboardButton("üé≤ Demo Sistema", callback_data="demo"),
             InlineKeyboardButton("‚ùì Ajuda", callback_data="help")]
        ]
        
        message_text = (
            "üéÆ **BOT LOL V3 ULTRA AVAN√áADO** üéÆ\n\n"
            "Ol√°! Eu sou o bot LoL V3 Ultra Avan√ßado, desenvolvido para fornecer "
            "an√°lises avan√ßadas sobre partidas de League of Legends.\n\n"
            "üéØ **FUNCIONALIDADES PRINCIPAIS:**\n"
            "‚Ä¢ üìä Estat√≠sticas em tempo real\n"
            "‚Ä¢ üí∞ Sistema de unidades b√°sicas\n"
            "‚Ä¢ üìà An√°lise de EV e confian√ßa\n"
            "‚Ä¢ üîÆ Predi√ß√µes din√¢micas\n"
            "‚Ä¢ üí° Dicas profissionais\n\n"
            "‚ö° **NOVO SISTEMA DE UNIDADES:**\n"
            "‚Ä¢ EV Alto = 2 unidades\n"
            "‚Ä¢ Confian√ßa Alta = 2 unidades\n"
            "‚Ä¢ Gest√£o de risco inteligente\n\n"
            "üåç **Cobertura global de ligas**\n\n"
            "üëá **Escolha uma op√ß√£o abaixo:**"
        )
        
        if edit_message and hasattr(update, 'callback_query'):
            return update.callback_query.edit_message_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            return update.message.reply_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    def help(self, update: Update, context):
        """Comando /help"""
        self.health_manager.update_activity()
        
        keyboard = [
            [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
        ]
        
        message_text = (
            "üìö **GUIA COMPLETO DO BOT**\n\n"
            "üéØ **COMANDOS PRINCIPAIS:**\n"
            "‚Ä¢ `/start` - Iniciar o bot\n"
            "‚Ä¢ `/help` - Este guia\n"
            "‚Ä¢ `/partidas` - Partidas ao vivo\n"
            "‚Ä¢ `/stats` - Estat√≠sticas em tempo real\n"
            "‚Ä¢ `/value` - Value betting com unidades\n"
            "‚Ä¢ `/portfolio` - Dashboard do portfolio\n"
            "‚Ä¢ `/units` - Sistema de unidades b√°sicas\n"
            "‚Ä¢ `/tips` - Dicas profissionais de betting\n"
            "‚Ä¢ `/demo` - Exemplos pr√°ticos do sistema\n\n"
            "üéÆ **FUNCIONALIDADES:**\n"
            "‚Ä¢ Monitoramento de partidas ao vivo\n"
            "‚Ä¢ Estat√≠sticas detalhadas (gold, kills, objetivos)\n"
            "‚Ä¢ Probabilidades din√¢micas que evoluem\n"
            "‚Ä¢ Sistema de unidades baseado em EV + Confian√ßa\n"
            "‚Ä¢ An√°lise de portfolio em tempo real\n"
            "‚Ä¢ Dicas profissionais de gest√£o de banca\n\n"
            "üí∞ **SISTEMA DE UNIDADES:**\n"
            "‚Ä¢ EV Alto (8%+) = 2 unidades\n"
            "‚Ä¢ Confian√ßa Alta (85%+) = 2 unidades\n"
            "‚Ä¢ C√°lculo: (EV_units + Conf_units) √∑ 2\n"
            "‚Ä¢ M√°ximo: 3 unidades por aposta\n"
            "‚Ä¢ Gest√£o de risco inteligente\n\n"
            "üìä **M√âTRICAS DISPON√çVEIS:**\n"
            "‚Ä¢ Gold, kills, mortes, assists, CS\n"
            "‚Ä¢ Drag√µes, bar√µes, torres, inibidores\n"
            "‚Ä¢ Expected Value (EV) calculado\n"
            "‚Ä¢ An√°lise de confian√ßa por partida\n"
            "‚Ä¢ An√°lise por fase da partida (Early/Mid/Late)\n"
            "‚Ä¢ Vantagens calculadas dinamicamente\n\n"
            "üîÑ **Sistema atualizado em tempo real!**"
        )
        
        return update.message.reply_text(
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    def partidas(self, update: Update, context):
        """Comando /partidas"""
        self.health_manager.update_activity()

        keyboard = [
            [InlineKeyboardButton("üîÑ Verificar Novamente", callback_data="partidas"),
             InlineKeyboardButton("üí∞ Value Betting", callback_data="value")],
            [InlineKeyboardButton("üìà Portfolio", callback_data="portfolio"),
             InlineKeyboardButton("üéØ Sistema", callback_data="sistema")],
            [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
        ]
        
        message_text = (
            "üîç **MONITORAMENTO DE PARTIDAS**\n\n"
            "‚ÑπÔ∏è **NENHUMA PARTIDA AO VIVO DETECTADA**\n\n"
            "üîÑ **SISTEMA ATIVO:**\n"
            "‚Ä¢ Monitoramento 24/7 ativo\n"
            "‚Ä¢ API Riot Games integrada\n"
            "‚Ä¢ Detec√ß√£o autom√°tica de partidas\n\n"
            "üéÆ **LIGAS MONITORADAS:**\n"
            "üá∞üá∑ LCK ‚Ä¢ üá®üá≥ LPL ‚Ä¢ üá™üá∫ LEC ‚Ä¢ üá∫üá∏ LCS\n"
            "üáßüá∑ CBLOL ‚Ä¢ üáØüáµ LJL ‚Ä¢ üá¶üá∫ LCO ‚Ä¢ üåè PCS\n"
            "üá´üá∑ LFL ‚Ä¢ üá©üá™ Prime League ‚Ä¢ üá™üá∏ Superliga\n\n"
            "‚è∞ **PR√ìXIMAS VERIFICA√á√ïES:**\n"
            "‚Ä¢ Sistema verifica a cada 1 minuto\n"
            "‚Ä¢ Alertas autom√°ticos quando detectar partidas\n"
            "‚Ä¢ Estat√≠sticas em tempo real dispon√≠veis\n\n"
            f"üîÑ **√öltima verifica√ß√£o:** {datetime.now().strftime('%H:%M:%S')}\n"
            "üí° **Use 'Verificar Novamente' para atualizar**"
        )
        
        return update.message.reply_text(
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    def stats(self, update: Update, context):
        """Comando /stats - Estat√≠sticas ao vivo"""
        self.health_manager.update_activity()
        
        keyboard = [
            [InlineKeyboardButton("üéÆ Ver Partidas", callback_data="partidas"),
             InlineKeyboardButton("üí∞ Value Betting", callback_data="value")],
            [InlineKeyboardButton("üìà Portfolio", callback_data="portfolio"),
             InlineKeyboardButton("üîÑ Atualizar", callback_data="stats")],
            [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
        ]
        
        message_text = (
            "üìä **SISTEMA DE ESTAT√çSTICAS AO VIVO**\n\n"
            "‚ÑπÔ∏è **AGUARDANDO PARTIDAS ATIVAS**\n\n"
            "üéÆ **FUNCIONALIDADES DISPON√çVEIS:**\n"
            "‚Ä¢ Gold, kills, mortes, assists em tempo real\n"
            "‚Ä¢ Drag√µes, bar√µes, torres din√¢micos\n"
            "‚Ä¢ Probabilidades que evoluem com o tempo\n"
            "‚Ä¢ An√°lise por fase (Early/Mid/Late Game)\n"
            "‚Ä¢ Vantagens calculadas dinamicamente\n\n"
            "üîÑ **SISTEMA PREPARADO:**\n"
            "‚Ä¢ Monitoramento ativo 24/7\n"
            "‚Ä¢ Detec√ß√£o autom√°tica de partidas\n"
            "‚Ä¢ Estat√≠sticas atualizadas em tempo real\n"
            "‚Ä¢ Probabilidades din√¢micas ativas\n\n"
            "‚ö° **QUANDO HOUVER PARTIDAS:**\n"
            "‚Ä¢ Stats detalhadas aparecer√£o automaticamente\n"
            "‚Ä¢ Probabilidades se atualizar√£o em tempo real\n"
            "‚Ä¢ Sistema de value betting ser√° ativado\n\n"
            f"‚è∞ **Status:** Sistema operacional - {datetime.now().strftime('%H:%M:%S')}"
        )
        
        return update.message.reply_text(
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    def units_info(self, update: Update, context):
        """Comando /units - Informa√ß√µes sobre sistema de unidades"""
        self.health_manager.update_activity()
        
        keyboard = [
            [InlineKeyboardButton("üí∞ Value Betting", callback_data="value"),
             InlineKeyboardButton("üìä Ver Stats", callback_data="stats")],
            [InlineKeyboardButton("üí° Dicas Pro", callback_data="tips"),
             InlineKeyboardButton("üìà Portfolio", callback_data="portfolio")],
            [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
        ]
        
        message_text = (
            "üéØ **SISTEMA DE UNIDADES B√ÅSICAS**\n\n"
            "üí∞ **CONFIGURA√á√ÉO ATUAL:**\n"
            f"‚Ä¢ Unidade base: R$ {self.value_system.base_unit}\n"
            f"‚Ä¢ Banca total: R$ {self.value_system.bankroll:,}\n"
            f"‚Ä¢ M√°ximo por aposta: {self.value_system.max_units_per_bet} unidades\n"
            f"‚Ä¢ EV m√≠nimo: {self.value_system.ev_threshold*100}%\n\n"
            "üìä **CRIT√âRIOS DE UNIDADES:**\n\n"
            "üî• **EXPECTED VALUE (EV):**\n"
            "‚Ä¢ EV ‚â•8%: 2 unidades\n"
            "‚Ä¢ EV 5-8%: 1.5 unidades\n"
            "‚Ä¢ EV 3-5%: 1 unidade\n"
            "‚Ä¢ EV <3%: 0.5 unidade\n\n"
            "‚≠ê **CONFIAN√áA:**\n"
            "‚Ä¢ ‚â•85%: 2 unidades\n"
            "‚Ä¢ 75-85%: 1.5 unidades\n"
            "‚Ä¢ 65-75%: 1 unidade\n"
            "‚Ä¢ <65%: 0.5 unidade\n\n"
            "üéØ **C√ÅLCULO FINAL:**\n"
            "Unidades = (EV_units + Conf_units) √∑ 2\n"
            "M√°ximo: 3 unidades por aposta\n\n"
            "üõ°Ô∏è **GEST√ÉO DE RISCO:**\n"
            "‚Ä¢ M√°ximo 5% da banca por dia\n"
            "‚Ä¢ Diversifica√ß√£o obrigat√≥ria\n"
            "‚Ä¢ Stop-loss autom√°tico\n"
            "‚Ä¢ Reavalia√ß√£o a cada 100 apostas"
        )
        
        return update.message.reply_text(
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    def betting_tips(self, update: Update, context):
        """Comando /tips - Dicas profissionais"""
        self.health_manager.update_activity()
        
        suggestions = self.value_system.get_portfolio_suggestions()
        
        keyboard = [
            [InlineKeyboardButton("üí∞ Value Betting", callback_data="value"),
             InlineKeyboardButton("üéØ Sistema Unidades", callback_data="units")],
            [InlineKeyboardButton("üìà Portfolio", callback_data="portfolio"),
             InlineKeyboardButton("üîÑ Atualizar Dicas", callback_data="tips")],
            [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
        ]
        
        message_text = (
            "üí° **DICAS PROFISSIONAIS DE BETTING**\n\n"
            "üí∞ **GEST√ÉO DE BANCA:**\n" +
            "\n".join(f"‚Ä¢ {tip}" for tip in suggestions['bankroll_management']) + "\n\n"
            "üéØ **CA√áA AO VALUE:**\n" +
            "\n".join(f"‚Ä¢ {tip}" for tip in suggestions['value_hunting']) + "\n\n"
            "üõ°Ô∏è **GEST√ÉO DE RISCO:**\n" +
            "\n".join(f"‚Ä¢ {tip}" for tip in suggestions['risk_management']) + "\n\n"
            "üß† **DICAS AVAN√áADAS:**\n" +
            "\n".join(f"‚Ä¢ {tip}" for tip in suggestions['advanced_tips']) + "\n\n"
            "‚ö° **LEMBRE-SE:**\n"
            "‚Ä¢ Disciplina √© mais importante que sorte\n"
            "‚Ä¢ Value betting √© maratona, n√£o sprint\n"
            "‚Ä¢ Sempre mantenha registros detalhados\n"
            "‚Ä¢ Nunca aposte com emo√ß√£o"
        )
        
        return update.message.reply_text(
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    def value(self, update: Update, context):
        """Comando /value - Value betting com sistema de unidades"""
        self.health_manager.update_activity()
        
        keyboard = [
            [InlineKeyboardButton("üéÆ Ver Partidas", callback_data="partidas"),
             InlineKeyboardButton("üìä Ver Stats", callback_data="stats")],
            [InlineKeyboardButton("üéØ Sistema Unidades", callback_data="units"),
             InlineKeyboardButton("üí° Dicas Pro", callback_data="tips")],
            [InlineKeyboardButton("üîÑ Verificar Oportunidades", callback_data="value"),
             InlineKeyboardButton("üìà Portfolio", callback_data="portfolio")],
            [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
        ]
        
        message_text = (
            "üí∞ **VALUE BETTING - SISTEMA DE UNIDADES**\n\n"
            "üîç **MONITORAMENTO ATIVO**\n\n"
            "‚ÑπÔ∏è **AGUARDANDO PARTIDAS PARA AN√ÅLISE**\n\n"
            "üéØ **SISTEMA PREPARADO:**\n"
            "‚Ä¢ Detec√ß√£o autom√°tica de value betting\n"
            "‚Ä¢ C√°lculo de unidades baseado em EV + Confian√ßa\n"
            "‚Ä¢ An√°lise de probabilidades vs odds\n"
            "‚Ä¢ Alertas instant√¢neos de oportunidades\n\n"
            "üìä **QUANDO HOUVER PARTIDAS:**\n"
            "‚Ä¢ Value betting calculado automaticamente\n"
            "‚Ä¢ Unidades sugeridas (0.5 a 3.0)\n"
            "‚Ä¢ An√°lise de EV e confian√ßa detalhada\n"
            "‚Ä¢ Recomenda√ß√µes personalizadas\n\n"
            "üîÑ **CONFIGURA√á√ïES ATIVAS:**\n"
            f"‚Ä¢ Unidade base: R$ {self.value_system.base_unit}\n"
            f"‚Ä¢ Banca total: R$ {self.value_system.bankroll:,}\n"
            f"‚Ä¢ EV m√≠nimo: {self.value_system.ev_threshold*100}%\n"
            f"‚Ä¢ Confian√ßa m√≠nima: {self.value_system.confidence_threshold*100}%\n\n"
            "üéØ **CRIT√âRIOS DE UNIDADES:**\n"
            "‚Ä¢ EV Muito Alto (8%+) + Confian√ßa Alta = 2-3 unidades\n"
            "‚Ä¢ EV Alto (5-8%) + Confian√ßa M√©dia = 1-2 unidades\n"
            "‚Ä¢ EV M√©dio (3-5%) + Confian√ßa Baixa = 0.5-1 unidade\n\n"
            f"‚è∞ **Sistema operacional:** {datetime.now().strftime('%H:%M:%S')}"
        )
        
        return update.message.reply_text(
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    def portfolio(self, update: Update, context):
        """Comando /portfolio"""
        self.health_manager.update_activity()
        
        keyboard = [
            [InlineKeyboardButton("üí∞ Value Bets", callback_data="value"),
             InlineKeyboardButton("üìä Ver Stats", callback_data="stats")],
            [InlineKeyboardButton("üéÆ Ver Partidas", callback_data="partidas"),
             InlineKeyboardButton("üîÑ Atualizar", callback_data="portfolio")],
            [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
        ]
        
        message_text = (
            "üìä **PORTFOLIO DASHBOARD**\n\n"
            "üí∞ **STATUS ATUAL:**\n"
            "‚Ä¢ Sistema: ‚úÖ Operacional\n"
            "‚Ä¢ Monitoramento: üîÑ Ativo\n"
            "‚Ä¢ Bankroll: R$ 10.000\n"
            "‚Ä¢ Risk Level: Conservador\n\n"
            "üéÆ **LIGAS MONITORADAS:**\n"
            "üá∞üá∑ LCK ‚Ä¢ üá®üá≥ LPL ‚Ä¢ üá™üá∫ LEC ‚Ä¢ üá∫üá∏ LCS ‚Ä¢ üáßüá∑ CBLOL\n"
            "üáØüáµ LJL ‚Ä¢ üá¶üá∫ LCO ‚Ä¢ üåè PCS ‚Ä¢ üá´üá∑ LFL ‚Ä¢ üá©üá™ Prime League\n\n"
            "üìà **AGUARDANDO OPORTUNIDADES:**\n"
            "‚Ä¢ Nenhuma partida ativa no momento\n"
            "‚Ä¢ Sistema preparado para detectar value bets\n"
            "‚Ä¢ An√°lise autom√°tica quando houver partidas\n\n"
            "üìä **CONFIGURA√á√ïES DE RISCO:**\n"
            "‚Ä¢ Diversifica√ß√£o: M√∫ltiplas ligas\n"
            "‚Ä¢ Sistema de unidades ativo\n"
            "‚Ä¢ Stop-loss autom√°tico\n\n"
            "üîÑ **SISTEMA PREPARADO:**\n"
            "‚Ä¢ Probabilidades din√¢micas ‚úÖ\n"
            "‚Ä¢ Monitoramento 24/7 ‚úÖ\n"
            "‚Ä¢ API Riot integrada ‚úÖ\n"
            "‚Ä¢ Alertas autom√°ticos ‚úÖ\n\n"
            f"‚è∞ **Status:** Aguardando partidas - {datetime.now().strftime('%H:%M:%S')}"
        )
        
        return update.message.reply_text(
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    def demo_system(self, update: Update, context):
        """Comando /demo - Demonstra√ß√£o do sistema avan√ßado"""
        self.health_manager.update_activity()
        
        keyboard = [
            [InlineKeyboardButton("üéØ An√°lise Avan√ßada", callback_data="demo_advanced"),
             InlineKeyboardButton("üí∞ Value Demo", callback_data="demo_value")],
            [InlineKeyboardButton("üéÆ An√°lise Composi√ß√£o", callback_data="demo_draft"),
             InlineKeyboardButton("üìä Performance Times", callback_data="demo_teams")],
            [InlineKeyboardButton("üîÑ Novo Demo", callback_data="demo"),
             InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
        ]
        
        demo_text = (
            "üé≤ **DEMONSTRA√á√ÉO DO SISTEMA AVAN√áADO**\n\n"
            "üß† **SISTEMA DE AN√ÅLISE COMPLETO:**\n"
            "‚Ä¢ An√°lise de composi√ß√µes e sinergias\n"
            "‚Ä¢ Performance individual de jogadores\n"
            "‚Ä¢ Dados hist√≥ricos e head-to-head\n"
            "‚Ä¢ Adapta√ß√£o √† meta atual (Patch 14.23)\n"
            "‚Ä¢ Contexto de torneio e press√£o\n\n"
            "üéØ **FATORES ANALISADOS:**\n"
            "‚Ä¢ **Rating dos times** (25%)\n"
            "‚Ä¢ **Forma recente** (20%)\n"
            "‚Ä¢ **Draft e composi√ß√£o** (15%)\n"
            "‚Ä¢ **Skill individual** (15%)\n"
            "‚Ä¢ **Meta fit** (10%)\n"
            "‚Ä¢ **Head-to-head** (10%)\n"
            "‚Ä¢ **Contexto torneio** (5%)\n\n"
            "üìä **DADOS DISPON√çVEIS:**\n"
            "‚Ä¢ Times: T1, Gen.G, JDG, BLG, G2, Fnatic, C9, LOUD\n"
            "‚Ä¢ Jogadores: Faker, Chovy, Canyon, Zeus, etc.\n"
            "‚Ä¢ Champions: Meta atual com sinergias\n"
            "‚Ä¢ Patches: Atualiza√ß√µes e mudan√ßas\n\n"
            "üëá **Escolha um tipo de demonstra√ß√£o:**"
        )
        
        return update.message.reply_text(
            demo_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    def handle_callback(self, update: Update, context):
        """Handle callback queries"""
        query = update.callback_query
        query.answer()
        
        self.health_manager.update_activity()
        
        # Menu principal
        if query.data == "menu_principal":
            return self.show_main_menu(update, context, edit_message=True)
        
        # Partidas
        elif query.data == "partidas":
            keyboard = [
                [InlineKeyboardButton("üîÑ Verificar Novamente", callback_data="partidas"),
                 InlineKeyboardButton("üí∞ Value Betting", callback_data="value")],
                [InlineKeyboardButton("üìà Portfolio", callback_data="portfolio"),
                 InlineKeyboardButton("üéØ Sistema", callback_data="sistema")],
                [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            message_text = (
                "üîç **MONITORAMENTO DE PARTIDAS**\n\n"
                "‚ÑπÔ∏è **NENHUMA PARTIDA AO VIVO DETECTADA**\n\n"
                "üîÑ **SISTEMA ATIVO:**\n"
                "‚Ä¢ Monitoramento 24/7 ativo\n"
                "‚Ä¢ API Riot Games integrada\n"
                "‚Ä¢ Detec√ß√£o autom√°tica de partidas\n\n"
                "üéÆ **LIGAS MONITORADAS:**\n"
                "üá∞üá∑ LCK ‚Ä¢ üá®üá≥ LPL ‚Ä¢ üá™üá∫ LEC ‚Ä¢ üá∫üá∏ LCS\n"
                "üáßüá∑ CBLOL ‚Ä¢ üáØüáµ LJL ‚Ä¢ üá¶üá∫ LCO ‚Ä¢ üåè PCS\n"
                "üá´üá∑ LFL ‚Ä¢ üá©üá™ Prime League ‚Ä¢ üá™üá∏ Superliga\n\n"
                "‚è∞ **PR√ìXIMAS VERIFICA√á√ïES:**\n"
                "‚Ä¢ Sistema verifica a cada 1 minuto\n"
                "‚Ä¢ Alertas autom√°ticos quando detectar partidas\n"
                "‚Ä¢ Estat√≠sticas em tempo real dispon√≠veis\n\n"
                f"üîÑ **√öltima verifica√ß√£o:** {datetime.now().strftime('%H:%M:%S')}\n"
                "üí° **Use 'Verificar Novamente' para atualizar**"
            )
            
            return query.edit_message_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Stats
        elif query.data == "stats":
            keyboard = [
                [InlineKeyboardButton("üéÆ Ver Partidas", callback_data="partidas"),
                 InlineKeyboardButton("üí∞ Value Betting", callback_data="value")],
                [InlineKeyboardButton("üìà Portfolio", callback_data="portfolio"),
                 InlineKeyboardButton("üîÑ Atualizar", callback_data="stats")],
                [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            message_text = (
                "üìä **SISTEMA DE ESTAT√çSTICAS AO VIVO**\n\n"
                "‚ÑπÔ∏è **AGUARDANDO PARTIDAS ATIVAS**\n\n"
                "üéÆ **FUNCIONALIDADES DISPON√çVEIS:**\n"
                "‚Ä¢ Gold, kills, mortes, assists em tempo real\n"
                "‚Ä¢ Drag√µes, bar√µes, torres din√¢micos\n"
                "‚Ä¢ Probabilidades que evoluem com o tempo\n"
                "‚Ä¢ An√°lise por fase (Early/Mid/Late Game)\n"
                "‚Ä¢ Vantagens calculadas dinamicamente\n\n"
                "üîÑ **SISTEMA PREPARADO:**\n"
                "‚Ä¢ Monitoramento ativo 24/7\n"
                "‚Ä¢ Detec√ß√£o autom√°tica de partidas\n"
                "‚Ä¢ Estat√≠sticas atualizadas em tempo real\n"
                "‚Ä¢ Probabilidades din√¢micas ativas\n\n"
                "‚ö° **QUANDO HOUVER PARTIDAS:**\n"
                "‚Ä¢ Stats detalhadas aparecer√£o automaticamente\n"
                "‚Ä¢ Probabilidades se atualizar√£o em tempo real\n"
                "‚Ä¢ Sistema de value betting ser√° ativado\n\n"
                f"‚è∞ **Status:** Sistema operacional - {datetime.now().strftime('%H:%M:%S')}"
            )
            
            return query.edit_message_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Value Betting
        elif query.data == "value":
            keyboard = [
                [InlineKeyboardButton("üéÆ Ver Partidas", callback_data="partidas"),
                 InlineKeyboardButton("üìä Ver Stats", callback_data="stats")],
                [InlineKeyboardButton("üéØ Sistema Unidades", callback_data="units"),
                 InlineKeyboardButton("üí° Dicas Pro", callback_data="tips")],
                [InlineKeyboardButton("üîÑ Verificar Oportunidades", callback_data="value"),
                 InlineKeyboardButton("üìà Portfolio", callback_data="portfolio")],
                [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            message_text = (
                "üí∞ **VALUE BETTING - SISTEMA DE UNIDADES**\n\n"
                "üîç **MONITORAMENTO ATIVO**\n\n"
                "‚ÑπÔ∏è **AGUARDANDO PARTIDAS PARA AN√ÅLISE**\n\n"
                "üéØ **SISTEMA PREPARADO:**\n"
                "‚Ä¢ Detec√ß√£o autom√°tica de value betting\n"
                "‚Ä¢ C√°lculo de unidades baseado em EV + Confian√ßa\n"
                "‚Ä¢ An√°lise de probabilidades vs odds\n"
                "‚Ä¢ Alertas instant√¢neos de oportunidades\n\n"
                "üìä **QUANDO HOUVER PARTIDAS:**\n"
                "‚Ä¢ Value betting calculado automaticamente\n"
                "‚Ä¢ Unidades sugeridas (0.5 a 3.0)\n"
                "‚Ä¢ An√°lise de EV e confian√ßa detalhada\n"
                "‚Ä¢ Recomenda√ß√µes personalizadas\n\n"
                "üîÑ **CONFIGURA√á√ïES ATIVAS:**\n"
                f"‚Ä¢ Unidade base: R$ {self.value_system.base_unit}\n"
                f"‚Ä¢ Banca total: R$ {self.value_system.bankroll:,}\n"
                f"‚Ä¢ EV m√≠nimo: {self.value_system.ev_threshold*100}%\n"
                f"‚Ä¢ Confian√ßa m√≠nima: {self.value_system.confidence_threshold*100}%\n\n"
                "üéØ **CRIT√âRIOS DE UNIDADES:**\n"
                "‚Ä¢ EV Muito Alto (8%+) + Confian√ßa Alta = 2-3 unidades\n"
                "‚Ä¢ EV Alto (5-8%) + Confian√ßa M√©dia = 1-2 unidades\n"
                "‚Ä¢ EV M√©dio (3-5%) + Confian√ßa Baixa = 0.5-1 unidade\n\n"
                f"‚è∞ **Sistema operacional:** {datetime.now().strftime('%H:%M:%S')}"
            )
            
            return query.edit_message_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Portfolio
        elif query.data == "portfolio":
            keyboard = [
                [InlineKeyboardButton("üí∞ Value Bets", callback_data="value"),
                 InlineKeyboardButton("üìä Ver Stats", callback_data="stats")],
                [InlineKeyboardButton("üéÆ Ver Partidas", callback_data="partidas"),
                 InlineKeyboardButton("üîÑ Atualizar", callback_data="portfolio")],
                [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            message_text = (
                "üìä **PORTFOLIO DASHBOARD**\n\n"
                "üí∞ **STATUS ATUAL:**\n"
                "‚Ä¢ Sistema: ‚úÖ Operacional\n"
                "‚Ä¢ Monitoramento: üîÑ Ativo\n"
                "‚Ä¢ Bankroll: R$ 10.000\n"
                "‚Ä¢ Risk Level: Conservador\n\n"
                "üéÆ **LIGAS MONITORADAS:**\n"
                "üá∞üá∑ LCK ‚Ä¢ üá®üá≥ LPL ‚Ä¢ üá™üá∫ LEC ‚Ä¢ üá∫üá∏ LCS ‚Ä¢ üáßüá∑ CBLOL\n"
                "üáØüáµ LJL ‚Ä¢ üá¶üá∫ LCO ‚Ä¢ üåè PCS ‚Ä¢ üá´üá∑ LFL ‚Ä¢ üá©üá™ Prime League\n\n"
                "üìà **AGUARDANDO OPORTUNIDADES:**\n"
                "‚Ä¢ Nenhuma partida ativa no momento\n"
                "‚Ä¢ Sistema preparado para detectar value bets\n"
                "‚Ä¢ An√°lise autom√°tica quando houver partidas\n\n"
                "üìä **CONFIGURA√á√ïES DE RISCO:**\n"
                "‚Ä¢ Diversifica√ß√£o: M√∫ltiplas ligas\n"
                "‚Ä¢ Sistema de unidades ativo\n"
                "‚Ä¢ Stop-loss autom√°tico\n\n"
                "üîÑ **SISTEMA PREPARADO:**\n"
                "‚Ä¢ Probabilidades din√¢micas ‚úÖ\n"
                "‚Ä¢ Monitoramento 24/7 ‚úÖ\n"
                "‚Ä¢ API Riot integrada ‚úÖ\n"
                "‚Ä¢ Alertas autom√°ticos ‚úÖ\n\n"
                f"‚è∞ **Status:** Aguardando partidas - {datetime.now().strftime('%H:%M:%S')}"
            )
            
            return query.edit_message_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Sistema de Unidades
        elif query.data == "units":
            keyboard = [
                [InlineKeyboardButton("üí∞ Value Betting", callback_data="value"),
                 InlineKeyboardButton("üìä Ver Stats", callback_data="stats")],
                [InlineKeyboardButton("üí° Dicas Pro", callback_data="tips"),
                 InlineKeyboardButton("üìà Portfolio", callback_data="portfolio")],
                [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            message_text = (
                "üéØ **SISTEMA DE UNIDADES B√ÅSICAS**\n\n"
                "üí∞ **CONFIGURA√á√ÉO ATUAL:**\n"
                f"‚Ä¢ Unidade base: R$ {self.value_system.base_unit}\n"
                f"‚Ä¢ Banca total: R$ {self.value_system.bankroll:,}\n"
                f"‚Ä¢ M√°ximo por aposta: {self.value_system.max_units_per_bet} unidades\n"
                f"‚Ä¢ EV m√≠nimo: {self.value_system.ev_threshold*100}%\n\n"
                "üìä **CRIT√âRIOS DE UNIDADES:**\n\n"
                "üî• **EXPECTED VALUE (EV):**\n"
                "‚Ä¢ EV ‚â•8%: 2 unidades\n"
                "‚Ä¢ EV 5-8%: 1.5 unidades\n"
                "‚Ä¢ EV 3-5%: 1 unidade\n"
                "‚Ä¢ EV <3%: 0.5 unidade\n\n"
                "‚≠ê **CONFIAN√áA:**\n"
                "‚Ä¢ ‚â•85%: 2 unidades\n"
                "‚Ä¢ 75-85%: 1.5 unidades\n"
                "‚Ä¢ 65-75%: 1 unidade\n"
                "‚Ä¢ <65%: 0.5 unidade\n\n"
                "üéØ **C√ÅLCULO FINAL:**\n"
                "Unidades = (EV_units + Conf_units) √∑ 2\n"
                "M√°ximo: 3 unidades por aposta\n\n"
                "üõ°Ô∏è **GEST√ÉO DE RISCO:**\n"
                "‚Ä¢ M√°ximo 5% da banca por dia\n"
                "‚Ä¢ Diversifica√ß√£o obrigat√≥ria\n"
                "‚Ä¢ Stop-loss autom√°tico\n"
                "‚Ä¢ Reavalia√ß√£o a cada 100 apostas"
            )
            
            return query.edit_message_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Dicas Pro
        elif query.data == "tips":
            suggestions = self.value_system.get_portfolio_suggestions()
            
            keyboard = [
                [InlineKeyboardButton("üí∞ Value Betting", callback_data="value"),
                 InlineKeyboardButton("üéØ Sistema Unidades", callback_data="units")],
                [InlineKeyboardButton("üìà Portfolio", callback_data="portfolio"),
                 InlineKeyboardButton("üîÑ Atualizar Dicas", callback_data="tips")],
                [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            message_text = (
                "üí° **DICAS PROFISSIONAIS DE BETTING**\n\n"
                "üí∞ **GEST√ÉO DE BANCA:**\n" +
                "\n".join(f"‚Ä¢ {tip}" for tip in suggestions['bankroll_management']) + "\n\n"
                "üéØ **CA√áA AO VALUE:**\n" +
                "\n".join(f"‚Ä¢ {tip}" for tip in suggestions['value_hunting']) + "\n\n"
                "üõ°Ô∏è **GEST√ÉO DE RISCO:**\n" +
                "\n".join(f"‚Ä¢ {tip}" for tip in suggestions['risk_management']) + "\n\n"
                "üß† **DICAS AVAN√áADAS:**\n" +
                "\n".join(f"‚Ä¢ {tip}" for tip in suggestions['advanced_tips']) + "\n\n"
                "‚ö° **LEMBRE-SE:**\n"
                "‚Ä¢ Disciplina √© mais importante que sorte\n"
                "‚Ä¢ Value betting √© maratona, n√£o sprint\n"
                "‚Ä¢ Sempre mantenha registros detalhados\n"
                "‚Ä¢ Nunca aposte com emo√ß√£o"
            )
            
            return query.edit_message_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Demo Sistema
        elif query.data == "demo":
            keyboard = [
                [InlineKeyboardButton("üéØ An√°lise Avan√ßada", callback_data="demo_advanced"),
                 InlineKeyboardButton("üí∞ Value Demo", callback_data="demo_value")],
                [InlineKeyboardButton("üéÆ An√°lise Composi√ß√£o", callback_data="demo_draft"),
                 InlineKeyboardButton("üìä Performance Times", callback_data="demo_teams")],
                [InlineKeyboardButton("üîÑ Novo Demo", callback_data="demo"),
                 InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            demo_text = (
                "üé≤ **DEMONSTRA√á√ÉO DO SISTEMA AVAN√áADO**\n\n"
                "üß† **SISTEMA DE AN√ÅLISE COMPLETO:**\n"
                "‚Ä¢ An√°lise de composi√ß√µes e sinergias\n"
                "‚Ä¢ Performance individual de jogadores\n"
                "‚Ä¢ Dados hist√≥ricos e head-to-head\n"
                "‚Ä¢ Adapta√ß√£o √† meta atual (Patch 14.23)\n"
                "‚Ä¢ Contexto de torneio e press√£o\n\n"
                "üéØ **FATORES ANALISADOS:**\n"
                "‚Ä¢ **Rating dos times** (25%)\n"
                "‚Ä¢ **Forma recente** (20%)\n"
                "‚Ä¢ **Draft e composi√ß√£o** (15%)\n"
                "‚Ä¢ **Skill individual** (15%)\n"
                "‚Ä¢ **Meta fit** (10%)\n"
                "‚Ä¢ **Head-to-head** (10%)\n"
                "‚Ä¢ **Contexto torneio** (5%)\n\n"
                "üìä **DADOS DISPON√çVEIS:**\n"
                "‚Ä¢ Times: T1, Gen.G, JDG, BLG, G2, Fnatic, C9, LOUD\n"
                "‚Ä¢ Jogadores: Faker, Chovy, Canyon, Zeus, etc.\n"
                "‚Ä¢ Champions: Meta atual com sinergias\n"
                "‚Ä¢ Patches: Atualiza√ß√µes e mudan√ßas\n\n"
                "üëá **Escolha um tipo de demonstra√ß√£o:**"
            )
            
            return query.edit_message_text(
                demo_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Demo An√°lise Avan√ßada
        elif query.data == "demo_advanced":
            analysis = self.advanced_analyzer.analyze_comprehensive_match(
                'T1', 'Gen.G',
                team1_comp=['Aatrox', 'Graves', 'Azir', 'Jinx', 'Thresh'],
                team2_comp=['Jax', 'Nidalee', 'Orianna', 'Kai\'Sa', 'Nautilus'],
                tournament_type='worlds_2024'
            )
            
            keyboard = [
                [InlineKeyboardButton("üéÆ Ver Composi√ß√£o", callback_data="demo_draft"),
                 InlineKeyboardButton("üìä Ver Times", callback_data="demo_teams")],
                [InlineKeyboardButton("üîô Voltar Demo", callback_data="demo"),
                 InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            prob = analysis['probability']
            team_analysis = analysis['team_analysis']
            
            demo_text = (
                f"üéØ **AN√ÅLISE AVAN√áADA: T1 vs Gen.G**\n\n"
                f"üèÜ **RESULTADO DA AN√ÅLISE:**\n"
                f"‚Ä¢ T1: {prob['team1_probability']:.1%}\n"
                f"‚Ä¢ Gen.G: {prob['team2_probability']:.1%}\n"
                f"‚Ä¢ Confian√ßa: {prob['confidence']:.1%}\n\n"
                f"üìä **BREAKDOWN DOS FATORES:**\n"
                f"‚Ä¢ Rating base: {prob['factors_breakdown']['base_rating']:.3f}\n"
                f"‚Ä¢ Forma recente: {prob['factors_breakdown']['form_impact']:+.3f}\n"
                f"‚Ä¢ Draft: {prob['factors_breakdown']['draft_impact']:+.3f}\n"
                f"‚Ä¢ Jogadores: {prob['factors_breakdown']['player_impact']:+.3f}\n"
                f"‚Ä¢ Meta: {prob['factors_breakdown']['meta_impact']:+.3f}\n"
                f"‚Ä¢ H2H: {prob['factors_breakdown']['h2h_impact']:+.3f}\n\n"
                f"üéÆ **DADOS DOS TIMES:**\n"
                f"**T1:** Rating {team_analysis['team1']['rating']}, Forma {team_analysis['team1']['recent_form']:.1%}\n"
                f"**Gen.G:** Rating {team_analysis['team2']['rating']}, Forma {team_analysis['team2']['recent_form']:.1%}\n\n"
                f"üîç **AN√ÅLISE DETALHADA:**\n"
                f"{analysis['detailed_analysis']}\n\n"
                f"üìã **FATORES CHAVE:**\n" +
                "\n".join(f"‚Ä¢ {factor}" for factor in analysis['key_factors']) +
                f"\n\n‚ö° **Patch:** {analysis['patch_version']}"
            )
            
            return query.edit_message_text(
                demo_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Demo Value Betting
        elif query.data == "demo_value":
            keyboard = [
                [InlineKeyboardButton("üéØ An√°lise Avan√ßada", callback_data="demo_advanced"),
                 InlineKeyboardButton("üéÆ Ver Composi√ß√£o", callback_data="demo_draft")],
                [InlineKeyboardButton("üîô Voltar Demo", callback_data="demo"),
                 InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            demo_text = self.format_value_demo()
            
            return query.edit_message_text(
                demo_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Demo Draft Analysis
        elif query.data == "demo_draft":
            keyboard = [
                [InlineKeyboardButton("üéØ An√°lise Avan√ßada", callback_data="demo_advanced"),
                 InlineKeyboardButton("üí∞ Value Demo", callback_data="demo_value")],
                [InlineKeyboardButton("üîô Voltar Demo", callback_data="demo"),
                 InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            # An√°lise de draft espec√≠fica
            team1_comp = ['Aatrox', 'Graves', 'Azir', 'Jinx', 'Thresh']
            team2_comp = ['Jax', 'Nidalee', 'Orianna', 'Kai\'Sa', 'Nautilus']
            
            draft_analysis = self.advanced_analyzer._analyze_draft(team1_comp, team2_comp)
            
            demo_text = (
                "üéÆ **AN√ÅLISE DE COMPOSI√á√ÉO E DRAFT**\n\n"
                f"**T1 COMPOSI√á√ÉO:**\n"
                f"üîù {team1_comp[0]} | üå≤ {team1_comp[1]} | üéØ {team1_comp[2]} | üèπ {team1_comp[3]} | üõ°Ô∏è {team1_comp[4]}\n\n"
                f"**Gen.G COMPOSI√á√ÉO:**\n"
                f"üîù {team2_comp[0]} | üå≤ {team2_comp[1]} | üéØ {team2_comp[2]} | üèπ {team2_comp[3]} | üõ°Ô∏è {team2_comp[4]}\n\n"
                f"üìä **AN√ÅLISE DO DRAFT:**\n"
                f"‚Ä¢ T1 Tier Score: {draft_analysis['team1_tier_score']:.2f}\n"
                f"‚Ä¢ Gen.G Tier Score: {draft_analysis['team2_tier_score']:.2f}\n"
                f"‚Ä¢ T1 Sinergia: {draft_analysis['team1_synergy']:.2f}\n"
                f"‚Ä¢ Gen.G Sinergia: {draft_analysis['team2_synergy']:.2f}\n\n"
                f"‚ö° **POWER SPIKES:**\n"
                f"**T1:** Early {draft_analysis['team1_power_spikes']['early']}, Mid {draft_analysis['team1_power_spikes']['mid']}, Late {draft_analysis['team1_power_spikes']['late']}\n"
                f"**Gen.G:** Early {draft_analysis['team2_power_spikes']['early']}, Mid {draft_analysis['team2_power_spikes']['mid']}, Late {draft_analysis['team2_power_spikes']['late']}\n\n"
                f"üèÜ **VANTAGEM NO DRAFT:**\n"
                f"‚Ä¢ Vencedor: {draft_analysis['draft_winner'].upper()}\n"
                f"‚Ä¢ Magnitude: {draft_analysis['advantage_magnitude']:.3f}\n\n"
                f"üéØ **SINERGIAS PRINCIPAIS:**\n"
                f"‚Ä¢ Azir + Graves (controle de √°rea)\n"
                f"‚Ä¢ Jinx + Thresh (engage e prote√ß√£o)\n"
                f"‚Ä¢ Orianna + Nautilus (teamfight)\n"
                f"‚Ä¢ Kai'Sa + Nautilus (dive potential)\n\n"
                f"üîÑ **META PATCH 14.23:**\n"
                f"‚Ä¢ Champions S-tier: Azir, Graves, Thresh\n"
                f"‚Ä¢ Scaling meta favorece late game\n"
                f"‚Ä¢ Tank supports em alta"
            )
            
            return query.edit_message_text(
                demo_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Demo Team Performance
        elif query.data == "demo_teams":
            keyboard = [
                [InlineKeyboardButton("üéØ An√°lise Avan√ßada", callback_data="demo_advanced"),
                 InlineKeyboardButton("üéÆ Ver Composi√ß√£o", callback_data="demo_draft")],
                [InlineKeyboardButton("üîô Voltar Demo", callback_data="demo"),
                 InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            t1_data = self.advanced_analyzer.team_database['T1']
            geng_data = self.advanced_analyzer.team_database['Gen.G']
            
            demo_text = (
                "üìä **PERFORMANCE DETALHADA DOS TIMES**\n\n"
                f"üèÜ **T1 (Rating: {t1_data['rating']})**\n"
                f"‚Ä¢ Forma recente: {t1_data['recent_form']:.1%}\n"
                f"‚Ä¢ Consist√™ncia: {t1_data['consistency']:.1%}\n"
                f"‚Ä¢ Early game: {t1_data['early_game']:.1%}\n"
                f"‚Ä¢ Mid game: {t1_data['mid_game']:.1%}\n"
                f"‚Ä¢ Late game: {t1_data['late_game']:.1%}\n"
                f"‚Ä¢ Flexibilidade draft: {t1_data['draft_flexibility']:.1%}\n"
                f"‚Ä¢ Fator clutch: {t1_data['clutch_factor']:.1%}\n"
                f"‚Ä¢ Exp. internacional: {t1_data['international_exp']:.1%}\n"
                f"‚Ä¢ Adapta√ß√£o meta: {t1_data['meta_adaptation']:.1%}\n"
                f"‚Ä¢ Tempo m√©dio: {t1_data['avg_game_time']} min\n"
                f"‚Ä¢ First blood: {t1_data['first_blood_rate']:.1%}\n\n"
                f"‚öîÔ∏è **Gen.G (Rating: {geng_data['rating']})**\n"
                f"‚Ä¢ Forma recente: {geng_data['recent_form']:.1%}\n"
                f"‚Ä¢ Consist√™ncia: {geng_data['consistency']:.1%}\n"
                f"‚Ä¢ Early game: {geng_data['early_game']:.1%}\n"
                f"‚Ä¢ Mid game: {geng_data['mid_game']:.1%}\n"
                f"‚Ä¢ Late game: {geng_data['late_game']:.1%}\n"
                f"‚Ä¢ Flexibilidade draft: {geng_data['draft_flexibility']:.1%}\n"
                f"‚Ä¢ Fator clutch: {geng_data['clutch_factor']:.1%}\n"
                f"‚Ä¢ Exp. internacional: {geng_data['international_exp']:.1%}\n"
                f"‚Ä¢ Adapta√ß√£o meta: {geng_data['meta_adaptation']:.1%}\n"
                f"‚Ä¢ Tempo m√©dio: {geng_data['avg_game_time']} min\n"
                f"‚Ä¢ First blood: {geng_data['first_blood_rate']:.1%}\n\n"
                f"‚≠ê **JOGADORES DESTAQUE:**\n"
                f"**T1:** Faker (98), Zeus (95), Keria (96)\n"
                f"**Gen.G:** Chovy (96), Canyon (96), Kiin (90)\n\n"
                f"üìà **√öLTIMAS 5 PARTIDAS:**\n"
                f"**T1:** {''.join(['‚úÖ' if w else '‚ùå' for w in t1_data['recent_matches']])}\n"
                f"**Gen.G:** {''.join(['‚úÖ' if w else '‚ùå' for w in geng_data['recent_matches']])}\n\n"
                f"üéØ **VANTAGENS PRINCIPAIS:**\n"
                f"‚Ä¢ T1: Mid/late game, clutch factor\n"
                f"‚Ä¢ Gen.G: Consist√™ncia, late game"
            )
            
            return query.edit_message_text(
                demo_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Help/Ajuda
        elif query.data == "help":
            keyboard = [
                [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            message_text = (
                "üìö **GUIA COMPLETO DO BOT**\n\n"
                "üéØ **COMANDOS PRINCIPAIS:**\n"
                "‚Ä¢ `/start` - Iniciar o bot\n"
                "‚Ä¢ `/help` - Este guia\n"
                "‚Ä¢ `/partidas` - Partidas ao vivo\n"
                "‚Ä¢ `/stats` - Estat√≠sticas em tempo real\n"
                "‚Ä¢ `/value` - Value betting com unidades\n"
                "‚Ä¢ `/portfolio` - Dashboard do portfolio\n"
                "‚Ä¢ `/units` - Sistema de unidades b√°sicas\n"
                "‚Ä¢ `/tips` - Dicas profissionais de betting\n"
                "‚Ä¢ `/demo` - Exemplos pr√°ticos do sistema\n\n"
                "üéÆ **FUNCIONALIDADES:**\n"
                "‚Ä¢ Monitoramento de partidas ao vivo\n"
                "‚Ä¢ Estat√≠sticas detalhadas (gold, kills, objetivos)\n"
                "‚Ä¢ Probabilidades din√¢micas que evoluem\n"
                "‚Ä¢ Sistema de unidades baseado em EV + Confian√ßa\n"
                "‚Ä¢ An√°lise de portfolio em tempo real\n"
                "‚Ä¢ Dicas profissionais de gest√£o de banca\n\n"
                "üí∞ **SISTEMA DE UNIDADES:**\n"
                "‚Ä¢ EV Alto (8%+) = 2 unidades\n"
                "‚Ä¢ Confian√ßa Alta (85%+) = 2 unidades\n"
                "‚Ä¢ C√°lculo: (EV_units + Conf_units) √∑ 2\n"
                "‚Ä¢ M√°ximo: 3 unidades por aposta\n"
                "‚Ä¢ Gest√£o de risco inteligente\n\n"
                "üìä **M√âTRICAS DISPON√çVEIS:**\n"
                "‚Ä¢ Gold, kills, mortes, assists, CS\n"
                "‚Ä¢ Drag√µes, bar√µes, torres, inibidores\n"
                "‚Ä¢ Expected Value (EV) calculado\n"
                "‚Ä¢ An√°lise de confian√ßa por partida\n"
                "‚Ä¢ An√°lise por fase da partida (Early/Mid/Late)\n"
                "‚Ä¢ Vantagens calculadas dinamicamente\n\n"
                "üîÑ **Sistema atualizado em tempo real!**"
            )
            
            return query.edit_message_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Sistema
        elif query.data == "sistema":
            keyboard = [
                [InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            message_text = (
                "üéØ **STATUS DO SISTEMA**\n\n"
                "‚úÖ **COMPONENTES ATIVOS:**\n"
                "‚Ä¢ Bot Telegram: Online\n"
                "‚Ä¢ API Riot Games: Conectada\n"
                "‚Ä¢ Sistema de monitoramento: Ativo\n"
                "‚Ä¢ Health check: Operacional\n"
                "‚Ä¢ Analisador Avan√ßado: Ativo\n\n"
                "üîÑ **FUNCIONALIDADES:**\n"
                "‚Ä¢ Detec√ß√£o autom√°tica de partidas\n"
                "‚Ä¢ Estat√≠sticas em tempo real\n"
                "‚Ä¢ Value betting autom√°tico\n"
                "‚Ä¢ Portfolio management\n"
                "‚Ä¢ An√°lise avan√ßada de composi√ß√µes\n"
                "‚Ä¢ Performance de jogadores\n\n"
                "üìä **M√âTRICAS:**\n"
                f"‚Ä¢ Uptime: {datetime.now().strftime('%H:%M:%S')}\n"
                "‚Ä¢ Lat√™ncia: <100ms\n"
                "‚Ä¢ Status: Operacional\n"
                f"‚Ä¢ Patch: {self.advanced_analyzer.patch_version}\n\n"
                "‚ö° **Sistema preparado para detectar partidas!**"
            )
            
            return query.edit_message_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Demo An√°lise Avan√ßada
        elif query.data == "demo_advanced":
            analysis = self.advanced_analyzer.analyze_comprehensive_match(
                'T1', 'Gen.G',
                team1_comp=['Aatrox', 'Graves', 'Azir', 'Jinx', 'Thresh'],
                team2_comp=['Jax', 'Nidalee', 'Orianna', 'Kai\'Sa', 'Nautilus'],
                tournament_type='worlds_2024'
            )
            
            keyboard = [
                [InlineKeyboardButton("üéÆ Ver Composi√ß√£o", callback_data="demo_draft"),
                 InlineKeyboardButton("üìä Ver Times", callback_data="demo_teams")],
                [InlineKeyboardButton("üîô Voltar Demo", callback_data="demo"),
                 InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            prob = analysis['probability']
            team_analysis = analysis['team_analysis']
            
            demo_text = (
                f"üéØ **AN√ÅLISE AVAN√áADA: T1 vs Gen.G**\n\n"
                f"üèÜ **RESULTADO DA AN√ÅLISE:**\n"
                f"‚Ä¢ T1: {prob['team1_probability']:.1%}\n"
                f"‚Ä¢ Gen.G: {prob['team2_probability']:.1%}\n"
                f"‚Ä¢ Confian√ßa: {prob['confidence']:.1%}\n\n"
                f"üìä **BREAKDOWN DOS FATORES:**\n"
                f"‚Ä¢ Rating base: {prob['factors_breakdown']['base_rating']:.3f}\n"
                f"‚Ä¢ Forma recente: {prob['factors_breakdown']['form_impact']:+.3f}\n"
                f"‚Ä¢ Draft: {prob['factors_breakdown']['draft_impact']:+.3f}\n"
                f"‚Ä¢ Jogadores: {prob['factors_breakdown']['player_impact']:+.3f}\n"
                f"‚Ä¢ Meta: {prob['factors_breakdown']['meta_impact']:+.3f}\n"
                f"‚Ä¢ H2H: {prob['factors_breakdown']['h2h_impact']:+.3f}\n\n"
                f"üéÆ **DADOS DOS TIMES:**\n"
                f"**T1:** Rating {team_analysis['team1']['rating']}, Forma {team_analysis['team1']['recent_form']:.1%}\n"
                f"**Gen.G:** Rating {team_analysis['team2']['rating']}, Forma {team_analysis['team2']['recent_form']:.1%}\n\n"
                f"üîç **AN√ÅLISE DETALHADA:**\n"
                f"{analysis['detailed_analysis']}\n\n"
                f"üìã **FATORES CHAVE:**\n" +
                "\n".join(f"‚Ä¢ {factor}" for factor in analysis['key_factors']) +
                f"\n\n‚ö° **Patch:** {analysis['patch_version']}"
            )
            
            return query.edit_message_text(
                 demo_text,
                 parse_mode=ParseMode.MARKDOWN,
                 reply_markup=InlineKeyboardMarkup(keyboard)
             )
        
        # Demo Value Betting
        elif query.data == "demo_value":
            keyboard = [
                [InlineKeyboardButton("üéØ An√°lise Avan√ßada", callback_data="demo_advanced"),
                 InlineKeyboardButton("üéÆ Ver Composi√ß√£o", callback_data="demo_draft")],
                [InlineKeyboardButton("üîô Voltar Demo", callback_data="demo"),
                 InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            demo_text = self.format_value_demo()
            
            return query.edit_message_text(
                demo_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Demo Draft Analysis
        elif query.data == "demo_draft":
            keyboard = [
                [InlineKeyboardButton("üéØ An√°lise Avan√ßada", callback_data="demo_advanced"),
                 InlineKeyboardButton("üí∞ Value Demo", callback_data="demo_value")],
                [InlineKeyboardButton("üîô Voltar Demo", callback_data="demo"),
                 InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            # An√°lise de draft espec√≠fica
            team1_comp = ['Aatrox', 'Graves', 'Azir', 'Jinx', 'Thresh']
            team2_comp = ['Jax', 'Nidalee', 'Orianna', 'Kai\'Sa', 'Nautilus']
            
            draft_analysis = self.advanced_analyzer._analyze_draft(team1_comp, team2_comp)
            
            demo_text = (
                "üéÆ **AN√ÅLISE DE COMPOSI√á√ÉO E DRAFT**\n\n"
                f"**T1 COMPOSI√á√ÉO:**\n"
                f"üîù {team1_comp[0]} | üå≤ {team1_comp[1]} | üéØ {team1_comp[2]} | üèπ {team1_comp[3]} | üõ°Ô∏è {team1_comp[4]}\n\n"
                f"**Gen.G COMPOSI√á√ÉO:**\n"
                f"üîù {team2_comp[0]} | üå≤ {team2_comp[1]} | üéØ {team2_comp[2]} | üèπ {team2_comp[3]} | üõ°Ô∏è {team2_comp[4]}\n\n"
                f"üìä **AN√ÅLISE DO DRAFT:**\n"
                f"‚Ä¢ T1 Tier Score: {draft_analysis['team1_tier_score']:.2f}\n"
                f"‚Ä¢ Gen.G Tier Score: {draft_analysis['team2_tier_score']:.2f}\n"
                f"‚Ä¢ T1 Sinergia: {draft_analysis['team1_synergy']:.2f}\n"
                f"‚Ä¢ Gen.G Sinergia: {draft_analysis['team2_synergy']:.2f}\n\n"
                f"‚ö° **POWER SPIKES:**\n"
                f"**T1:** Early {draft_analysis['team1_power_spikes']['early']}, Mid {draft_analysis['team1_power_spikes']['mid']}, Late {draft_analysis['team1_power_spikes']['late']}\n"
                f"**Gen.G:** Early {draft_analysis['team2_power_spikes']['early']}, Mid {draft_analysis['team2_power_spikes']['mid']}, Late {draft_analysis['team2_power_spikes']['late']}\n\n"
                f"üèÜ **VANTAGEM NO DRAFT:**\n"
                f"‚Ä¢ Vencedor: {draft_analysis['draft_winner'].upper()}\n"
                f"‚Ä¢ Magnitude: {draft_analysis['advantage_magnitude']:.3f}\n\n"
                f"üéØ **SINERGIAS PRINCIPAIS:**\n"
                f"‚Ä¢ Azir + Graves (controle de √°rea)\n"
                f"‚Ä¢ Jinx + Thresh (engage e prote√ß√£o)\n"
                f"‚Ä¢ Orianna + Nautilus (teamfight)\n"
                f"‚Ä¢ Kai'Sa + Nautilus (dive potential)\n\n"
                f"üîÑ **META PATCH 14.23:**\n"
                f"‚Ä¢ Champions S-tier: Azir, Graves, Thresh\n"
                f"‚Ä¢ Scaling meta favorece late game\n"
                f"‚Ä¢ Tank supports em alta"
            )
            
            return query.edit_message_text(
                demo_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Demo Team Performance
        elif query.data == "demo_teams":
            keyboard = [
                [InlineKeyboardButton("üéØ An√°lise Avan√ßada", callback_data="demo_advanced"),
                 InlineKeyboardButton("üéÆ Ver Composi√ß√£o", callback_data="demo_draft")],
                [InlineKeyboardButton("üîô Voltar Demo", callback_data="demo"),
                 InlineKeyboardButton("üè† Menu Principal", callback_data="menu_principal")]
            ]
            
            t1_data = self.advanced_analyzer.team_database['T1']
            geng_data = self.advanced_analyzer.team_database['Gen.G']
            
            demo_text = (
                "üìä **PERFORMANCE DETALHADA DOS TIMES**\n\n"
                f"üèÜ **T1 (Rating: {t1_data['rating']})**\n"
                f"‚Ä¢ Forma recente: {t1_data['recent_form']:.1%}\n"
                f"‚Ä¢ Consist√™ncia: {t1_data['consistency']:.1%}\n"
                f"‚Ä¢ Early game: {t1_data['early_game']:.1%}\n"
                f"‚Ä¢ Mid game: {t1_data['mid_game']:.1%}\n"
                f"‚Ä¢ Late game: {t1_data['late_game']:.1%}\n"
                f"‚Ä¢ Flexibilidade draft: {t1_data['draft_flexibility']:.1%}\n"
                f"‚Ä¢ Fator clutch: {t1_data['clutch_factor']:.1%}\n"
                f"‚Ä¢ Exp. internacional: {t1_data['international_exp']:.1%}\n"
                f"‚Ä¢ Adapta√ß√£o meta: {t1_data['meta_adaptation']:.1%}\n"
                f"‚Ä¢ Tempo m√©dio: {t1_data['avg_game_time']} min\n"
                f"‚Ä¢ First blood: {t1_data['first_blood_rate']:.1%}\n\n"
                f"‚öîÔ∏è **Gen.G (Rating: {geng_data['rating']})**\n"
                f"‚Ä¢ Forma recente: {geng_data['recent_form']:.1%}\n"
                f"‚Ä¢ Consist√™ncia: {geng_data['consistency']:.1%}\n"
                f"‚Ä¢ Early game: {geng_data['early_game']:.1%}\n"
                f"‚Ä¢ Mid game: {geng_data['mid_game']:.1%}\n"
                f"‚Ä¢ Late game: {geng_data['late_game']:.1%}\n"
                f"‚Ä¢ Flexibilidade draft: {geng_data['draft_flexibility']:.1%}\n"
                f"‚Ä¢ Fator clutch: {geng_data['clutch_factor']:.1%}\n"
                f"‚Ä¢ Exp. internacional: {geng_data['international_exp']:.1%}\n"
                f"‚Ä¢ Adapta√ß√£o meta: {geng_data['meta_adaptation']:.1%}\n"
                f"‚Ä¢ Tempo m√©dio: {geng_data['avg_game_time']} min\n"
                f"‚Ä¢ First blood: {geng_data['first_blood_rate']:.1%}\n\n"
                f"‚≠ê **JOGADORES DESTAQUE:**\n"
                f"**T1:** Faker (98), Zeus (95), Keria (96)\n"
                f"**Gen.G:** Chovy (96), Canyon (96), Kiin (90)\n\n"
                f"üìà **√öLTIMAS 5 PARTIDAS:**\n"
                f"**T1:** {''.join(['‚úÖ' if w else '‚ùå' for w in t1_data['recent_matches']])}\n"
                f"**Gen.G:** {''.join(['‚úÖ' if w else '‚ùå' for w in geng_data['recent_matches']])}\n\n"
                f"üéØ **VANTAGENS PRINCIPAIS:**\n"
                f"‚Ä¢ T1: Mid/late game, clutch factor\n"
                f"‚Ä¢ Gen.G: Consist√™ncia, late game"
            )
            
            return query.edit_message_text(
                demo_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    def get_demo_value_analysis(self):
        """Demonstra an√°lise de value betting com exemplos"""
        # Simular diferentes cen√°rios de value betting
        scenarios = [
            {
                'match': 'T1 vs Gen.G',
                'our_prob': 0.72,
                'bookmaker_odds': 1.85,
                'scenario': 'EV Alto + Confian√ßa Alta'
            },
            {
                'match': 'G2 vs Fnatic', 
                'our_prob': 0.58,
                'bookmaker_odds': 2.10,
                'scenario': 'EV M√©dio + Confian√ßa M√©dia'
            },
            {
                'match': 'TSM vs C9',
                'our_prob': 0.65,
                'bookmaker_odds': 1.75,
                'scenario': 'EV Baixo + Confian√ßa Baixa'
            }
        ]
        
        analysis_results = []
        
        for scenario in scenarios:
            analysis = self.value_system.analyze_value_opportunity(
                scenario['our_prob'], 
                scenario['bookmaker_odds']
            )
            
            if analysis['has_value']:
                bet_info = analysis['bet_analysis']
                analysis_results.append({
                    'match': scenario['match'],
                    'scenario': scenario['scenario'],
                    'our_prob': scenario['our_prob'] * 100,
                    'implied_prob': (1/scenario['bookmaker_odds']) * 100,
                    'ev': analysis['ev'] * 100,
                    'confidence': analysis['confidence'] * 100,
                    'units': bet_info['units'],
                    'stake': bet_info['stake'],
                    'recommendation': bet_info['recommendation'],
                    'risk_level': analysis['risk_level']
                })
        
        return analysis_results
    
    def format_value_demo(self):
        """Formata demonstra√ß√£o do sistema de value betting"""
        demos = self.get_demo_value_analysis()
        
        demo_text = "üéØ **EXEMPLOS DE VALUE BETTING**\n\n"
        
        for i, demo in enumerate(demos, 1):
            demo_text += f"**{i}. {demo['match']}**\n"
            demo_text += f"‚Ä¢ Nossa probabilidade: {demo['our_prob']:.1f}%\n"
            demo_text += f"‚Ä¢ Prob. impl√≠cita: {demo['implied_prob']:.1f}%\n"
            demo_text += f"‚Ä¢ Expected Value: {demo['ev']:.1f}%\n"
            demo_text += f"‚Ä¢ Confian√ßa: {demo['confidence']:.1f}%\n"
            demo_text += f"‚Ä¢ **Unidades: {demo['units']}**\n"
            demo_text += f"‚Ä¢ **Stake: R$ {demo['stake']:.0f}**\n"
            demo_text += f"‚Ä¢ Risco: {demo['risk_level']}\n"
            demo_text += f"‚Ä¢ {demo['recommendation']}\n\n"
        
        demo_text += "üí° **OBSERVA√á√ïES:**\n"
        demo_text += "‚Ä¢ Unidades calculadas: (EV_units + Conf_units) √∑ 2\n"
        demo_text += "‚Ä¢ M√°ximo 3 unidades por aposta\n"
        demo_text += "‚Ä¢ Diversifica√ß√£o sempre recomendada\n"
        demo_text += "‚Ä¢ Gest√£o de risco priorit√°ria"
        
        return demo_text
    
    def run(self):
        """Executar o bot"""
        logger.info("üöÄ Iniciando Bot LoL V3...")
        
        if NEW_VERSION:
            # Vers√£o nova - usar run_polling
            self.application.run_polling()
        else:
            # Vers√£o antiga - usar start_polling + idle
            self.updater.start_polling()
            self.updater.idle()
            
        logger.info("‚úÖ Bot iniciado com sucesso!")

def main():
    """Fun√ß√£o principal"""
    try:
        bot = BotLoLV3Railway()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë Bot interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico: {e}")
        raise

if __name__ == "__main__":
    main() 
