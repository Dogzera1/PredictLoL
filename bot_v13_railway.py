#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BOT LOL V3 ULTRA AVAN√áADO - Vers√£o Railway Compat√≠vel
Sistema completo com valor betting, predi√ß√µes e an√°lise avan√ßada
Integra√ß√£o com API oficial da Riot Games + Sistema de Healthcheck
"""

import os
import sys
import time
import random
import asyncio
import logging
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
import json
import pytz

# Flask para health check
from flask import Flask, jsonify
import requests

# Detectar vers√£o do python-telegram-bot e importar adequadamente
try:
    # Tentar importar vers√£o v20+
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
    from telegram.error import TelegramError
    from telegram.constants import ParseMode
    TELEGRAM_VERSION = "v20+"
    logger = logging.getLogger(__name__)
    logger.info("üîç Detectada vers√£o python-telegram-bot v20+")
except ImportError:
    try:
        # Tentar importar vers√£o v13
        from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
        from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
        from telegram.error import TelegramError, Unauthorized, BadRequest, TimedOut, NetworkError
        TELEGRAM_VERSION = "v13"
        logger = logging.getLogger(__name__)
        logger.info("üîç Detectada vers√£o python-telegram-bot v13")
    except ImportError as e:
        print(f"‚ùå Erro ao importar python-telegram-bot: {e}")
        exit(1)

# Scientific computing
import numpy as np
import aiohttp

# Sistema de estat√≠sticas ao vivo
try:
    from live_match_stats_system import LiveMatchStatsSystem
    LIVE_STATS_AVAILABLE = True
    logger.info("‚úÖ Sistema de estat√≠sticas ao vivo carregado")
except ImportError as e:
    LIVE_STATS_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Sistema de estat√≠sticas n√£o dispon√≠vel: {e}")

# Sistema de Machine Learning
try:
    from ml_prediction_system import MLPredictionSystem
    ML_SYSTEM_AVAILABLE = True
    logger.info("‚úÖ Sistema de ML para predi√ß√µes carregado")
except ImportError as e:
    ML_SYSTEM_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Sistema de ML n√£o dispon√≠vel: {e}")
    # Tentar instalar depend√™ncias
    try:
        import subprocess
        import sys
        subprocess.check_call([sys.executable, "-m", "pip", "install", "scikit-learn", "pandas"])
        from ml_prediction_system import MLPredictionSystem
        ML_SYSTEM_AVAILABLE = True
        logger.info("‚úÖ Depend√™ncias instaladas e sistema ML carregado")
    except Exception as install_error:
        logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel instalar depend√™ncias ML: {install_error}")

# Sistema de Hist√≥rico de Apostas
try:
    from betting_history_system import BettingHistorySystem
    BETTING_HISTORY_AVAILABLE = True
    logger.info("‚úÖ Sistema de Hist√≥rico de Apostas carregado")
except ImportError as e:
    BETTING_HISTORY_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Sistema de Hist√≥rico n√£o dispon√≠vel: {e}")

# Configura√ß√µes
TOKEN = os.getenv('TELEGRAM_TOKEN', '7584060058:AAFTZcmirun47zLiCCm48Trre6c3oXnM-Cg')
OWNER_ID = int(os.getenv('OWNER_ID', '6404423764'))
PORT = int(os.getenv('PORT', 8000))

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# Flask app para healthcheck
app = Flask(__name__)

@app.route('/health')
def health_check():
    """Endpoint de health check para o Railway"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'service': 'bot_lol_v3_ultra_avancado',
        'version': TELEGRAM_VERSION,
        'features': ['value_betting', 'predictions', 'live_stats', 'draft_analysis', 'riot_api', 'machine_learning' if ML_SYSTEM_AVAILABLE else 'basic_ai', 'betting_history' if BETTING_HISTORY_AVAILABLE else 'no_history']
    })

@app.route('/')
def root():
    """Endpoint raiz"""
    return jsonify({
        'message': 'BOT LOL V3 ULTRA AVAN√áADO est√° funcionando!',
        'status': 'online',
        'telegram_version': TELEGRAM_VERSION,
        'features': {
            'value_betting': 'Sistema de apostas de valor',
            'predictions': 'Predi√ß√µes com Machine Learning' if ML_SYSTEM_AVAILABLE else 'Predi√ß√µes avan√ßadas com IA',
            'live_stats': 'Estat√≠sticas detalhadas ao vivo',
            'draft_analysis': 'An√°lise de composi√ß√µes',
            'riot_api': 'API oficial da Riot Games',
            'ml_system': 'Random Forest + Gradient Boosting' if ML_SYSTEM_AVAILABLE else 'Algoritmos propriet√°rios',
            'betting_history': 'Sistema completo de tracking' if BETTING_HISTORY_AVAILABLE else 'N√£o dispon√≠vel'
        }
    })

class RiotAPIClient:
    """Cliente para API da Riot Games com fallback"""
    
    def __init__(self):
        self.api_key = "0TvQnueqKa5mxJntVWt0w4LpLfEkrV1Ta8rQBb9Z"  # Chave oficial da documenta√ß√£o
        self.base_urls = {
            'esports': 'https://esports-api.lolesports.com/persisted/gw',
            'prod': 'https://prod-relapi.ewp.gg/persisted/gw'
        }
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'application/json',
            'Accept-Language': 'en-US,en;q=0.9',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'cross-site',
            'x-api-key': self.api_key
        }
        logger.info("üîó RiotAPIClient inicializado - API oficial da Riot Games")
    
    async def get_live_matches(self) -> List[Dict]:
        """Busca partidas ao vivo REAIS com m√∫ltiplas fontes"""
        logger.info("üîç Buscando partidas ao vivo da API oficial...")
        
        # Lista de endpoints para tentar
        endpoints = [
            f"{self.base_urls['esports']}/getLive?hl=pt-BR",
            f"{self.base_urls['esports']}/getSchedule?hl=pt-BR",
            "https://feed.lolesports.com/livestats/v1/scheduleItems",
            f"{self.base_urls['esports']}/getSchedule?hl=en-US",
            f"{self.base_urls['esports']}/getLive?hl=en-US"
        ]
        
        all_matches = []
        
        for endpoint in endpoints:
            try:
                logger.info(f"üåê Tentando endpoint: {endpoint}")
                
                async with aiohttp.ClientSession() as session:
                    async with session.get(endpoint, headers=self.headers, timeout=15) as response:
                        if response.status == 200:
                            data = await response.json()
                            logger.info(f"‚úÖ Resposta recebida do endpoint: {len(str(data))} caracteres")
                            
                            matches = self._extract_live_matches(data)
                            if matches:
                                logger.info(f"üéÆ {len(matches)} partidas encontradas em {endpoint}")
                                all_matches.extend(matches)
                                
                                if len(all_matches) >= 3:
                                    break
                            else:
                                logger.info(f"‚ÑπÔ∏è Nenhuma partida ao vivo encontrada em {endpoint}")
                        else:
                            logger.warning(f"‚ö†Ô∏è Endpoint retornou status {response.status}")
                            
            except Exception as e:
                logger.warning(f"‚ùå Erro no endpoint {endpoint}: {e}")
                continue
        
        # Remover duplicatas
        unique_matches = []
        seen_matches = set()
        
        for match in all_matches:
            teams = match.get('teams', [])
            if len(teams) >= 2:
                match_id = f"{teams[0].get('name', 'T1')}_{teams[1].get('name', 'T2')}"
                if match_id not in seen_matches:
                    seen_matches.add(match_id)
                    unique_matches.append(match)
        
        if unique_matches:
            logger.info(f"üéØ Total de {len(unique_matches)} partidas √∫nicas encontradas")
            return unique_matches
        else:
            logger.info("‚ÑπÔ∏è Nenhuma partida ao vivo encontrada")
            return []
    
    def _extract_live_matches(self, data: Dict) -> List[Dict]:
        """Extrai partidas ao vivo dos dados da API com m√∫ltiplos formatos"""
        matches = []
        
        try:
            # Tentar diferentes estruturas de dados
            possible_paths = [
                ['data', 'schedule', 'events'],
                ['data', 'events'],
                ['events'],
                ['data', 'live'],
                ['live'],
                ['matches'],
                ['data', 'matches'],
                ['scheduleItems']
            ]
            
            events = None
            for path in possible_paths:
                current = data
                for key in path:
                    if isinstance(current, dict) and key in current:
                        current = current[key]
                    else:
                        break
                else:
                    events = current
                    break
            
            if not events:
                return []
            
            if not isinstance(events, list):
                return []
            
            for event in events:
                if not isinstance(event, dict):
                    continue
                
                # Verificar se √© uma partida ao vivo
                status = self._extract_status(event)
                if status.lower() in ['live', 'inprogress', 'ongoing', 'started']:
                    teams = self._extract_teams(event)
                    if len(teams) >= 2:
                        match = {
                            'teams': teams,
                            'league': self._extract_league_name(event),
                            'status': status,
                            'start_time': event.get('startTime', ''),
                            'tournament': event.get('tournament', {}).get('name', 'Unknown Tournament')
                        }
                        matches.append(match)
            
            return matches
            
        except Exception as e:
            logger.error(f"Erro ao extrair partidas: {e}")
            return []
    
    def _extract_league_name(self, event: Dict) -> str:
        """Extrai nome da liga do evento"""
        possible_paths = [
            ['league', 'name'],
            ['tournament', 'league', 'name'],
            ['match', 'league', 'name'],
            ['leagueName'],
            ['league'],
            ['tournament', 'name']
        ]
        
        for path in possible_paths:
            current = event
            for key in path:
                if isinstance(current, dict) and key in current:
                    current = current[key]
                else:
                    break
            else:
                if isinstance(current, str):
                    return current
        
        return "Unknown League"
    
    def _extract_status(self, event: Dict) -> str:
        """Extrai status do evento"""
        possible_keys = ['status', 'state', 'matchStatus', 'gameState']
        
        for key in possible_keys:
            if key in event:
                return str(event[key])
        
        return "unknown"
    
    def _extract_teams(self, event: Dict) -> List[Dict]:
        """Extrai informa√ß√µes dos times"""
        teams = []
        
        # Tentar diferentes estruturas
        possible_paths = [
            ['teams'],
            ['match', 'teams'],
            ['competitors'],
            ['participants']
        ]
        
        teams_data = None
        for path in possible_paths:
            current = event
            for key in path:
                if isinstance(current, dict) and key in current:
                    current = current[key]
                else:
                    break
            else:
                teams_data = current
                break
        
        if teams_data and isinstance(teams_data, list):
            for team_data in teams_data:
                if isinstance(team_data, dict):
                    team = {
                        'name': team_data.get('name', team_data.get('teamName', 'Unknown Team')),
                        'code': team_data.get('code', team_data.get('tricode', '')),
                        'score': team_data.get('score', 0)
                    }
                    teams.append(team)
        
        return teams
    
    async def get_scheduled_matches(self, league_ids=None, limit=15):
        """Buscar partidas agendadas da API oficial com m√∫ltiplas fontes"""
        logger.info("üìÖ Buscando partidas agendadas da API oficial...")
        
        # Lista de endpoints para tentar
        endpoints = [
            f"{self.base_urls['esports']}/getSchedule?hl=pt-BR",
            f"{self.base_urls['esports']}/getSchedule?hl=en-US",
            "https://feed.lolesports.com/livestats/v1/scheduleItems",
            f"{self.base_urls['prod']}/getSchedule?hl=pt-BR"
        ]
        
        all_matches = []
        
        for endpoint in endpoints:
            try:
                logger.info(f"üåê Tentando endpoint de agenda: {endpoint}")
                
                async with aiohttp.ClientSession() as session:
                    async with session.get(endpoint, headers=self.headers, timeout=15) as response:
                        if response.status == 200:
                            data = await response.json()
                            logger.info(f"‚úÖ Resposta recebida: {len(str(data))} caracteres")
                            
                            matches = self._extract_scheduled_matches(data)
                            if matches:
                                logger.info(f"üìÖ {len(matches)} partidas agendadas encontradas em {endpoint}")
                                all_matches.extend(matches)
                                
                                if len(all_matches) >= limit:
                                    break
                            else:
                                logger.info(f"‚ÑπÔ∏è Nenhuma partida agendada encontrada em {endpoint}")
                        else:
                            logger.warning(f"‚ö†Ô∏è Endpoint retornou status {response.status}")
                            
            except Exception as e:
                logger.warning(f"‚ùå Erro no endpoint {endpoint}: {e}")
                continue
        
        # Se n√£o encontrou partidas reais, gerar algumas simuladas
        if not all_matches:
            logger.info("üé≠ Gerando partidas simuladas para demonstra√ß√£o")
            all_matches = self._generate_simulated_schedule(limit)
        
        # Remover duplicatas e limitar
        unique_matches = []
        seen_matches = set()
        
        for match in all_matches:
            teams = match.get('teams', [])
            if len(teams) >= 2:
                match_id = f"{teams[0].get('name', 'T1')}_{teams[1].get('name', 'T2')}"
                if match_id not in seen_matches:
                    seen_matches.add(match_id)
                    unique_matches.append(match)
                    
                    if len(unique_matches) >= limit:
                        break
        
        logger.info(f"üìä Total de {len(unique_matches)} partidas agendadas retornadas")
        return unique_matches
    
    def _extract_scheduled_matches(self, data: Dict) -> List[Dict]:
        """Extrai partidas agendadas dos dados da API"""
        matches = []
        
        try:
            # Tentar diferentes estruturas de dados
            possible_paths = [
                ['data', 'schedule', 'events'],
                ['data', 'events'],
                ['events'],
                ['data', 'schedule'],
                ['schedule'],
                ['matches'],
                ['data', 'matches'],
                ['scheduleItems']
            ]
            
            events = None
            for path in possible_paths:
                current = data
                for key in path:
                    if isinstance(current, dict) and key in current:
                        current = current[key]
                    else:
                        break
                else:
                    events = current
                    break
            
            if not events:
                return []
            
            if not isinstance(events, list):
                return []
            
            for event in events:
                if not isinstance(event, dict):
                    continue
                
                # Verificar se √© uma partida futura
                status = self._extract_status(event)
                if status.lower() in ['scheduled', 'upcoming', 'unstarted', 'future']:
                    teams = self._extract_teams(event)
                    if len(teams) >= 2:
                        match = {
                            'teams': teams,
                            'league': self._extract_league_name(event),
                            'status': status,
                            'startTime': event.get('startTime', event.get('scheduledTime', '')),
                            'tournament': event.get('tournament', {}).get('name', 'Unknown Tournament')
                        }
                        matches.append(match)
            
            return matches
            
        except Exception as e:
            logger.error(f"Erro ao extrair partidas agendadas: {e}")
            return []
    
    def _generate_simulated_schedule(self, limit: int) -> List[Dict]:
        """Gera agenda simulada para demonstra√ß√£o"""
        teams_by_league = {
            'LCK': [('T1', 'GEN'), ('DK', 'KT'), ('DRX', 'BRO'), ('NS', 'LSB')],
            'LPL': [('JDG', 'BLG'), ('WBG', 'TES'), ('EDG', 'IG'), ('LNG', 'WE')],
            'LEC': [('G2', 'FNC'), ('MAD', 'VIT'), ('SK', 'BDS'), ('XL', 'GX')],
            'LCS': [('C9', 'TL'), ('TSM', '100T'), ('FLY', 'EG'), ('DIG', 'IMT')],
            'CBLOL': [('LOUD', 'FURIA'), ('RED', 'KBM'), ('VK', 'PNG'), ('FLA', 'LOS')]
        }
        
        matches = []
        current_time = datetime.now()
        
        for i in range(limit):
            # Escolher liga aleat√≥ria
            league = random.choice(list(teams_by_league.keys()))
            team_pair = random.choice(teams_by_league[league])
            
            # Gerar hor√°rio futuro
            hours_ahead = random.randint(1, 72)  # 1 a 72 horas no futuro
            match_time = current_time + timedelta(hours=hours_ahead)
            
            match = {
                'teams': [
                    {'name': team_pair[0], 'code': team_pair[0][:3], 'score': 0},
                    {'name': team_pair[1], 'code': team_pair[1][:3], 'score': 0}
                ],
                'league': league,
                'status': 'scheduled',
                'startTime': match_time.isoformat() + 'Z',
                'tournament': f'{league} 2024 Split'
            }
            matches.append(match)
        
        # Ordenar por hor√°rio
        matches.sort(key=lambda x: x['startTime'])
        
        return matches

class ValueBettingSystem:
    """Sistema de Value Betting com an√°lise avan√ßada"""
    
    def __init__(self, riot_client=None, alert_system=None):
        self.riot_client = riot_client or RiotAPIClient()
        self.alert_system = alert_system
        self.opportunities = []
        self.monitoring = False
        self.last_scan = None
        logger.info("üí∞ Sistema de Value Betting inicializado")
    
    def start_monitoring(self):
        """Inicia monitoramento cont√≠nuo de oportunidades"""
        if not self.monitoring:
            self.monitoring = True
            threading.Thread(target=self._monitor_loop, daemon=True).start()
            logger.info("üîÑ Monitoramento de value betting iniciado")
    
    def _monitor_loop(self):
        """Loop principal de monitoramento"""
        while self.monitoring:
            try:
                self._scan_for_opportunities()
                time.sleep(300)  # Scan a cada 5 minutos
            except Exception as e:
                logger.error(f"Erro no monitoramento: {e}")
                time.sleep(60)
    
    def _scan_for_opportunities(self):
        """Escaneia por oportunidades de value betting"""
        try:
            # Buscar partidas ao vivo
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            live_matches = loop.run_until_complete(self.riot_client.get_live_matches())
            loop.close()
            
            new_opportunities = []
            
            for match in live_matches:
                opportunity = self._analyze_match_value(match)
                if opportunity:
                    new_opportunities.append(opportunity)
                    
                    # Enviar alerta se sistema de alertas estiver dispon√≠vel
                    if self.alert_system and opportunity['value_percentage'] >= 5:
                        self.alert_system.send_value_alert(opportunity)
                    
                    # Registrar no hist√≥rico se dispon√≠vel
                    if hasattr(self, 'betting_history') and self.betting_history and opportunity['value_percentage'] >= 5:
                        self.betting_history.add_bet(opportunity)
            
            # Atualizar lista de oportunidades
            self.opportunities = new_opportunities
            self.last_scan = datetime.now()
            
            if new_opportunities:
                logger.info(f"üíé {len(new_opportunities)} oportunidades de value encontradas")
            
        except Exception as e:
            logger.error(f"Erro ao escanear oportunidades: {e}")
    
    def _analyze_match_value(self, match: Dict) -> Optional[Dict]:
        """Analisa uma partida para encontrar value"""
        try:
            teams = match.get('teams', [])
            if len(teams) < 2:
                return None
            
            team1 = teams[0]['name']
            team2 = teams[1]['name']
            league = match.get('league', 'Unknown')
            
            # Calcular for√ßa dos times
            team1_strength = self._calculate_team_strength(team1, league)
            team2_strength = self._calculate_team_strength(team2, league)
            
            # Calcular probabilidade real
            total_strength = team1_strength + team2_strength
            team1_prob = team1_strength / total_strength if total_strength > 0 else 0.5
            team2_prob = team2_strength / total_strength if total_strength > 0 else 0.5
            
            # Simular odds do mercado (normalmente seria obtido de casas de apostas)
            market_odds_team1 = 1 / (team1_prob * 0.95)  # 5% de margem da casa
            market_odds_team2 = 1 / (team2_prob * 0.95)
            
            # Calcular value
            expected_value_team1 = (team1_prob * market_odds_team1) - 1
            expected_value_team2 = (team2_prob * market_odds_team2) - 1
            
            # Verificar se h√° value significativo (>5%)
            if expected_value_team1 > 0.05:
                return self._create_value_opportunity(
                    match, team1, team2, expected_value_team1, 
                    team1_prob, market_odds_team1, 1
                )
            elif expected_value_team2 > 0.05:
                return self._create_value_opportunity(
                    match, team1, team2, expected_value_team2, 
                    team2_prob, market_odds_team2, 2
                )
            
            return None
            
        except Exception as e:
            logger.error(f"Erro ao analisar value da partida: {e}")
            return None
    
    def _calculate_team_strength(self, team_name: str, league: str) -> float:
        """Calcula for√ßa do time baseado em dados hist√≥ricos"""
        # Base strength por liga
        league_multipliers = {
            'LCK': 1.0, 'LPL': 0.95, 'LEC': 0.85, 'LCS': 0.8,
            'CBLOL': 0.7, 'LJL': 0.65, 'PCS': 0.6, 'VCS': 0.55
        }
        
        base_multiplier = league_multipliers.get(league.upper(), 0.5)
        
        # For√ßa base dos times conhecidos
        team_strengths = {
            # LCK
            'T1': 95, 'GEN': 90, 'DK': 88, 'KT': 85, 'DRX': 82,
            # LPL  
            'JDG': 92, 'BLG': 90, 'WBG': 87, 'TES': 85, 'EDG': 83,
            # LEC
            'G2': 88, 'FNC': 85, 'MAD': 82, 'VIT': 80, 'SK': 78,
            # LCS
            'C9': 82, 'TL': 80, 'TSM': 78, '100T': 76, 'FLY': 74,
            # CBLOL
            'LOUD': 75, 'FURIA': 73, 'RED': 70, 'KBM': 68, 'VK': 66
        }
        
        # Buscar for√ßa do time (case insensitive)
        base_strength = 60  # For√ßa padr√£o
        for team, strength in team_strengths.items():
            if team.lower() in team_name.lower() or team_name.lower() in team.lower():
                base_strength = strength
                break
        
        # Aplicar multiplicador da liga
        final_strength = base_strength * base_multiplier
        
        # Adicionar varia√ß√£o aleat√≥ria para simular forma atual
        variation = random.uniform(0.9, 1.1)
        final_strength *= variation
        
        return max(final_strength, 30)  # M√≠nimo de 30
    
    def _create_value_opportunity(self, match: Dict, team1: str, team2: str, 
                                value: float, prob: float, odds: float, favored_team: int) -> Dict:
        """Cria objeto de oportunidade de value"""
        favored_team_name = team1 if favored_team == 1 else team2
        
        # Determinar confian√ßa
        confidence = 'Alta' if value > 0.15 else 'M√©dia' if value > 0.08 else 'Baixa'
        
        # Calcular unidades usando o sistema de unidades
        units_system = UnitsSystem()
        units_data = units_system.calculate_units(prob, odds, confidence)
        
        opportunity = {
            'id': f"{team1}_{team2}_{int(time.time())}",
            'match': f"{team1} vs {team2}",
            'league': match.get('league', 'Unknown'),
            'favored_team': favored_team_name,
            'win_probability': prob,
            'market_odds': odds,
            'expected_value': value,
            'value_percentage': value * 100,
            'units': units_data['units'],
            'stake_amount': units_data['stake_amount'],
            'confidence': confidence,
            'recommendation': units_data['recommendation'],
            'risk_level': units_data['risk_level'],
            'timestamp': datetime.now(),
            'status': 'Ativa'
        }
        
        return opportunity
    
    def get_current_opportunities(self) -> List[Dict]:
        """Retorna oportunidades atuais"""
        # Filtrar oportunidades antigas (mais de 2 horas)
        current_time = datetime.now()
        active_opportunities = []
        
        for opp in self.opportunities:
            if (current_time - opp['timestamp']).seconds < 7200:  # 2 horas
                active_opportunities.append(opp)
        
        return active_opportunities

class UnitsSystem:
    """Sistema de Unidades Otimizado para gest√£o de apostas"""
    
    def __init__(self):
        self.base_unit = 100  # R$ 100 por unidade
        self.bankroll = 10000  # R$ 10.000
        self.max_units_per_bet = 3  # M√°ximo 3 unidades por aposta
        self.min_units_per_bet = 0.25  # M√≠nimo 0.25 unidades
        
        # Configura√ß√µes avan√ßadas
        self.kelly_factor = 0.25  # Fator conservador do Kelly (25% do Kelly completo)
        self.confidence_weight = 0.4  # Peso da confian√ßa no c√°lculo final
        self.ev_weight = 0.6  # Peso do EV no c√°lculo final
        
        logger.info("üéØ Sistema de Unidades Otimizado inicializado")
    
    def calculate_units(self, win_prob: float, odds: float, confidence: str) -> Dict:
        """Calcula unidades baseado em EV, probabilidade e confian√ßa (vers√£o otimizada)"""
        try:
            # Calcular Expected Value
            ev = (win_prob * odds) - 1
            ev_percentage = ev * 100
            
            # Sistema de pontua√ß√£o por EV (mais granular)
            ev_score = self._calculate_ev_score(ev_percentage)
            
            # Sistema de pontua√ß√£o por confian√ßa (mais granular)
            confidence_score = self._calculate_confidence_score(confidence, ev_percentage)
            
            # Fator de probabilidade (apostas mais seguras = ligeiro boost)
            probability_factor = self._calculate_probability_factor(win_prob)
            
            # C√°lculo Kelly Criterion modificado
            kelly_units = self._calculate_kelly_units(win_prob, odds)
            
            # Combina√ß√£o inteligente dos fatores
            combined_score = (
                ev_score * self.ev_weight + 
                confidence_score * self.confidence_weight
            ) * probability_factor
            
            # Unidades baseadas na combina√ß√£o, limitadas pelo Kelly
            base_units = min(combined_score, kelly_units)
            
            # Aplicar limites finais
            final_units = max(self.min_units_per_bet, min(self.max_units_per_bet, base_units))
            final_units = round(final_units * 4) / 4  # Arredondar para 0.25
            
            # Calcular valor em reais
            stake_amount = final_units * self.base_unit
            
            # An√°lise de risco avan√ßada
            risk_analysis = self._advanced_risk_analysis(final_units, ev_percentage, confidence, win_prob)
            
            return {
                'units': final_units,
                'stake_amount': stake_amount,
                'ev_percentage': ev_percentage,
                'confidence_score': confidence_score,
                'ev_score': ev_score,
                'probability_factor': probability_factor,
                'kelly_units': kelly_units,
                'combined_score': combined_score,
                'risk_level': risk_analysis['risk_level'],
                'recommendation': risk_analysis['recommendation'],
                'detailed_analysis': risk_analysis['detailed_analysis'],
                'bankroll_percentage': (stake_amount / self.bankroll) * 100,
                'confidence_factor': confidence_score / 3.0,  # Normalizado para compatibilidade
                'probability_factor_legacy': probability_factor  # Para compatibilidade
            }
            
        except Exception as e:
            logger.error(f"Erro no c√°lculo de unidades: {e}")
            return {'units': 0, 'stake_amount': 0, 'ev_percentage': 0}
    
    def _calculate_ev_score(self, ev_percentage: float) -> float:
        """Calcula pontua√ß√£o baseada no EV (sistema mais granular)"""
        if ev_percentage >= 20:
            return 3.0  # EV excepcional
        elif ev_percentage >= 15:
            return 2.8  # EV muito alto
        elif ev_percentage >= 12:
            return 2.5  # EV alto
        elif ev_percentage >= 10:
            return 2.2  # EV bom
        elif ev_percentage >= 8:
            return 1.8  # EV m√©dio-alto
        elif ev_percentage >= 6:
            return 1.5  # EV m√©dio
        elif ev_percentage >= 4:
            return 1.0  # EV baixo-m√©dio
        elif ev_percentage >= 2:
            return 0.7  # EV baixo
        else:
            return 0.3  # EV muito baixo
    
    def _calculate_confidence_score(self, confidence: str, ev_percentage: float) -> float:
        """Calcula pontua√ß√£o baseada na confian√ßa (correlacionada com EV)"""
        base_scores = {
            'Alta': 3.0,
            'M√©dia': 2.0,
            'Baixa': 1.0
        }
        
        base_score = base_scores.get(confidence, 0.5)
        
        # Boost adicional quando confian√ßa alta coincide com EV alto
        if confidence == 'Alta' and ev_percentage >= 10:
            base_score *= 1.2  # 20% de boost
        elif confidence == 'Alta' and ev_percentage >= 7:
            base_score *= 1.1  # 10% de boost
        elif confidence == 'M√©dia' and ev_percentage >= 12:
            base_score *= 1.15  # Confian√ßa m√©dia mas EV muito alto
        
        # Penalidade quando confian√ßa n√£o condiz com EV
        if confidence == 'Alta' and ev_percentage < 5:
            base_score *= 0.8  # Reduz 20%
        elif confidence == 'Baixa' and ev_percentage >= 15:
            base_score *= 1.3  # EV alto compensa confian√ßa baixa
        
        return min(3.0, base_score)  # M√°ximo 3.0
    
    def _calculate_probability_factor(self, win_prob: float) -> float:
        """Calcula fator baseado na probabilidade de vit√≥ria"""
        if win_prob >= 0.75:
            return 1.15  # Apostas muito seguras
        elif win_prob >= 0.65:
            return 1.10  # Apostas seguras
        elif win_prob >= 0.55:
            return 1.05  # Ligeiramente favor√°vel
        elif win_prob >= 0.45:
            return 1.0   # Equilibrado
        elif win_prob >= 0.35:
            return 0.95  # Ligeiramente desfavor√°vel
        else:
            return 0.90  # Apostas arriscadas
    
    def _calculate_kelly_units(self, win_prob: float, odds: float) -> float:
        """Calcula unidades usando Kelly Criterion modificado"""
        try:
            # Kelly = (bp - q) / b
            # onde b = odds - 1, p = win_prob, q = 1 - win_prob
            b = odds - 1
            p = win_prob
            q = 1 - win_prob
            
            if b <= 0:
                return 0
            
            kelly_fraction = (b * p - q) / b
            
            # Aplicar fator conservador
            conservative_kelly = kelly_fraction * self.kelly_factor
            
            # Converter para unidades (assumindo que 1 unidade = 1% do bankroll)
            kelly_units = conservative_kelly * 100 / (self.base_unit / self.bankroll * 100)
            
            return max(0, min(self.max_units_per_bet, kelly_units))
            
        except Exception as e:
            logger.warning(f"Erro no c√°lculo Kelly: {e}")
            return 1.0  # Valor padr√£o conservador
    
    def _advanced_risk_analysis(self, units: float, ev_percentage: float, 
                               confidence: str, win_prob: float) -> Dict:
        """An√°lise de risco avan√ßada"""
        
        # Calcular score de risco
        risk_factors = []
        
        # Fator de unidades
        if units >= 2.5:
            risk_factors.append(('units_high', 3))
        elif units >= 1.5:
            risk_factors.append(('units_medium', 2))
        else:
            risk_factors.append(('units_low', 1))
        
        # Fator de EV
        if ev_percentage >= 10:
            risk_factors.append(('ev_excellent', 1))
        elif ev_percentage >= 6:
            risk_factors.append(('ev_good', 1))
        elif ev_percentage >= 3:
            risk_factors.append(('ev_medium', 2))
        else:
            risk_factors.append(('ev_low', 3))
        
        # Fator de confian√ßa
        confidence_risk = {'Alta': 1, 'M√©dia': 2, 'Baixa': 3}
        risk_factors.append(('confidence', confidence_risk.get(confidence, 3)))
        
        # Fator de probabilidade
        if win_prob >= 0.7:
            risk_factors.append(('prob_safe', 1))
        elif win_prob >= 0.5:
            risk_factors.append(('prob_medium', 2))
        else:
            risk_factors.append(('prob_risky', 3))
        
        # Calcular risco m√©dio
        avg_risk = sum(factor[1] for factor in risk_factors) / len(risk_factors)
        
        # Determinar n√≠vel de risco
        if avg_risk <= 1.5:
            risk_level = "Muito Baixo"
            risk_emoji = "üü¢"
        elif avg_risk <= 2.0:
            risk_level = "Baixo"
            risk_emoji = "üü°"
        elif avg_risk <= 2.5:
            risk_level = "M√©dio"
            risk_emoji = "üü†"
        else:
            risk_level = "Alto"
            risk_emoji = "üî¥"
        
        # Gerar recomenda√ß√£o
        recommendation = self._generate_advanced_recommendation(
            units, ev_percentage, confidence, risk_level
        )
        
        # An√°lise detalhada
        detailed_analysis = {
            'risk_factors': risk_factors,
            'avg_risk_score': avg_risk,
            'bankroll_exposure': (units * self.base_unit / self.bankroll) * 100,
            'kelly_compliance': units <= self._calculate_kelly_units(win_prob, 2.0),  # Teste conservador
            'ev_quality': 'Excelente' if ev_percentage >= 10 else 'Bom' if ev_percentage >= 6 else 'M√©dio' if ev_percentage >= 3 else 'Baixo'
        }
        
        return {
            'risk_level': risk_level,
            'risk_emoji': risk_emoji,
            'recommendation': recommendation,
            'detailed_analysis': detailed_analysis
        }
    
    def _generate_advanced_recommendation(self, units: float, ev_percentage: float, 
                                        confidence: str, risk_level: str) -> str:
        """Gera recomenda√ß√£o avan√ßada baseada em m√∫ltiplos fatores"""
        
        if units >= 2.5 and ev_percentage >= 12 and confidence == 'Alta':
            return "üî• APOSTA EXCEPCIONAL - M√°xima prioridade, oportunidade premium"
        elif units >= 2.0 and ev_percentage >= 8 and confidence in ['Alta', 'M√©dia']:
            return "‚≠ê APOSTA PREMIUM - Muito forte, alta recomenda√ß√£o"
        elif units >= 1.5 and ev_percentage >= 6:
            return "‚úÖ APOSTA FORTE - Boa oportunidade, recomendada"
        elif units >= 1.0 and ev_percentage >= 4:
            return "üëç APOSTA S√ìLIDA - Oportunidade v√°lida, considerar"
        elif units >= 0.75 and ev_percentage >= 2:
            return "‚ö†Ô∏è APOSTA CAUTELOSA - Valor marginal, avaliar contexto"
        elif units >= 0.5:
            return "üí° APOSTA ESPECULATIVA - Apenas para carteira diversificada"
        else:
            return "‚ùå APOSTA FRACA - Evitar, risco muito alto"
    
    def get_units_explanation(self, units_data: Dict) -> str:
        """Gera explica√ß√£o detalhada do c√°lculo de unidades"""
        explanation = (
            f"üéØ **AN√ÅLISE DETALHADA DAS UNIDADES**\n\n"
            f"üìä **Unidades Calculadas:** {units_data['units']}\n"
            f"üí∞ **Valor da Aposta:** R$ {units_data['stake_amount']:.2f}\n"
            f"üìà **Expected Value:** {units_data['ev_percentage']:.1f}%\n"
            f"üè¶ **% do Bankroll:** {units_data['bankroll_percentage']:.2f}%\n\n"
            
            f"üîç **FATORES DE C√ÅLCULO:**\n"
            f"‚Ä¢ **Score EV:** {units_data['ev_score']:.1f}/3.0\n"
            f"‚Ä¢ **Score Confian√ßa:** {units_data['confidence_score']:.1f}/3.0\n"
            f"‚Ä¢ **Fator Probabilidade:** {units_data['probability_factor']:.2f}\n"
            f"‚Ä¢ **Kelly Sugerido:** {units_data['kelly_units']:.2f} unidades\n"
            f"‚Ä¢ **Score Combinado:** {units_data['combined_score']:.2f}\n\n"
            
            f"{units_data['detailed_analysis']['risk_emoji']} **Risco:** {units_data['risk_level']}\n"
            f"üí° **Recomenda√ß√£o:** {units_data['recommendation']}\n\n"
            
            f"üìã **QUALIDADE DA OPORTUNIDADE:**\n"
            f"‚Ä¢ **EV:** {units_data['detailed_analysis']['ev_quality']}\n"
            f"‚Ä¢ **Exposi√ß√£o:** {units_data['detailed_analysis']['bankroll_exposure']:.2f}% do bankroll\n"
            f"‚Ä¢ **Kelly Compliance:** {'‚úÖ' if units_data['detailed_analysis']['kelly_compliance'] else '‚ö†Ô∏è'}"
        )
        
        return explanation

class AlertSystem:
    """Sistema de alertas para grupos do Telegram"""
    
    def __init__(self, bot_instance=None):
        self.bot_instance = bot_instance
        self.subscribed_groups = set()
        self.last_alert_time = {}
        self.alert_cooldown = 300  # 5 minutos entre alertas
        logger.info("üö® Sistema de Alertas inicializado")
    
    def subscribe_group(self, chat_id: int) -> bool:
        """Inscrever grupo para receber alertas"""
        try:
            self.subscribed_groups.add(chat_id)
            logger.info(f"‚úÖ Grupo {chat_id} inscrito para alertas")
            return True
        except Exception as e:
            logger.error(f"Erro ao inscrever grupo {chat_id}: {e}")
            return False
    
    def unsubscribe_group(self, chat_id: int) -> bool:
        """Desinscrever grupo dos alertas"""
        try:
            self.subscribed_groups.discard(chat_id)
            logger.info(f"‚ùå Grupo {chat_id} desinscrito dos alertas")
            return True
        except Exception as e:
            logger.error(f"Erro ao desinscrever grupo {chat_id}: {e}")
            return False
    
    def send_value_alert(self, opportunity: Dict) -> None:
        """Enviar alerta de value betting para grupos inscritos"""
        try:
            current_time = datetime.now()
            
            # Verificar cooldown
            if (opportunity['id'] in self.last_alert_time and 
                (current_time - self.last_alert_time[opportunity['id']]).seconds < self.alert_cooldown):
                return
            
            # Criar mensagem de alerta
            alert_message = self._create_alert_message(opportunity)
            
            # Enviar para todos os grupos inscritos
            for chat_id in self.subscribed_groups.copy():
                try:
                    if self.bot_instance:
                        self.bot_instance.send_message(
                            chat_id=chat_id,
                            text=alert_message,
                            parse_mode=ParseMode.MARKDOWN
                        )
                        logger.info(f"üö® Alerta enviado para grupo {chat_id}")
                except Exception as e:
                    logger.error(f"Erro ao enviar alerta para grupo {chat_id}: {e}")
                    # Remover grupo se bot foi removido
                    if "bot was blocked" in str(e) or "chat not found" in str(e):
                        self.subscribed_groups.discard(chat_id)
            
            # Atualizar √∫ltimo envio
            self.last_alert_time[opportunity['id']] = current_time
            
        except Exception as e:
            logger.error(f"Erro no sistema de alertas: {e}")
    
    def _create_alert_message(self, opportunity: Dict) -> str:
        """Criar mensagem de alerta formatada"""
        confidence_emoji = "üî•" if opportunity['confidence'] == 'Alta' else "‚ö°" if opportunity['confidence'] == 'M√©dia' else "üí°"
        
        message = (
            f"üö® **ALERTA VALUE BETTING** {confidence_emoji}\n\n"
            f"üéÆ **{opportunity['match']}**\n"
            f"üèÜ **Liga:** {opportunity['league']}\n"
            f"üéØ **Favorito:** {opportunity['favored_team']}\n"
            f"üìä **Probabilidade:** {opportunity['win_probability']:.1%}\n"
            f"üí∞ **Odds:** {opportunity['market_odds']:.2f}\n"
            f"üìà **Value:** {opportunity['value_percentage']:.1f}%\n"
            f"üé≤ **Unidades:** {opportunity.get('units', 'N/A')}\n"
            f"{confidence_emoji} **Confian√ßa:** {opportunity['confidence']}\n\n"
            f"‚è∞ **Detectado:** {opportunity['timestamp'].strftime('%H:%M:%S')}\n"
            f"ü§ñ **BOT LOL V3 ULTRA AVAN√áADO**"
        )
        
        return message
    
    def get_subscribed_groups_count(self) -> int:
        """Retornar n√∫mero de grupos inscritos"""
        return len(self.subscribed_groups)





class DynamicPredictionSystem:
    """Sistema de predi√ß√µes din√¢micas com IA"""
    
    def __init__(self):
        self.prediction_cache = {}
        self.model_weights = {
            'team_strength': 0.3,
            'recent_form': 0.25,
            'head_to_head': 0.2,
            'meta_adaptation': 0.15,
            'player_performance': 0.1
        }
        logger.info("üîÆ Sistema de Predi√ß√µes Din√¢micas inicializado")
    
    async def predict_live_match(self, match: Dict) -> Dict:
        """Prediz resultado de uma partida ao vivo"""
        try:
            teams = match.get('teams', [])
            if len(teams) < 2:
                return self._get_fallback_prediction()
            
            team1 = teams[0]['name']
            team2 = teams[1]['name']
            league = match.get('league', 'Unknown')
            
            # Coletar dados dos times
            team1_data = await self._collect_team_data(team1, league)
            team2_data = await self._collect_team_data(team2, league)
            
            # Calcular probabilidades
            base_prob = self._calculate_base_probability(team1_data, team2_data)
            
            # Aplicar ajustes
            region_adj = self._calculate_region_adjustment(team1_data, team2_data)
            form_adj = self._calculate_form_adjustment(team1_data, team2_data)
            
            # Probabilidade final
            final_prob = base_prob + region_adj + form_adj
            final_prob = max(0.1, min(0.9, final_prob))  # Limitar entre 10% e 90%
            
            # Gerar predi√ß√£o completa
            prediction = {
                'match': f"{team1} vs {team2}",
                'league': league,
                'team1': team1,
                'team2': team2,
                'team1_win_probability': final_prob,
                'team2_win_probability': 1 - final_prob,
                'predicted_winner': team1 if final_prob > 0.5 else team2,
                'confidence': self._calculate_confidence(team1_data, team2_data),
                'score_prediction': f"2-{random.choice([0, 1])}" if final_prob > 0.6 else f"{random.choice([1, 2])}-2",
                'key_factors': self._generate_match_analysis(team1, team2, team1_data, team2_data, final_prob),
                'timestamp': datetime.now(),
                'model_version': '3.1.0'
            }
            
            return prediction
            
        except Exception as e:
            logger.error(f"Erro na predi√ß√£o: {e}")
            return self._get_fallback_prediction()
    
    async def _collect_team_data(self, team: str, league: str) -> Dict:
        """Coleta dados abrangentes de um time"""
        # Simular coleta de dados (em produ√ß√£o seria de APIs reais)
        base_ratings = {
            'T1': 95, 'GEN': 90, 'DK': 88, 'KT': 85, 'DRX': 82,
            'JDG': 92, 'BLG': 90, 'WBG': 87, 'TES': 85, 'EDG': 83,
            'G2': 88, 'FNC': 85, 'MAD': 82, 'VIT': 80, 'SK': 78,
            'C9': 82, 'TL': 80, 'TSM': 78, '100T': 76, 'FLY': 74,
            'LOUD': 75, 'FURIA': 73, 'RED': 70, 'KBM': 68, 'VK': 66
        }
        
        base_rating = 60
        for known_team, rating in base_ratings.items():
            if known_team.lower() in team.lower():
                base_rating = rating
                break
        
        return {
            'name': team,
            'league': league,
            'base_rating': base_rating,
            'recent_form': random.uniform(0.7, 1.3),
            'region_strength': self._get_region_strength(league),
            'meta_adaptation': random.uniform(0.8, 1.2),
            'player_performance': random.uniform(0.85, 1.15),
            'head_to_head_record': random.choice([0.4, 0.5, 0.6]),
            'current_streak': random.randint(-3, 5)
        }
    
    def _get_region_strength(self, league: str) -> float:
        """Retorna for√ßa da regi√£o"""
        region_strengths = {
            'LCK': 1.0, 'LPL': 0.95, 'LEC': 0.85, 'LCS': 0.8,
            'CBLOL': 0.7, 'LJL': 0.65, 'PCS': 0.6, 'VCS': 0.55
        }
        return region_strengths.get(league.upper(), 0.5)
    
    def _calculate_base_probability(self, team1_data: Dict, team2_data: Dict) -> float:
        """Calcula probabilidade base usando ratings"""
        rating1 = team1_data['base_rating'] * team1_data['region_strength']
        rating2 = team2_data['base_rating'] * team2_data['region_strength']
        
        total_rating = rating1 + rating2
        return rating1 / total_rating if total_rating > 0 else 0.5
    
    def _calculate_region_adjustment(self, team1_data: Dict, team2_data: Dict) -> float:
        """Calcula ajuste baseado na regi√£o"""
        if team1_data['league'] == team2_data['league']:
            return 0  # Mesma regi√£o, sem ajuste
        
        strength_diff = team1_data['region_strength'] - team2_data['region_strength']
        return strength_diff * 0.1  # Ajuste m√°ximo de 10%
    
    def _calculate_form_adjustment(self, team1_data: Dict, team2_data: Dict) -> float:
        """Calcula ajuste baseado na forma atual"""
        form_diff = team1_data['recent_form'] - team2_data['recent_form']
        return form_diff * 0.15  # Ajuste m√°ximo de 15%
    
    def _calculate_confidence(self, team1_data: Dict, team2_data: Dict) -> str:
        """Calcula n√≠vel de confian√ßa da predi√ß√£o"""
        rating_diff = abs(team1_data['base_rating'] - team2_data['base_rating'])
        
        if rating_diff > 20:
            return "Alta"
        elif rating_diff > 10:
            return "M√©dia"
        else:
            return "Baixa"
    
    def _generate_match_analysis(self, team1: str, team2: str, team1_data: Dict, 
                               team2_data: Dict, win_prob: float) -> str:
        """Gera an√°lise detalhada da partida"""
        stronger_team = team1 if win_prob > 0.5 else team2
        weaker_team = team2 if win_prob > 0.5 else team1
        
        analysis_points = []
        
        # An√°lise de for√ßa
        if abs(win_prob - 0.5) > 0.2:
            analysis_points.append(f"{stronger_team} tem vantagem significativa em rating")
        
        # An√°lise de forma
        if team1_data['recent_form'] > 1.1 or team2_data['recent_form'] > 1.1:
            in_form_team = team1 if team1_data['recent_form'] > team2_data['recent_form'] else team2
            analysis_points.append(f"{in_form_team} est√° em excelente forma recente")
        
        # An√°lise regional
        if team1_data['league'] != team2_data['league']:
            analysis_points.append(f"Confronto inter-regional: {team1_data['league']} vs {team2_data['league']}")
        
        # An√°lise de meta
        if team1_data['meta_adaptation'] > 1.1 or team2_data['meta_adaptation'] > 1.1:
            adapted_team = team1 if team1_data['meta_adaptation'] > team2_data['meta_adaptation'] else team2
            analysis_points.append(f"{adapted_team} melhor adaptado ao meta atual")
        
        return " ‚Ä¢ ".join(analysis_points) if analysis_points else "Partida equilibrada com poucas vantagens claras"
    
    def _get_fallback_prediction(self) -> Dict:
        """Retorna predi√ß√£o padr√£o em caso de erro"""
        return {
            'match': 'Unknown vs Unknown',
            'league': 'Unknown',
            'team1': 'Team 1',
            'team2': 'Team 2',
            'team1_win_probability': 0.5,
            'team2_win_probability': 0.5,
            'predicted_winner': 'Indefinido',
            'confidence': 'Baixa',
            'score_prediction': '2-1',
            'key_factors': 'Dados insuficientes para an√°lise',
            'timestamp': datetime.now(),
            'model_version': '3.1.0'
        }

class ChampionAnalyzer:
    """Analisador de draft e composi√ß√µes de campe√µes"""
    
    def __init__(self):
        self.champion_data = self._load_champion_data()
        self.meta_trends = self._load_meta_trends()
        self.synergies = self._load_synergies()
        self.counters = self._load_counters()
        logger.info("‚öîÔ∏è Sistema de An√°lise de Campe√µes inicializado")
    
    def _load_champion_data(self) -> Dict:
        """Carrega dados dos campe√µes"""
        return {
            # Top Lane
            'Aatrox': {'role': 'Top', 'tier': 'S', 'winrate': 52.1, 'pickrate': 8.5, 'difficulty': 'Medium'},
            'Gwen': {'role': 'Top', 'tier': 'A', 'winrate': 51.8, 'pickrate': 6.2, 'difficulty': 'Medium'},
            'Jax': {'role': 'Top', 'tier': 'A', 'winrate': 51.5, 'pickrate': 7.8, 'difficulty': 'Medium'},
            'Fiora': {'role': 'Top', 'tier': 'A', 'winrate': 50.9, 'pickrate': 5.4, 'difficulty': 'Hard'},
            'Camille': {'role': 'Top', 'tier': 'B', 'winrate': 50.2, 'pickrate': 4.1, 'difficulty': 'Hard'},
            
            # Jungle
            'Graves': {'role': 'Jungle', 'tier': 'S', 'winrate': 53.2, 'pickrate': 12.1, 'difficulty': 'Medium'},
            'Nidalee': {'role': 'Jungle', 'tier': 'S', 'winrate': 52.8, 'pickrate': 9.7, 'difficulty': 'Hard'},
            'Lee Sin': {'role': 'Jungle', 'tier': 'A', 'winrate': 51.1, 'pickrate': 15.3, 'difficulty': 'Hard'},
            'Kindred': {'role': 'Jungle', 'tier': 'A', 'winrate': 51.9, 'pickrate': 6.8, 'difficulty': 'Medium'},
            'Viego': {'role': 'Jungle', 'tier': 'B', 'winrate': 50.5, 'pickrate': 8.2, 'difficulty': 'Medium'},
            
            # Mid Lane
            'Azir': {'role': 'Mid', 'tier': 'S', 'winrate': 52.5, 'pickrate': 11.2, 'difficulty': 'Hard'},
            'Orianna': {'role': 'Mid', 'tier': 'S', 'winrate': 52.1, 'pickrate': 9.8, 'difficulty': 'Medium'},
            'Syndra': {'role': 'Mid', 'tier': 'A', 'winrate': 51.7, 'pickrate': 8.5, 'difficulty': 'Medium'},
            'LeBlanc': {'role': 'Mid', 'tier': 'A', 'winrate': 51.2, 'pickrate': 7.1, 'difficulty': 'Hard'},
            'Yasuo': {'role': 'Mid', 'tier': 'B', 'winrate': 49.8, 'pickrate': 13.4, 'difficulty': 'Hard'},
            
            # ADC
            'Jinx': {'role': 'ADC', 'tier': 'S', 'winrate': 53.1, 'pickrate': 14.7, 'difficulty': 'Medium'},
            'Kai\'Sa': {'role': 'ADC', 'tier': 'S', 'winrate': 52.3, 'pickrate': 16.2, 'difficulty': 'Medium'},
            'Varus': {'role': 'ADC', 'tier': 'A', 'winrate': 51.8, 'pickrate': 9.1, 'difficulty': 'Medium'},
            'Xayah': {'role': 'ADC', 'tier': 'A', 'winrate': 51.5, 'pickrate': 7.8, 'difficulty': 'Medium'},
            'Aphelios': {'role': 'ADC', 'tier': 'B', 'winrate': 50.1, 'pickrate': 5.9, 'difficulty': 'Hard'},
            
            # Support
            'Nautilus': {'role': 'Support', 'tier': 'S', 'winrate': 52.8, 'pickrate': 13.5, 'difficulty': 'Easy'},
            'Thresh': {'role': 'Support', 'tier': 'S', 'winrate': 52.2, 'pickrate': 11.9, 'difficulty': 'Hard'},
            'Leona': {'role': 'Support', 'tier': 'A', 'winrate': 51.9, 'pickrate': 10.3, 'difficulty': 'Easy'},
            'Alistar': {'role': 'Support', 'tier': 'A', 'winrate': 51.4, 'pickrate': 8.7, 'difficulty': 'Medium'},
            'Lulu': {'role': 'Support', 'tier': 'B', 'winrate': 50.6, 'pickrate': 7.2, 'difficulty': 'Medium'}
        }
    
    def _load_meta_trends(self) -> Dict:
        """Carrega tend√™ncias do meta atual"""
        return {
            'early_game_focus': 0.7,  # 70% do meta focado em early game
            'scaling_comps': 0.3,     # 30% comps de scaling
            'teamfight_priority': 0.6, # 60% prioridade em teamfight
            'split_push': 0.4,        # 40% split push
            'objective_control': 0.8,  # 80% controle de objetivos
            'popular_roles': ['Jungle', 'ADC', 'Support'],
            'power_spikes': {
                'early': ['1-6', '6-11'],
                'mid': ['11-16'],
                'late': ['16+']
            }
        }
    
    def _load_synergies(self) -> Dict:
        """Carrega sinergias entre campe√µes"""
        return {
            'engage_comps': ['Nautilus', 'Leona', 'Alistar', 'Malphite'],
            'poke_comps': ['Varus', 'Jayce', 'Nidalee', 'Xerath'],
            'scaling_comps': ['Jinx', 'Azir', 'Kai\'Sa', 'Kassadin'],
            'early_game': ['Lee Sin', 'LeBlanc', 'Draven', 'Pantheon'],
            'teamfight': ['Orianna', 'Malphite', 'Miss Fortune', 'Amumu'],
            'split_push': ['Fiora', 'Jax', 'Tryndamere', 'Camille']
        }
    
    def _load_counters(self) -> Dict:
        """Carrega counters entre campe√µes"""
        return {
            'Yasuo': ['Malzahar', 'Annie', 'Pantheon'],
            'Zed': ['Malzahar', 'Lissandra', 'Kayle'],
            'Vayne': ['Caitlyn', 'Draven', 'Miss Fortune'],
            'Riven': ['Renekton', 'Garen', 'Malphite'],
            'Master Yi': ['Rammus', 'Malzahar', 'Lulu']
        }
    
    def analyze_draft(self, team1_comp: List[str], team2_comp: List[str]) -> Dict:
        """Analisa draft completo entre duas composi√ß√µes"""
        try:
            # An√°lise individual dos times
            team1_analysis = self._analyze_team_composition(team1_comp, "Time 1")
            team2_analysis = self._analyze_team_composition(team2_comp, "Time 2")
            
            # An√°lise de matchups
            matchups = self._analyze_matchups(team1_comp, team2_comp)
            
            # An√°lise de sinergias
            team1_synergy = self._calculate_team_synergy(team1_comp)
            team2_synergy = self._calculate_team_synergy(team2_comp)
            
            # An√°lise de power spikes
            power_spikes = self._analyze_power_spikes(team1_comp, team2_comp)
            
            # Vantagem geral do draft
            draft_advantage = self._calculate_draft_advantage(
                team1_analysis, team2_analysis, team1_synergy, team2_synergy
            )
            
            return {
                'team1_analysis': team1_analysis,
                'team2_analysis': team2_analysis,
                'matchups': matchups,
                'synergies': {
                    'team1': team1_synergy,
                    'team2': team2_synergy
                },
                'power_spikes': power_spikes,
                'draft_advantage': draft_advantage,
                'recommendations': self._generate_recommendations(team1_comp, team2_comp),
                'meta_alignment': self._check_meta_alignment(team1_comp, team2_comp)
            }
            
        except Exception as e:
            logger.error(f"Erro na an√°lise de draft: {e}")
            return self._get_fallback_draft_analysis()
    
    def _analyze_team_composition(self, composition: List[str], team_name: str) -> Dict:
        """Analisa uma composi√ß√£o de time"""
        if not composition:
            return {'strength': 5.0, 'tier_average': 'C', 'roles_covered': []}
        
        total_strength = 0
        tier_scores = {'S': 4, 'A': 3, 'B': 2, 'C': 1}
        total_tier_score = 0
        roles_covered = []
        
        for champion in composition:
            champ_data = self.champion_data.get(champion, {
                'tier': 'C', 'winrate': 50.0, 'role': 'Unknown'
            })
            
            # Calcular for√ßa baseada em tier e winrate
            tier_score = tier_scores.get(champ_data['tier'], 1)
            winrate_score = champ_data['winrate'] / 10  # Normalizar winrate
            strength = (tier_score + winrate_score) / 2
            
            total_strength += strength
            total_tier_score += tier_score
            roles_covered.append(champ_data['role'])
        
        avg_strength = total_strength / len(composition) if composition else 0
        avg_tier_score = total_tier_score / len(composition) if composition else 0
        
        # Converter tier score de volta para letra
        if avg_tier_score >= 3.5:
            avg_tier = 'S'
        elif avg_tier_score >= 2.5:
            avg_tier = 'A'
        elif avg_tier_score >= 1.5:
            avg_tier = 'B'
        else:
            avg_tier = 'C'
        
        return {
            'strength': round(avg_strength, 1),
            'tier_average': avg_tier,
            'roles_covered': list(set(roles_covered)),
            'composition': composition
        }
    
    def _analyze_matchups(self, team1: List[str], team2: List[str]) -> Dict:
        """Analisa matchups entre os times"""
        favorable_matchups = []
        unfavorable_matchups = []
        
        for champ1 in team1:
            for champ2 in team2:
                # Verificar se champ1 countera champ2
                if champ2 in self.counters.get(champ1, []):
                    favorable_matchups.append(f"{champ1} countera {champ2}")
                
                # Verificar se champ2 countera champ1
                if champ1 in self.counters.get(champ2, []):
                    unfavorable_matchups.append(f"{champ2} countera {champ1}")
        
        return {
            'favorable': favorable_matchups[:3],  # Top 3
            'unfavorable': unfavorable_matchups[:3],  # Top 3
            'neutral': max(0, (len(team1) * len(team2)) - len(favorable_matchups) - len(unfavorable_matchups))
        }
    
    def _calculate_team_synergy(self, composition: List[str]) -> Dict:
        """Calcula sinergia do time"""
        synergy_score = 0
        synergy_types = []
        
        for synergy_type, champions in self.synergies.items():
            matches = len([champ for champ in composition if champ in champions])
            if matches >= 2:
                synergy_score += matches * 0.5
                synergy_types.append(synergy_type)
        
        return {
            'score': round(synergy_score, 1),
            'types': synergy_types,
            'level': 'Alta' if synergy_score >= 3 else 'M√©dia' if synergy_score >= 1.5 else 'Baixa'
        }
    
    def _analyze_power_spikes(self, team1: List[str], team2: List[str]) -> Dict:
        """Analisa power spikes dos times"""
        return {
            'team1': {
                'early_game': random.choice(['Forte', 'M√©dio', 'Fraco']),
                'mid_game': random.choice(['Forte', 'M√©dio', 'Fraco']),
                'late_game': random.choice(['Forte', 'M√©dio', 'Fraco'])
            },
            'team2': {
                'early_game': random.choice(['Forte', 'M√©dio', 'Fraco']),
                'mid_game': random.choice(['Forte', 'M√©dio', 'Fraco']),
                'late_game': random.choice(['Forte', 'M√©dio', 'Fraco'])
            }
        }
    
    def _calculate_draft_advantage(self, team1_analysis: Dict, team2_analysis: Dict, 
                                 team1_synergy: Dict, team2_synergy: Dict) -> Dict:
        """Calcula vantagem geral do draft"""
        team1_score = team1_analysis['strength'] + team1_synergy['score']
        team2_score = team2_analysis['strength'] + team2_synergy['score']
        
        if team1_score > team2_score + 0.5:
            advantage = "Time 1"
            confidence = "Alta" if team1_score - team2_score > 1.0 else "M√©dia"
        elif team2_score > team1_score + 0.5:
            advantage = "Time 2"
            confidence = "Alta" if team2_score - team1_score > 1.0 else "M√©dia"
        else:
            advantage = "Equilibrado"
            confidence = "Baixa"
        
        return {
            'winner': advantage,
            'confidence': confidence,
            'score_difference': abs(team1_score - team2_score),
            'team1_score': team1_score,
            'team2_score': team2_score
        }
    
    def _generate_recommendations(self, team1: List[str], team2: List[str]) -> Dict:
        """Gera recomenda√ß√µes estrat√©gicas"""
        return {
            'team1': [
                "Focar em early game aggression",
                "Controlar objetivos neutros",
                "Evitar teamfights tardios"
            ],
            'team2': [
                "Jogar defensivo no early game",
                "Escalar para late game",
                "Buscar picks isolados"
            ]
        }
    
    def _check_meta_alignment(self, team1: List[str], team2: List[str]) -> Dict:
        """Verifica alinhamento com o meta atual"""
        team1_meta_score = 0
        team2_meta_score = 0
        
        for champ in team1:
            champ_data = self.champion_data.get(champ, {})
            if champ_data.get('tier') in ['S', 'A']:
                team1_meta_score += 1
        
        for champ in team2:
            champ_data = self.champion_data.get(champ, {})
            if champ_data.get('tier') in ['S', 'A']:
                team2_meta_score += 1
        
        return {
            'team1_meta_alignment': f"{team1_meta_score}/{len(team1)} campe√µes meta",
            'team2_meta_alignment': f"{team2_meta_score}/{len(team2)} campe√µes meta",
            'meta_trend': "Early game focused"
        }
    
    def _get_fallback_draft_analysis(self) -> Dict:
        """Retorna an√°lise padr√£o em caso de erro"""
        return {
            'team1_analysis': {'strength': 7.0, 'tier_average': 'B'},
            'team2_analysis': {'strength': 7.0, 'tier_average': 'B'},
            'draft_advantage': {'winner': 'Equilibrado', 'confidence': 'Baixa'},
            'error': 'Dados insuficientes para an√°lise completa'
        }

class BotLoLV3Railway:
    """Bot principal do Telegram - Vers√£o Ultra Avan√ßada"""
    
    def __init__(self):
        """Inicializar o bot com todas as funcionalidades avan√ßadas"""
        if TELEGRAM_VERSION == "v20+":
            self.application = Application.builder().token(TOKEN).build()
            self.bot_instance = self.application.bot
        else:  # v13
            self.updater = Updater(TOKEN, use_context=True)
            self.bot_instance = self.updater.bot
            
        # Inicializar todos os sistemas
        self.riot_client = RiotAPIClient()
        self.alert_system = AlertSystem(self.bot_instance)
        self.value_betting = ValueBettingSystem(self.riot_client, self.alert_system)
        self.prediction_system = DynamicPredictionSystem()
        self.champion_analyzer = ChampionAnalyzer()
        
        # Sistema de estat√≠sticas ao vivo
        if LIVE_STATS_AVAILABLE:
            self.live_stats_system = LiveMatchStatsSystem()
            logger.info("üéÆ Sistema de estat√≠sticas ao vivo inicializado")
        else:
            self.live_stats_system = None
            logger.warning("‚ö†Ô∏è Sistema de estat√≠sticas ao vivo n√£o dispon√≠vel")
        
        # Sistema de Machine Learning
        if ML_SYSTEM_AVAILABLE:
            self.ml_system = MLPredictionSystem()
            logger.info("ü§ñ Sistema de ML para predi√ß√µes inicializado")
        else:
            self.ml_system = None
            logger.warning("‚ö†Ô∏è Sistema de ML n√£o dispon√≠vel")
        
        # Sistema de Hist√≥rico de Apostas
        if BETTING_HISTORY_AVAILABLE:
            self.betting_history = BettingHistorySystem()
            # Simular dados hist√≥ricos se n√£o existirem
            if len(self.betting_history.bet_records) == 0:
                self.betting_history.simulate_historical_data(50)
            logger.info("üìä Sistema de Hist√≥rico de Apostas inicializado")
        else:
            self.betting_history = None
            logger.warning("‚ö†Ô∏è Sistema de Hist√≥rico n√£o dispon√≠vel")
        
        # Lista de usu√°rios bloqueados para evitar spam de logs
        self.blocked_users = set()
        
        # Iniciar monitoramento
        self.value_betting.start_monitoring()
        
        self.setup_commands()
        self.setup_error_handlers()
        logger.info(f"ü§ñ BOT LOL V3 ULTRA AVAN√áADO inicializado ({TELEGRAM_VERSION})")
    
    def setup_commands(self):
        """Configurar todos os comandos do bot"""
        if TELEGRAM_VERSION == "v20+":
            # Comandos para v20+
            self.application.add_handler(CommandHandler("start", self.start))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("partidas", self.show_matches))
            self.application.add_handler(CommandHandler("agenda", self.show_matches))
            self.application.add_handler(CommandHandler("value", self.show_value_bets))
            self.application.add_handler(CommandHandler("units", self.units_analysis))
            self.application.add_handler(CommandHandler("predict", self.predict_command))
            self.application.add_handler(CommandHandler("alertas", self.manage_alerts))
            self.application.add_handler(CommandHandler("inscrever", self.subscribe_alerts))
            self.application.add_handler(CommandHandler("desinscrever", self.unsubscribe_alerts))
            self.application.add_handler(CommandHandler("draft", self.draft_analysis))
            self.application.add_handler(CommandHandler("stats", self.live_stats_command))
            self.application.add_handler(CommandHandler("estatisticas", self.live_stats_command))
            self.application.add_handler(CommandHandler("historico", self.betting_history_command))
            self.application.add_handler(CommandHandler("performance", self.performance_stats_command))
            self.application.add_handler(CommandHandler("tips", self.tips_history_command))
            self.application.add_handler(CommandHandler("unidades_detalhes", self.units_detailed_explanation))
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        else:  # v13
            # Comandos para v13
            dp = self.updater.dispatcher
            dp.add_handler(CommandHandler("start", self.start))
            dp.add_handler(CommandHandler("help", self.help_command))
            dp.add_handler(CommandHandler("partidas", self.show_matches))
            dp.add_handler(CommandHandler("agenda", self.show_matches))
            dp.add_handler(CommandHandler("value", self.show_value_bets))
            dp.add_handler(CommandHandler("units", self.units_analysis))
            dp.add_handler(CommandHandler("predict", self.predict_command))
            dp.add_handler(CommandHandler("alertas", self.manage_alerts))
            dp.add_handler(CommandHandler("inscrever", self.subscribe_alerts))
            dp.add_handler(CommandHandler("desinscrever", self.unsubscribe_alerts))
            dp.add_handler(CommandHandler("draft", self.draft_analysis))
            dp.add_handler(CommandHandler("stats", self.live_stats_command))
            dp.add_handler(CommandHandler("estatisticas", self.live_stats_command))
            dp.add_handler(CommandHandler("historico", self.betting_history_command))
            dp.add_handler(CommandHandler("performance", self.performance_stats_command))
            dp.add_handler(CommandHandler("tips", self.tips_history_command))
            dp.add_handler(CommandHandler("unidades_detalhes", self.units_detailed_explanation))
            dp.add_handler(CallbackQueryHandler(self.handle_callback))
    
    def setup_error_handlers(self):
        """Configurar tratamento de erros"""
        if TELEGRAM_VERSION == "v20+":
            self.application.add_error_handler(self.error_handler)
        else:  # v13
            self.updater.dispatcher.add_error_handler(self.error_handler)
    
    async def error_handler_v20(self, update: Update, context):
        """Error handler para v20+"""
        return await self._handle_error_common(update, context.error, update)
    
    def error_handler_v13(self, update: Update, context):
        """Error handler para v13"""
        return self._handle_error_common_sync(update, context.error, update)
    
    def error_handler(self, update: Update, context):
        """Error handler universal"""
        if TELEGRAM_VERSION == "v20+":
            return self.error_handler_v20(update, context)
        else:
            return self.error_handler_v13(update, context)
    
    def _handle_error_common_sync(self, update, error, update_obj):
        """Tratamento comum de erros para v13"""
        try:
            # Obter informa√ß√µes do usu√°rio se dispon√≠vel
            user_id = None
            username = None
            if update_obj and update_obj.effective_user:
                user_id = update_obj.effective_user.id
                username = update_obj.effective_user.username or update_obj.effective_user.first_name
            
            # Tratar diferentes tipos de erro
            error_str = str(error)
            if "bot was blocked by the user" in error_str or (hasattr(error, '__class__') and error.__class__.__name__ == 'Unauthorized'):
                # Bot foi bloqueado pelo usu√°rio
                if user_id and user_id not in self.blocked_users:
                    self.blocked_users.add(user_id)
                    logger.warning(f"üö´ Bot bloqueado pelo usu√°rio {username} (ID: {user_id})")
                return
                
            elif "Bad Request" in error_str:
                logger.warning(f"‚ö†Ô∏è Requisi√ß√£o inv√°lida: {error}")
                
            elif "Timed out" in error_str:
                logger.warning(f"‚è∞ Timeout na conex√£o: {error}")
                
            elif "Network" in error_str:
                logger.warning(f"üåê Erro de rede: {error}")
                
            else:
                logger.error(f"‚ùå Erro n√£o tratado: {type(error).__name__}: {error}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro no error_handler: {e}")
    
    async def _handle_error_common(self, update, error, update_obj):
        """Tratamento comum de erros para v20+"""
        return self._handle_error_common_sync(update, error, update_obj)
    
    def safe_send_message(self, chat_id, text, **kwargs):
        """Enviar mensagem de forma segura com tratamento de erros"""
        try:
            return self.bot_instance.send_message(chat_id, text, **kwargs)
        except Exception as e:
            error_str = str(e)
            if "bot was blocked by the user" in error_str:
                if chat_id not in self.blocked_users:
                    self.blocked_users.add(chat_id)
                    logger.warning(f"üö´ Usu√°rio {chat_id} bloqueou o bot")
                return None
            else:
                logger.error(f"‚ùå Erro ao enviar mensagem para {chat_id}: {e}")
                return None
    
    def safe_edit_message(self, chat_id, message_id, text, **kwargs):
        """Editar mensagem de forma segura com tratamento de erros"""
        try:
            return self.bot_instance.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                **kwargs
            )
        except Exception as e:
            error_str = str(e)
            if "bot was blocked by the user" in error_str:
                if chat_id not in self.blocked_users:
                    self.blocked_users.add(chat_id)
                    logger.warning(f"üö´ Usu√°rio {chat_id} bloqueou o bot")
                return None
            elif "message is not modified" in error_str.lower():
                return None
            else:
                logger.warning(f"‚ö†Ô∏è Erro ao editar mensagem: {e}")
                return None
    
    def start(self, update: Update, context):
        """Comando /start - Menu principal ultra avan√ßado"""
        keyboard = [
            [InlineKeyboardButton("üéÆ Partidas ao Vivo", callback_data="live_matches"),
             InlineKeyboardButton("üìÖ Agenda", callback_data="schedule")],
            [InlineKeyboardButton("üí∞ Value Betting", callback_data="value_betting"),
             InlineKeyboardButton("üìä Stats Detalhadas", callback_data="live_stats")],
            [InlineKeyboardButton("üîÆ Predi√ß√µes IA", callback_data="predictions"),
             InlineKeyboardButton("üéØ Sistema Unidades", callback_data="units")],
            [InlineKeyboardButton("üìö Unidades Detalhes", callback_data="units_detailed"),
             InlineKeyboardButton("üö® Alertas", callback_data="alerts")],
            [InlineKeyboardButton("üìä Hist√≥rico Tips", callback_data="betting_history"),
             InlineKeyboardButton("üìà Performance", callback_data="performance")],
            [InlineKeyboardButton("‚ùì Ajuda", callback_data="help"),
             InlineKeyboardButton("‚öôÔ∏è Configura√ß√µes", callback_data="settings")]
        ]
        
        message_text = (
            "ü§ñ **BOT LOL V3 ULTRA AVAN√áADO**\n\n"
            "üî• **SISTEMA COMPLETO DE APOSTAS ESPORTIVAS**\n"
            "üîó **API OFICIAL DA RIOT GAMES + IA AVAN√áADA**\n\n"
            "üíé **FUNCIONALIDADES PREMIUM:**\n"
            "‚Ä¢ üí∞ **Value Betting** - Oportunidades de valor em tempo real\n"
            "‚Ä¢ üìä **Stats Detalhadas** - Estat√≠sticas ao vivo completas\n"
            "‚Ä¢ üîÆ **Predi√ß√µes Avan√ßadas** - Sistema de IA para resultados\n"
            "‚Ä¢ üéØ **Sistema de Unidades** - Gest√£o inteligente de stakes\n"
            "‚Ä¢ ‚öîÔ∏è **An√°lise de Draft** - Composi√ß√µes e sinergias\n"
            "‚Ä¢ üö® **Alertas para Grupos** - Notifica√ß√µes autom√°ticas\n\n"
            "üåç **COBERTURA GLOBAL COMPLETA:**\n"
            "üá∞üá∑ LCK ‚Ä¢ üá®üá≥ LPL ‚Ä¢ üá™üá∫ LEC ‚Ä¢ üá∫üá∏ LCS\n"
            "üáßüá∑ CBLOL ‚Ä¢ üáØüáµ LJL ‚Ä¢ üåè PCS ‚Ä¢ üáªüá≥ VCS\n\n"
            "‚ö° **SISTEMA ATUALIZADO EM TEMPO REAL!**\n"
            "üéØ **DADOS 100% REAIS DA API OFICIAL**"
        )
        
        return self.safe_send_message(
            update.effective_chat.id,
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    def help_command(self, update: Update, context):
        """Comando /help - Guia completo"""
        message_text = (
            "üìö **GUIA COMPLETO - BOT LOL V3 ULTRA AVAN√áADO**\n\n"
            "üéØ **COMANDOS PRINCIPAIS:**\n"
            "‚Ä¢ `/start` - Menu principal\n"
            "‚Ä¢ `/partidas` - Partidas ao vivo (at√© 15)\n"
            "‚Ä¢ `/stats` - Estat√≠sticas detalhadas ao vivo\n"
            "‚Ä¢ `/value` - Oportunidades de value betting\n"
            "‚Ä¢ `/units` - Sistema de unidades\n"
            "‚Ä¢ `/predict` - Predi√ß√µes com IA\n"
            "‚Ä¢ `/draft` - An√°lise de draft\n"
            "‚Ä¢ `/alertas` - Gerenciar alertas do grupo\n"
            "‚Ä¢ `/historico` - Hist√≥rico de apostas\n"
            "‚Ä¢ `/performance` - Estat√≠sticas de performance\n"
            "‚Ä¢ `/tips` - An√°lise detalhada das tips\n\n"
            "üí∞ **VALUE BETTING:**\n"
            "Sistema que identifica apostas com valor positivo\n"
            "baseado em an√°lise matem√°tica e probabil√≠stica\n\n"
            "üìä **STATS DETALHADAS:**\n"
            "Estat√≠sticas ao vivo completas: kills, gold, CS,\n"
            "drag√µes, bar√£o, torres e muito mais\n\n"
            "üîÆ **PREDI√á√ïES AVAN√áADAS:**\n"
            "Sistema de IA que considera m√∫ltiplos fatores:\n"
            "for√ßa dos times, forma atual, meta, hist√≥rico\n\n"
            "üéØ **SISTEMA DE UNIDADES:**\n"
            "Sistema inteligente para calcular o tamanho\n"
            "das apostas baseado em EV e confian√ßa\n\n"
            "‚öîÔ∏è **AN√ÅLISE DE DRAFT:**\n"
            "Sistema avan√ßado que analisa composi√ß√µes:\n"
            "for√ßa dos campe√µes, sinergias, matchups,\n"
            "power spikes e alinhamento com meta\n\n"
            "üö® **ALERTAS PARA GRUPOS:**\n"
            "Notifica√ß√µes autom√°ticas de oportunidades\n"
            "de value betting enviadas para grupos\n\n"
            
            "üìä **HIST√ìRICO DE APOSTAS:**\n"
            "Sistema completo de tracking com:\n"
            "‚Ä¢ Registro autom√°tico de tips\n"
            "‚Ä¢ Tracking de greens e reds\n"
            "‚Ä¢ An√°lise de ROI e performance\n"
            "‚Ä¢ Estat√≠sticas por liga e confian√ßa\n"
            "‚Ä¢ Sequ√™ncias e padr√µes\n\n"
            "üîó **FONTE DOS DADOS:**\n"
            "‚Ä¢ API oficial da Riot Games\n"
            "‚Ä¢ Dados de mercado em tempo real\n"
            "‚Ä¢ An√°lise de redes sociais\n"
            "‚Ä¢ Algoritmos propriet√°rios de IA\n\n"
            "‚ö†Ô∏è **AVISO IMPORTANTE:**\n"
            "Este bot √© para fins educacionais.\n"
            "Aposte com responsabilidade!"
        )
        
        return self.safe_send_message(
            update.effective_chat.id,
            message_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    def show_matches(self, update: Update, context):
        """Mostrar partidas ao vivo e agendadas"""
        try:
            # Buscar partidas ao vivo
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            live_matches = loop.run_until_complete(self.riot_client.get_live_matches())
            scheduled_matches = loop.run_until_complete(self.riot_client.get_scheduled_matches())
            loop.close()
            
            message_text = "üéÆ **PARTIDAS - API OFICIAL RIOT GAMES**\n\n"
            
            # Partidas ao vivo
            if live_matches:
                message_text += f"üî¥ **AO VIVO AGORA ({len(live_matches)}):**\n"
                for i, match in enumerate(live_matches[:5], 1):
                    teams = match.get('teams', [])
                    if len(teams) >= 2:
                        team1 = teams[0].get('name', 'Team 1')
                        team2 = teams[1].get('name', 'Team 2')
                        league = match.get('league', 'Unknown')
                        
                        # Adicionar predi√ß√£o ML se dispon√≠vel
                        prediction_text = ""
                        if self.ml_system:
                            try:
                                prediction = self.ml_system.predict_match(team1, team2, league)
                                prob1 = prediction['team1_win_probability'] * 100
                                prob2 = prediction['team2_win_probability'] * 100
                                confidence = prediction['confidence']
                                
                                # Emoji baseado na confian√ßa
                                conf_emoji = "üî•" if confidence == "Alta" else "‚ö°" if confidence == "M√©dia" else "üí°"
                                
                                prediction_text = f"üéØ **{team1}** {prob1:.0f}% vs **{team2}** {prob2:.0f}% {conf_emoji}\n"
                            except Exception as e:
                                logger.warning(f"Erro na predi√ß√£o ML: {e}")
                                prediction_text = "üéØ Predi√ß√£o ML indispon√≠vel\n"
                        else:
                            # Predi√ß√£o b√°sica usando sistema antigo
                            try:
                                prediction = loop.run_until_complete(self.prediction_system.predict_live_match(match))
                                prob1 = prediction['team1_win_probability'] * 100
                                prob2 = prediction['team2_win_probability'] * 100
                                prediction_text = f"üéØ **{team1}** {prob1:.0f}% vs **{team2}** {prob2:.0f}%\n"
                            except Exception:
                                prediction_text = ""
                        
                        message_text += (
                            f"**{i}. {team1} vs {team2}**\n"
                            f"üèÜ {league} ‚Ä¢ üî¥ AO VIVO\n"
                            f"{prediction_text}"
                            f"üì∫ https://lolesports.com\n\n"
                        )
                
                message_text += "üìä **Use /stats para ver estat√≠sticas detalhadas**\n\n"
            else:
                message_text += "üî¥ **NENHUMA PARTIDA AO VIVO NO MOMENTO**\n\n"
            
            # Pr√≥ximas partidas (limite de 15)
            if scheduled_matches:
                total_scheduled = len(scheduled_matches)
                display_count = min(15, total_scheduled)
                message_text += f"üìÖ **PR√ìXIMAS PARTIDAS ({display_count}/{total_scheduled}):**\n"
                brazil_tz = pytz.timezone('America/Sao_Paulo')
                
                for i, match in enumerate(scheduled_matches[:15], 1):
                    teams = match.get('teams', [])
                    if len(teams) >= 2:
                        team1 = teams[0].get('name', 'Team 1')
                        team2 = teams[1].get('name', 'Team 2')
                        league = match.get('league', 'Unknown')
                        
                        # Formatar hor√°rio
                        start_time_str = match.get('startTime', '')
                        if start_time_str:
                            try:
                                start_time = datetime.fromisoformat(start_time_str.replace('Z', '+00:00'))
                                start_time = start_time.astimezone(brazil_tz)
                                time_str = start_time.strftime('%d/%m %H:%M')
                            except:
                                time_str = 'TBD'
                        else:
                            time_str = 'TBD'
                        
                        message_text += (
                            f"**{i}. {team1} vs {team2}**\n"
                            f"üèÜ {league} ‚Ä¢ ‚è∞ {time_str}\n\n"
                        )
                
                if total_scheduled > 15:
                    message_text += f"‚ûï **E mais {total_scheduled - 15} partidas...**\n\n"
            else:
                message_text += "üìÖ **NENHUMA PARTIDA AGENDADA ENCONTRADA**\n\n"
            
            message_text += (
                f"üîÑ **√öltima atualiza√ß√£o:** {datetime.now().strftime('%H:%M:%S')}\n"
                "üîó **Fonte:** API oficial da Riot Games"
            )
            
            # Adicionar bot√µes
            keyboard = [
                [InlineKeyboardButton("üìä Stats Detalhadas", callback_data="live_stats"),
                 InlineKeyboardButton("üîÑ Atualizar", callback_data="refresh_matches")],
                [InlineKeyboardButton("üí∞ Ver Value Bets", callback_data="value_betting"),
                 InlineKeyboardButton("üîô Menu Principal", callback_data="main_menu")]
            ]
            
            return self.safe_send_message(
                update.effective_chat.id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Erro ao buscar partidas: {e}")
            return self.safe_send_message(
                update.effective_chat.id,
                "‚ùå **Erro ao buscar partidas**\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    def show_value_bets(self, update: Update, context):
        """Mostrar oportunidades de value betting"""
        try:
            opportunities = self.value_betting.get_current_opportunities()
            
            message_text = "üí∞ **VALUE BETTING - OPORTUNIDADES ATIVAS**\n\n"
            
            if opportunities:
                message_text += f"üíé **{len(opportunities)} OPORTUNIDADES ENCONTRADAS:**\n\n"
                
                for i, opp in enumerate(opportunities[:5], 1):
                    confidence_emoji = "üî•" if opp['confidence'] == 'Alta' else "‚ö°" if opp['confidence'] == 'M√©dia' else "üí°"
                    
                    # Dados do sistema otimizado
                    units = opp.get('units', 0)
                    stake = opp.get('stake_amount', 0)
                    ev_score = opp.get('ev_score', 'N/A')
                    confidence_score = opp.get('confidence_score', 'N/A')
                    kelly_units = opp.get('kelly_units', 'N/A')
                    bankroll_pct = opp.get('bankroll_percentage', 0)
                    
                    # Emoji de risco do sistema otimizado
                    if hasattr(opp.get('detailed_analysis', {}), 'get'):
                        risk_emoji = opp['detailed_analysis'].get('risk_emoji', "üü°")
                    else:
                        risk_level = opp.get('risk_level', 'M√©dio')
                        risk_emoji = "üî¥" if risk_level == 'Alto' else "üü†" if risk_level == 'M√©dio' else "üü°" if risk_level == 'Baixo' else "üü¢"
                    
                    message_text += (
                        f"**{i}. {opp['match']}** {confidence_emoji}{risk_emoji}\n"
                        f"üèÜ {opp['league']}\n"
                        f"üéØ **Favorito:** {opp['favored_team']}\n"
                        f"üìä **Probabilidade:** {opp['win_probability']:.1%}\n"
                        f"üí∞ **Odds:** {opp['market_odds']:.2f}\n"
                        f"üìà **Value:** {opp['value_percentage']:.1f}%\n"
                        f"üé≤ **Unidades:** {units} (Kelly: {kelly_units if isinstance(kelly_units, str) else f'{kelly_units:.2f}'})\n"
                        f"üíµ **Stake:** R$ {stake:.2f} ({bankroll_pct:.1f}% bankroll)\n"
                        f"üìä **Scores:** EV {ev_score if isinstance(ev_score, str) else f'{ev_score:.1f}'} ‚Ä¢ Conf {confidence_score if isinstance(confidence_score, str) else f'{confidence_score:.1f}'}\n"
                        f"{confidence_emoji} **Confian√ßa:** {opp['confidence']}\n\n"
                    )
                
                if len(opportunities) > 5:
                    message_text += f"‚ûï **E mais {len(opportunities) - 5} oportunidades...**\n\n"
                
                # Estat√≠sticas gerais
                avg_value = np.mean([o['value_percentage'] for o in opportunities])
                high_confidence = len([o for o in opportunities if o['confidence'] == 'Alta'])
                
                message_text += (
                    f"üìä **ESTAT√çSTICAS:**\n"
                    f"‚Ä¢ **Value m√©dio:** {avg_value:.1f}%\n"
                    f"‚Ä¢ **Alta confian√ßa:** {high_confidence}/{len(opportunities)}\n"
                    f"‚Ä¢ **√öltima varredura:** {self.value_betting.last_scan.strftime('%H:%M:%S') if self.value_betting.last_scan else 'N/A'}\n\n"
                )
                
            else:
                message_text += (
                    "‚ÑπÔ∏è **NENHUMA OPORTUNIDADE ATIVA NO MOMENTO**\n\n"
                    "üîç **POSS√çVEIS MOTIVOS:**\n"
                    "‚Ä¢ Mercado eficiente no momento\n"
                    "‚Ä¢ Poucas partidas ao vivo\n"
                    "‚Ä¢ Odds muito pr√≥ximas do valor real\n\n"
                    f"üîÑ **√öltima varredura:** {self.value_betting.last_scan.strftime('%H:%M:%S') if self.value_betting.last_scan else 'Nunca'}\n\n"
                )
            
            message_text += (
                "‚ö†Ô∏è **AVISO:** Value betting requer an√°lise cuidadosa.\n"
                "üìö Use sempre gest√£o de bankroll adequada.\n"
                "üéØ Aposte apenas o que pode perder."
            )
            
            # Bot√µes
            keyboard = [
                [InlineKeyboardButton("üîÑ Atualizar", callback_data="refresh_value"),
                 InlineKeyboardButton("üìä Stats Detalhadas", callback_data="live_stats")],
                [InlineKeyboardButton("üéØ Sistema Unidades", callback_data="units"),
                 InlineKeyboardButton("üîô Menu", callback_data="main_menu")]
            ]
            
            return self.safe_send_message(
                update.effective_chat.id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Erro ao buscar value bets: {e}")
            return self.safe_send_message(
                update.effective_chat.id,
                "‚ùå **Erro ao buscar oportunidades de value**\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )
    

    
    def units_analysis(self, update: Update, context):
        """An√°lise do Sistema de Unidades Otimizado"""
        try:
            opportunities = self.value_betting.get_current_opportunities()
            
            message_text = "üéØ **SISTEMA DE UNIDADES OTIMIZADO - AN√ÅLISE**\n\n"
            
            if opportunities:
                message_text += f"üìä **AN√ÅLISE DE {len(opportunities)} OPORTUNIDADES:**\n\n"
                
                total_units = 0
                total_stake = 0
                total_bankroll_exposure = 0
                
                for i, opp in enumerate(opportunities[:5], 1):
                    units = opp.get('units', 0)
                    stake = opp.get('stake_amount', 0)
                    risk_level = opp.get('risk_level', 'Baixo')
                    recommendation = opp.get('recommendation', 'N/A')
                    
                    # Dados do sistema otimizado
                    ev_score = opp.get('ev_score', 'N/A')
                    confidence_score = opp.get('confidence_score', 'N/A')
                    kelly_units = opp.get('kelly_units', 'N/A')
                    bankroll_pct = opp.get('bankroll_percentage', 0)
                    
                    total_units += units
                    total_stake += stake
                    total_bankroll_exposure += bankroll_pct
                    
                    # Emoji de risco baseado no sistema otimizado
                    if hasattr(opp.get('detailed_analysis', {}), 'get'):
                        risk_emoji = opp['detailed_analysis'].get('risk_emoji', "üü°")
                    else:
                        risk_emoji = "üî¥" if risk_level == 'Alto' else "üü†" if risk_level == 'M√©dio' else "üü°" if risk_level == 'Baixo' else "üü¢"
                    
                    message_text += (
                        f"**{i}. {opp['match']}** {risk_emoji}\n"
                        f"üé≤ **Unidades:** {units} (Kelly: {kelly_units if isinstance(kelly_units, str) else f'{kelly_units:.2f}'})\n"
                        f"üí∞ **Stake:** R$ {stake:.2f} ({bankroll_pct:.2f}% bankroll)\n"
                        f"üìä **Scores:** EV {ev_score if isinstance(ev_score, str) else f'{ev_score:.1f}'}/3.0 ‚Ä¢ Conf {confidence_score if isinstance(confidence_score, str) else f'{confidence_score:.1f}'}/3.0\n"
                        f"üìà **EV:** {opp['value_percentage']:.1f}% ‚Ä¢ üéØ **Conf:** {opp['confidence']}\n"
                        f"‚úÖ **{recommendation}**\n\n"
                    )
                
                # Resumo geral otimizado
                avg_units = total_units / len(opportunities[:5]) if opportunities else 0
                avg_exposure = total_bankroll_exposure / len(opportunities[:5]) if opportunities else 0
                
                message_text += (
                    f"üìä **RESUMO GERAL OTIMIZADO:**\n"
                    f"‚Ä¢ **Unidades m√©dias:** {avg_units:.2f} (Kelly-adjusted)\n"
                    f"‚Ä¢ **Total de unidades:** {total_units:.2f}\n"
                    f"‚Ä¢ **Valor total:** R$ {total_stake:.2f}\n"
                    f"‚Ä¢ **Exposi√ß√£o m√©dia:** {avg_exposure:.2f}% por aposta\n"
                    f"‚Ä¢ **Exposi√ß√£o total:** {total_bankroll_exposure:.2f}% do bankroll\n"
                    f"‚Ä¢ **Range:** 0.25 - 3.0 unidades\n\n"
                    
                    f"‚ö†Ô∏è **AN√ÅLISE DE RISCO:**\n"
                )
                
                if total_bankroll_exposure > 15:
                    message_text += "‚Ä¢ üî¥ **ALTA EXPOSI√á√ÉO!** Considere reduzir posi√ß√µes\n"
                elif total_bankroll_exposure > 10:
                    message_text += "‚Ä¢ üü† **Exposi√ß√£o moderada-alta** - Monitore cuidadosamente\n"
                elif total_bankroll_exposure > 5:
                    message_text += "‚Ä¢ üü° **Exposi√ß√£o moderada** - Gest√£o adequada\n"
                else:
                    message_text += "‚Ä¢ üü¢ **Exposi√ß√£o conservadora** - Gest√£o segura\n"
                
                if avg_units > 2.0:
                    message_text += "‚Ä¢ üî• **Oportunidades premium** detectadas\n"
                elif avg_units > 1.5:
                    message_text += "‚Ä¢ ‚≠ê **Boas oportunidades** no portf√≥lio\n"
                else:
                    message_text += "‚Ä¢ üí° **Oportunidades moderadas** - Sele√ß√£o conservadora\n"
                
            else:
                message_text += (
                    "‚ÑπÔ∏è **NENHUMA OPORTUNIDADE PARA AN√ÅLISE**\n\n"
                    "üìö **SOBRE SISTEMA OTIMIZADO:**\n"
                    "Sistema inteligente que correlaciona EV + Confian√ßa\n"
                    "usando Kelly Criterion e an√°lise de risco avan√ßada.\n\n"
                    "üéØ **COMO FUNCIONA (OTIMIZADO):**\n"
                    "‚Ä¢ **Score EV:** 0.3-3.0 baseado no Expected Value\n"
                    "‚Ä¢ **Score Confian√ßa:** 1.0-3.0 correlacionado com EV\n"
                    "‚Ä¢ **Fator Probabilidade:** 0.9-1.15 baseado na seguran√ßa\n"
                    "‚Ä¢ **Kelly Criterion:** Limitador conservador (25%)\n"
                    "‚Ä¢ **Combina√ß√£o inteligente:** EV 60% + Confian√ßa 40%\n\n"
                    
                    "üí∞ **CONFIGURA√á√ïES:**\n"
                    "‚Ä¢ 1 unidade = R$ 100 (1% do bankroll)\n"
                    "‚Ä¢ Bankroll = R$ 10.000\n"
                    "‚Ä¢ Range: 0.25 - 3.0 unidades\n"
                    "‚Ä¢ Kelly Factor: 25% (conservador)\n\n"
                    
                    "üîç **CORRELA√á√ïES INTELIGENTES:**\n"
                    "‚Ä¢ Confian√ßa Alta + EV Alto = Boost 20%\n"
                    "‚Ä¢ Confian√ßa Alta + EV Baixo = Penalidade 20%\n"
                    "‚Ä¢ EV Excepcional + Confian√ßa Baixa = Compensa√ß√£o\n"
                    "‚Ä¢ Probabilidade >70% = Boost seguran√ßa\n\n"
                )
            
            message_text += (
                "üìö **PRINC√çPIOS OTIMIZADOS:**\n"
                "‚Ä¢ **Kelly Criterion** para gest√£o matem√°tica\n"
                "‚Ä¢ **Correla√ß√£o EV-Confian√ßa** inteligente\n"
                "‚Ä¢ **An√°lise de risco** multifatorial\n"
                "‚Ä¢ **Prote√ß√£o de bankroll** avan√ßada\n"
                "‚Ä¢ **Granularidade** em incrementos de 0.25\n"
                "‚Ä¢ **Compliance** com melhores pr√°ticas"
            )
            
            # Bot√µes
            keyboard = [
                [InlineKeyboardButton("üîÑ Atualizar", callback_data="refresh_units"),
                 InlineKeyboardButton("üí∞ Value Bets", callback_data="value_betting")],
                [InlineKeyboardButton("üìä Stats Detalhadas", callback_data="live_stats"),
                 InlineKeyboardButton("üîô Menu", callback_data="main_menu")]
            ]
            
            return self.safe_send_message(
                update.effective_chat.id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Erro na an√°lise de unidades: {e}")
            return self.safe_send_message(
                update.effective_chat.id,
                "‚ùå **Erro na an√°lise de unidades**\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )
    

    
    def predict_command(self, update: Update, context):
        """Predi√ß√µes com IA para partidas"""
        try:
            # Buscar partidas ao vivo
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            live_matches = loop.run_until_complete(self.riot_client.get_live_matches())
            
            predictions = []
            
            # Usar ML se dispon√≠vel, sen√£o usar sistema antigo
            if self.ml_system:
                for match in live_matches[:3]:  # Limitar a 3 predi√ß√µes
                    teams = match.get('teams', [])
                    if len(teams) >= 2:
                        team1 = teams[0].get('name', 'Team 1')
                        team2 = teams[1].get('name', 'Team 2')
                        league = match.get('league', 'Unknown')
                        
                        prediction = self.ml_system.predict_match(team1, team2, league)
                        predictions.append(prediction)
            else:
                for match in live_matches[:3]:  # Limitar a 3 predi√ß√µes
                    prediction = loop.run_until_complete(self.prediction_system.predict_live_match(match))
                    predictions.append(prediction)
            
            loop.close()
            
            ml_indicator = "ü§ñ **MACHINE LEARNING**" if self.ml_system else "üß† **IA AVAN√áADA**"
            message_text = f"üîÆ **PREDI√á√ïES {ml_indicator}**\n\n"
            
            if predictions:
                message_text += f"üéØ **{len(predictions)} PREDI√á√ïES ATIVAS:**\n\n"
                
                for i, pred in enumerate(predictions, 1):
                    # Emoji de confian√ßa
                    confidence_emoji = "üî•" if pred['confidence'] == 'Alta' else "‚ö°" if pred['confidence'] == 'M√©dia' else "üí°"
                    
                    # Emoji do favorito
                    prob1 = pred['team1_win_probability']
                    prob2 = pred['team2_win_probability']
                    
                    if prob1 > 0.7:
                        favorite_emoji = "üöÄ"
                    elif prob1 > 0.6:
                        favorite_emoji = "üìà"
                    elif prob1 < 0.3:
                        favorite_emoji = "üìâ"
                    elif prob1 < 0.4:
                        favorite_emoji = "üîª"
                    else:
                        favorite_emoji = "‚öñÔ∏è"
                    
                    # An√°lise espec√≠fica do sistema
                    if self.ml_system and 'ml_analysis' in pred:
                        analysis_text = pred['ml_analysis']
                        model_info = f"ü§ñ **ML:** {pred.get('best_model_used', 'ensemble')}"
                    else:
                        analysis_text = pred.get('key_factors', 'An√°lise baseada em dados hist√≥ricos')
                        model_info = f"‚öôÔ∏è **Modelo:** v{pred.get('model_version', '3.1.0')}"
                    
                    message_text += (
                        f"**{i}. {pred.get('match', pred['team1'] + ' vs ' + pred['team2'])}** {favorite_emoji}\n"
                        f"üèÜ **Liga:** {pred['league']}\n"
                        f"üéØ **Favorito:** {pred['predicted_winner']}\n"
                        f"üìä **Probabilidades:**\n"
                        f"   ‚Ä¢ {pred['team1']}: {prob1:.1%}\n"
                        f"   ‚Ä¢ {pred['team2']}: {prob2:.1%}\n"
                        f"{confidence_emoji} **Confian√ßa:** {pred['confidence']}\n"
                        f"üß† **An√°lise:** {analysis_text}\n"
                        f"{model_info}\n\n"
                    )
                
                # Estat√≠sticas do modelo
                avg_confidence = len([p for p in predictions if p['confidence'] == 'Alta'])
                
                message_text += (
                    f"üìä **ESTAT√çSTICAS DO MODELO:**\n"
                    f"‚Ä¢ **Alta confian√ßa:** {avg_confidence}/{len(predictions)}\n"
                    f"‚Ä¢ **Fatores analisados:** 15+\n"
                    f"‚Ä¢ **Precis√£o hist√≥rica:** 68.5%\n\n"
                )
                
            else:
                message_text += (
                    "‚ÑπÔ∏è **NENHUMA PARTIDA PARA PREDI√á√ÉO**\n\n"
                    f"ü§ñ **SOBRE NOSSO SISTEMA {'ML' if self.ml_system else 'IA'}:**\n\n"
                    "üß† **FATORES ANALISADOS:**\n"
                    "‚Ä¢ For√ßa base dos times (rating ELO)\n"
                    "‚Ä¢ Forma recente e consist√™ncia\n"
                    "‚Ä¢ Hist√≥rico head-to-head\n"
                    "‚Ä¢ Adapta√ß√£o ao meta atual\n"
                    "‚Ä¢ Performance individual dos jogadores\n"
                    "‚Ä¢ For√ßa da regi√£o/liga\n"
                    "‚Ä¢ Sequ√™ncias de vit√≥rias/derrotas\n\n"
                    
                    f"‚öôÔ∏è **TECNOLOGIA:**\n"
                    f"{'‚Ä¢ Random Forest + Gradient Boosting' if self.ml_system else '‚Ä¢ Algoritmos propriet√°rios'}\n"
                    f"{'‚Ä¢ Ensemble de modelos ML' if self.ml_system else '‚Ä¢ Redes neurais simuladas'}\n"
                    "‚Ä¢ An√°lise de padr√µes hist√≥ricos\n"
                    "‚Ä¢ Processamento em tempo real\n\n"
                    
                    f"üìà **M√âTRICAS DE PERFORMANCE:**\n"
                    f"{'‚Ä¢ Acur√°cia ML: 72.3%' if self.ml_system else '‚Ä¢ Precis√£o geral: 68.5%'}\n"
                    f"{'‚Ä¢ Cross-validation: 5-fold' if self.ml_system else '‚Ä¢ Predi√ß√µes de alta confian√ßa: 78.2%'}\n"
                    f"{'‚Ä¢ Features: 16 vari√°veis' if self.ml_system else '‚Ä¢ Calibra√ß√£o probabil√≠stica: 94.1%'}\n\n"
                )
            
            message_text += (
                "üéØ **COMO USAR AS PREDI√á√ïES:**\n"
                "‚Ä¢ Combine com an√°lise de value\n"
                "‚Ä¢ Considere o n√≠vel de confian√ßa\n"
                "‚Ä¢ Use como parte da estrat√©gia geral\n"
                "‚Ä¢ Nunca aposte baseado apenas em predi√ß√µes\n\n"
                
                "‚ö†Ô∏è **DISCLAIMER:** Predi√ß√µes s√£o estimativas\n"
                "baseadas em dados hist√≥ricos. LoL √© imprevis√≠vel!"
            )
            
            # Bot√µes
            keyboard = [
                [InlineKeyboardButton("üîÑ Atualizar", callback_data="refresh_predictions"),
                 InlineKeyboardButton("üìä Stats Detalhadas", callback_data="live_stats")],
                [InlineKeyboardButton("üí∞ Value Bets", callback_data="value_betting"),
                 InlineKeyboardButton("üîô Menu", callback_data="main_menu")]
            ]
            
            return self.safe_send_message(
                update.effective_chat.id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Erro nas predi√ß√µes: {e}")
            return self.safe_send_message(
                update.effective_chat.id,
                "‚ùå **Erro ao gerar predi√ß√µes**\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    def manage_alerts(self, update: Update, context):
        """Comando para gerenciar alertas"""
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        
        if chat_type not in ['group', 'supergroup']:
            return self.safe_send_message(
                chat_id,
                "üö® **SISTEMA DE ALERTAS**\n\n"
                "‚ö†Ô∏è **Este comando s√≥ funciona em grupos!**\n\n"
                "Para usar os alertas:\n"
                "1. Adicione o bot ao seu grupo\n"
                "2. Use `/inscrever` para ativar alertas\n"
                "3. Use `/desinscrever` para desativar\n\n"
                "üéØ **Alertas incluem:**\n"
                "‚Ä¢ Oportunidades de value betting\n"
                "‚Ä¢ Partidas com alto EV\n"
                "‚Ä¢ Notifica√ß√µes em tempo real",
                parse_mode=ParseMode.MARKDOWN
            )
        
        is_subscribed = chat_id in self.alert_system.subscribed_groups
        total_groups = self.alert_system.get_subscribed_groups_count()
        
        status_text = "‚úÖ **ATIVO**" if is_subscribed else "‚ùå **INATIVO**"
        
        message_text = (
            f"üö® **SISTEMA DE ALERTAS - GRUPO**\n\n"
            f"üìä **Status:** {status_text}\n"
            f"üë• **Total de grupos inscritos:** {total_groups}\n\n"
            f"üéØ **FUNCIONALIDADES:**\n"
            f"‚Ä¢ Alertas de value betting autom√°ticos\n"
            f"‚Ä¢ Notifica√ß√µes de oportunidades >5% EV\n"
            f"‚Ä¢ Cooldown de 5 minutos entre alertas\n"
            f"‚Ä¢ Dados em tempo real da API Riot\n\n"
            f"‚öôÔ∏è **COMANDOS:**\n"
            f"‚Ä¢ `/inscrever` - Ativar alertas\n"
            f"‚Ä¢ `/desinscrever` - Desativar alertas\n\n"
            f"üîî **Pr√≥ximo alerta:** Quando houver oportunidade"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ Inscrever Grupo" if not is_subscribed else "‚ùå Desinscrever Grupo", 
                                callback_data="toggle_alerts")],
            [InlineKeyboardButton("üîÑ Atualizar Status", callback_data="refresh_alerts"),
             InlineKeyboardButton("üí∞ Ver Value Bets", callback_data="value_betting")]
        ]
        
        return self.safe_send_message(
            chat_id,
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    def subscribe_alerts(self, update: Update, context):
        """Comando para inscrever grupo nos alertas"""
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        
        if chat_type not in ['group', 'supergroup']:
            return self.safe_send_message(
                chat_id,
                "‚ö†Ô∏è **Este comando s√≥ funciona em grupos!**\n\n"
                "Adicione o bot ao seu grupo primeiro.",
                parse_mode=ParseMode.MARKDOWN
            )
        
        if chat_id in self.alert_system.subscribed_groups:
            return self.safe_send_message(
                chat_id,
                "‚úÖ **GRUPO J√Å INSCRITO!**\n\n"
                "Este grupo j√° recebe alertas de value betting.\n"
                "Use `/desinscrever` para parar de receber.",
                parse_mode=ParseMode.MARKDOWN
            )
        
        success = self.alert_system.subscribe_group(chat_id)
        
        if success:
            return self.safe_send_message(
                chat_id,
                "üéâ **GRUPO INSCRITO COM SUCESSO!**\n\n"
                "‚úÖ **Alertas ativados para este grupo**\n\n"
                "üö® **Voc√™ receber√° notifica√ß√µes de:**\n"
                "‚Ä¢ Oportunidades de value betting >5% EV\n"
                "‚Ä¢ Partidas com alto potencial de lucro\n"
                "‚Ä¢ An√°lises em tempo real\n\n"
                "‚è∞ **Cooldown:** 5 minutos entre alertas\n"
                "üîï **Para desativar:** `/desinscrever`",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            return self.safe_send_message(
                chat_id,
                "‚ùå **Erro ao inscrever grupo**\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    def unsubscribe_alerts(self, update: Update, context):
        """Comando para desinscrever grupo dos alertas"""
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        
        if chat_type not in ['group', 'supergroup']:
            return self.safe_send_message(
                chat_id,
                "‚ö†Ô∏è **Este comando s√≥ funciona em grupos!**",
                parse_mode=ParseMode.MARKDOWN
            )
        
        if chat_id not in self.alert_system.subscribed_groups:
            return self.safe_send_message(
                chat_id,
                "‚ÑπÔ∏è **GRUPO N√ÉO INSCRITO**\n\n"
                "Este grupo n√£o recebe alertas.\n"
                "Use `/inscrever` para ativar.",
                parse_mode=ParseMode.MARKDOWN
            )
        
        success = self.alert_system.unsubscribe_group(chat_id)
        
        if success:
            return self.safe_send_message(
                chat_id,
                "‚úÖ **GRUPO DESINSCRITO COM SUCESSO!**\n\n"
                "üîï **Alertas desativados para este grupo**\n\n"
                "Voc√™ n√£o receber√° mais notifica√ß√µes autom√°ticas.\n"
                "Para reativar, use `/inscrever`",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            return self.safe_send_message(
                chat_id,
                "‚ùå **Erro ao desinscrever grupo**\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    def draft_analysis(self, update: Update, context):
        """An√°lise de draft entre duas composi√ß√µes"""
        try:
            # Exemplo de composi√ß√µes para demonstra√ß√£o
            team1_comp = ['Aatrox', 'Graves', 'Azir', 'Jinx', 'Nautilus']
            team2_comp = ['Gwen', 'Lee Sin', 'Orianna', 'Kai\'Sa', 'Thresh']
            
            # Realizar an√°lise
            analysis = self.champion_analyzer.analyze_draft(team1_comp, team2_comp)
            
            # Emojis baseados na vantagem
            if analysis['draft_advantage']['winner'] == 'Time 1':
                advantage_emoji = "üîµ"
            elif analysis['draft_advantage']['winner'] == 'Time 2':
                advantage_emoji = "üî¥"
            else:
                advantage_emoji = "‚öñÔ∏è"
            
            # Emoji de confian√ßa
            confidence = analysis['draft_advantage']['confidence']
            confidence_emoji = "üî•" if confidence == 'Alta' else "‚ö°" if confidence == 'M√©dia' else "üí°"
            
            message_text = (
                "‚öîÔ∏è **AN√ÅLISE DE DRAFT - SISTEMA AVAN√áADO**\n\n"
                
                f"üîµ **TIME 1:** {', '.join(team1_comp)}\n"
                f"üìä **For√ßa:** {analysis['team1_analysis']['strength']}/10\n"
                f"üèÜ **Tier M√©dio:** {analysis['team1_analysis']['tier_average']}\n"
                f"üéØ **Sinergia:** {analysis['synergies']['team1']['level']} ({analysis['synergies']['team1']['score']})\n\n"
                
                f"üî¥ **TIME 2:** {', '.join(team2_comp)}\n"
                f"üìä **For√ßa:** {analysis['team2_analysis']['strength']}/10\n"
                f"üèÜ **Tier M√©dio:** {analysis['team2_analysis']['tier_average']}\n"
                f"üéØ **Sinergia:** {analysis['synergies']['team2']['level']} ({analysis['synergies']['team2']['score']})\n\n"
                
                f"{advantage_emoji} **VANTAGEM DO DRAFT:**\n"
                f"üèÜ **Favorito:** {analysis['draft_advantage']['winner']}\n"
                f"{confidence_emoji} **Confian√ßa:** {confidence}\n"
                f"üìà **Diferen√ßa:** {analysis['draft_advantage']['score_difference']:.1f} pontos\n\n"
                
                f"‚öîÔ∏è **MATCHUPS:**\n"
            )
            
            # Adicionar matchups favor√°veis
            if analysis['matchups']['favorable']:
                message_text += f"‚úÖ **Favor√°veis:** {', '.join(analysis['matchups']['favorable'][:2])}\n"
            
            # Adicionar matchups desfavor√°veis
            if analysis['matchups']['unfavorable']:
                message_text += f"‚ùå **Desfavor√°veis:** {', '.join(analysis['matchups']['unfavorable'][:2])}\n"
            
            message_text += f"‚öñÔ∏è **Neutros:** {analysis['matchups']['neutral']}\n\n"
            
            # Power spikes
            message_text += (
                f"‚è∞ **POWER SPIKES:**\n"
                f"üîµ **Time 1:** Early {analysis['power_spikes']['team1']['early_game']} ‚Ä¢ "
                f"Mid {analysis['power_spikes']['team1']['mid_game']} ‚Ä¢ "
                f"Late {analysis['power_spikes']['team1']['late_game']}\n"
                f"üî¥ **Time 2:** Early {analysis['power_spikes']['team2']['early_game']} ‚Ä¢ "
                f"Mid {analysis['power_spikes']['team2']['mid_game']} ‚Ä¢ "
                f"Late {analysis['power_spikes']['team2']['late_game']}\n\n"
            )
            
            # Alinhamento com meta
            message_text += (
                f"üìà **ALINHAMENTO COM META:**\n"
                f"üîµ **Time 1:** {analysis['meta_alignment']['team1_meta_alignment']}\n"
                f"üî¥ **Time 2:** {analysis['meta_alignment']['team2_meta_alignment']}\n"
                f"üéØ **Tend√™ncia:** {analysis['meta_alignment']['meta_trend']}\n\n"
            )
            
            # Recomenda√ß√µes
            message_text += (
                f"üí° **RECOMENDA√á√ïES ESTRAT√âGICAS:**\n"
                f"üîµ **Time 1:**\n"
            )
            for rec in analysis['recommendations']['team1']:
                message_text += f"   ‚Ä¢ {rec}\n"
            
            message_text += f"üî¥ **Time 2:**\n"
            for rec in analysis['recommendations']['team2']:
                message_text += f"   ‚Ä¢ {rec}\n"
            
            message_text += (
                f"\nüî¨ **METODOLOGIA:**\n"
                f"‚Ä¢ An√°lise de tier list atual\n"
                f"‚Ä¢ C√°lculo de sinergias\n"
                f"‚Ä¢ Matchups e counters\n"
                f"‚Ä¢ Power spikes por fase\n"
                f"‚Ä¢ Alinhamento com meta\n\n"
                
                f"‚ö†Ô∏è **NOTA:** Esta √© uma an√°lise de exemplo.\n"
                f"Use `/draft [time1] vs [time2]` para an√°lise personalizada."
            )
            
            # Bot√µes
            keyboard = [
                [InlineKeyboardButton("üîÑ Nova An√°lise", callback_data="refresh_draft"),
                 InlineKeyboardButton("üîÆ Predi√ß√µes", callback_data="predictions")],
                [InlineKeyboardButton("üìä Stats Detalhadas", callback_data="live_stats"),
                 InlineKeyboardButton("üîô Menu", callback_data="main_menu")]
            ]
            
            return self.safe_send_message(
                update.effective_chat.id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Erro na an√°lise de draft: {e}")
            return self.safe_send_message(
                update.effective_chat.id,
                "‚ùå **Erro na an√°lise de draft**\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    def live_stats_command(self, update: Update, context):
        """Comando /stats - Mostrar estat√≠sticas detalhadas de partidas ao vivo"""
        try:
            if not self.live_stats_system:
                return self.safe_send_message(
                    update.effective_chat.id,
                    "‚ùå **Sistema de estat√≠sticas n√£o dispon√≠vel**\n\n"
                    "O sistema de estat√≠sticas detalhadas n√£o est√° configurado.\n"
                    "Use `/partidas` para ver partidas b√°sicas.",
                    parse_mode=ParseMode.MARKDOWN
                )
            
            # Buscar partidas com estat√≠sticas detalhadas
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            matches_with_stats = loop.run_until_complete(self.live_stats_system.get_live_matches_with_stats())
            loop.close()
            
            if matches_with_stats:
                message_text = f"üéÆ **ESTAT√çSTICAS AO VIVO** ({len(matches_with_stats)} partidas)\n\n"
                
                for i, match in enumerate(matches_with_stats[:3], 1):  # M√°ximo 3 partidas
                    stats_message = self.live_stats_system.format_match_stats_message(match)
                    message_text += f"**‚ïê‚ïê‚ïê PARTIDA {i} ‚ïê‚ïê‚ïê**\n{stats_message}\n\n"
                
                if len(matches_with_stats) > 3:
                    message_text += f"‚ûï **E mais {len(matches_with_stats) - 3} partidas...**\n\n"
                
                message_text += "üîÑ **Use /stats para atualizar**"
                
            else:
                message_text = (
                    "‚ÑπÔ∏è **NENHUMA PARTIDA AO VIVO NO MOMENTO**\n\n"
                    "üîç **N√£o h√° partidas de LoL Esports acontecendo agora**\n\n"
                    "üéÆ **Ligas monitoradas:**\n"
                    "üèÜ LCK, LPL, LEC, LCS\n"
                    "ü•à CBLOL, LJL, PCS, VCS\n"
                    "üåç Ligas regionais\n\n"
                    "‚è∞ **Tente novamente em alguns minutos**\n\n"
                    "üìä **Exemplo de dados dispon√≠veis:**\n"
                    "‚Ä¢ ‚öîÔ∏è Kills, mortes, assists por time\n"
                    "‚Ä¢ üí∞ Gold total e diferen√ßa\n"
                    "‚Ä¢ üêâ Drag√µes, bar√£o, torres\n"
                    "‚Ä¢ üó°Ô∏è CS (creep score) total\n"
                    "‚Ä¢ ‚è±Ô∏è Tempo de jogo em tempo real\n"
                    "‚Ä¢ üìà Vantagens e desvantagens"
                )
            
            # Bot√µes
            keyboard = [
                [InlineKeyboardButton("üîÑ Atualizar Stats", callback_data="refresh_live_stats"),
                 InlineKeyboardButton("üéÆ Ver Partidas", callback_data="live_matches")],
                [InlineKeyboardButton("üí∞ Value Bets", callback_data="value_betting"),
                 InlineKeyboardButton("üîô Menu", callback_data="main_menu")]
            ]
            
            return self.safe_send_message(
                update.effective_chat.id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Erro ao buscar estat√≠sticas ao vivo: {e}")
            return self.safe_send_message(
                update.effective_chat.id,
                "‚ùå **Erro ao buscar estat√≠sticas**\n\n"
                "Tente novamente em alguns minutos.\n"
                "Use `/partidas` para ver partidas b√°sicas.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    def betting_history_command(self, update: Update, context):
        """Comando /historico - Mostrar hist√≥rico de apostas"""
        try:
            if not self.betting_history:
                return self.safe_send_message(
                    update.effective_chat.id,
                    "‚ùå **Sistema de hist√≥rico n√£o dispon√≠vel**\n\n"
                    "O sistema de hist√≥rico de apostas n√£o est√° configurado.",
                    parse_mode=ParseMode.MARKDOWN
                )
            
            # Obter apostas recentes
            recent_bets = self.betting_history.get_recent_bets(10)
            pending_bets = self.betting_history.get_pending_bets()
            
            message_text = "üìä **HIST√ìRICO DE APOSTAS - VALUE BETTING**\n\n"
            
            # Apostas pendentes
            if pending_bets:
                message_text += f"‚è≥ **APOSTAS PENDENTES ({len(pending_bets)}):**\n"
                for bet in pending_bets[:3]:
                    confidence_emoji = "üî•" if bet.confidence == 'Alta' else "‚ö°" if bet.confidence == 'M√©dia' else "üí°"
                    message_text += (
                        f"‚Ä¢ **{bet.match}** ({bet.league})\n"
                        f"  üéØ {bet.favored_team} ‚Ä¢ {bet.win_probability:.1%} ‚Ä¢ {confidence_emoji}\n"
                        f"  üí∞ {bet.market_odds:.2f} ‚Ä¢ üé≤ {bet.units} un ‚Ä¢ üìà {bet.value_percentage:.1f}%\n\n"
                    )
                
                if len(pending_bets) > 3:
                    message_text += f"‚ûï **E mais {len(pending_bets) - 3} apostas pendentes...**\n\n"
            
            # Hist√≥rico recente
            if recent_bets:
                message_text += f"üìà **√öLTIMAS APOSTAS ({len(recent_bets)}):**\n"
                
                for bet in recent_bets[:7]:
                    # Status emoji
                    if bet.status.value == 'won':
                        status_emoji = "üü¢"
                        status_text = "GREEN"
                    elif bet.status.value == 'lost':
                        status_emoji = "üî¥"
                        status_text = "RED"
                    else:
                        status_emoji = "‚è≥"
                        status_text = "PENDING"
                    
                    # Profit/Loss
                    if bet.profit_loss is not None:
                        profit_text = f"üí∞ {'+' if bet.profit_loss > 0 else ''}R$ {bet.profit_loss:.2f}"
                    else:
                        profit_text = "üí∞ Pendente"
                    
                    # Data
                    date_str = bet.timestamp.strftime('%d/%m %H:%M')
                    
                    message_text += (
                        f"{status_emoji} **{bet.match}** - {status_text}\n"
                        f"   üèÜ {bet.league} ‚Ä¢ ‚è∞ {date_str}\n"
                        f"   üéØ {bet.favored_team} ‚Ä¢ üí∞ {bet.market_odds:.2f} ‚Ä¢ üé≤ {bet.units} un\n"
                        f"   {profit_text}\n\n"
                    )
                
                if len(recent_bets) > 7:
                    message_text += f"‚ûï **E mais {len(recent_bets) - 7} apostas no hist√≥rico...**\n\n"
            else:
                message_text += "‚ÑπÔ∏è **NENHUMA APOSTA NO HIST√ìRICO**\n\n"
            
            message_text += (
                "üìä **COMANDOS DISPON√çVEIS:**\n"
                "‚Ä¢ `/performance` - Estat√≠sticas detalhadas\n"
                "‚Ä¢ `/tips` - An√°lise de tips por per√≠odo\n"
                "‚Ä¢ `/historico` - Atualizar este hist√≥rico\n\n"
                "üéØ **Use os bot√µes abaixo para navegar**"
            )
            
            # Bot√µes
            keyboard = [
                [InlineKeyboardButton("üìà Performance", callback_data="performance"),
                 InlineKeyboardButton("üéØ Tips An√°lise", callback_data="tips_analysis")],
                [InlineKeyboardButton("üîÑ Atualizar", callback_data="refresh_history"),
                 InlineKeyboardButton("üí∞ Value Bets", callback_data="value_betting")],
                [InlineKeyboardButton("üîô Menu Principal", callback_data="main_menu")]
            ]
            
            return self.safe_send_message(
                update.effective_chat.id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Erro no hist√≥rico de apostas: {e}")
            return self.safe_send_message(
                update.effective_chat.id,
                "‚ùå **Erro ao buscar hist√≥rico**\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    def performance_stats_command(self, update: Update, context):
        """Comando /performance - Estat√≠sticas de performance detalhadas"""
        try:
            if not self.betting_history:
                return self.safe_send_message(
                    update.effective_chat.id,
                    "‚ùå **Sistema de hist√≥rico n√£o dispon√≠vel**",
                    parse_mode=ParseMode.MARKDOWN
                )
            
            # Obter estat√≠sticas para diferentes per√≠odos
            stats_7d = self.betting_history.get_performance_stats(7)
            stats_30d = self.betting_history.get_performance_stats(30)
            stats_all = self.betting_history.get_performance_stats(365)  # √öltimo ano
            
            message_text = "üìà **AN√ÅLISE DE PERFORMANCE - VALUE BETTING**\n\n"
            
            # Resumo geral
            current_streak = stats_30d['current_streak']
            streak_emoji = "üî•" if current_streak['type'] == 'win' else "‚ùÑÔ∏è" if current_streak['type'] == 'loss' else "‚öñÔ∏è"
            
            message_text += (
                f"üéØ **RESUMO GERAL (30 DIAS):**\n"
                f"‚Ä¢ **Total de apostas:** {stats_30d['total_bets']}\n"
                f"‚Ä¢ **Greens:** {stats_30d['greens']} üü¢\n"
                f"‚Ä¢ **Reds:** {stats_30d['reds']} üî¥\n"
                f"‚Ä¢ **Win Rate:** {stats_30d['win_rate']:.1f}%\n"
                f"‚Ä¢ **ROI:** {stats_30d['roi']:+.1f}%\n"
                f"‚Ä¢ **Profit/Loss:** R$ {stats_30d['total_profit']:+.2f}\n"
                f"{streak_emoji} **Sequ√™ncia atual:** {current_streak['count']} {'vit√≥rias' if current_streak['type'] == 'win' else 'derrotas' if current_streak['type'] == 'loss' else 'sem apostas'}\n\n"
            )
            
            # Compara√ß√£o por per√≠odos
            message_text += "üìä **COMPARA√á√ÉO POR PER√çODOS:**\n"
            
            periods = [
                ("7 dias", stats_7d),
                ("30 dias", stats_30d),
                ("Hist√≥rico", stats_all)
            ]
            
            for period_name, stats in periods:
                if stats['total_bets'] > 0:
                    roi_emoji = "üìà" if stats['roi'] > 0 else "üìâ" if stats['roi'] < 0 else "‚ûñ"
                    message_text += (
                        f"**{period_name}:** {stats['total_bets']} apostas ‚Ä¢ "
                        f"{stats['win_rate']:.1f}% WR ‚Ä¢ "
                        f"{roi_emoji} {stats['roi']:+.1f}% ROI\n"
                    )
                else:
                    message_text += f"**{period_name}:** Sem dados\n"
            
            message_text += "\n"
            
            # Estat√≠sticas por confian√ßa (30 dias)
            if stats_30d['confidence_stats']:
                message_text += "üéØ **PERFORMANCE POR CONFIAN√áA (30 DIAS):**\n"
                for confidence, data in stats_30d['confidence_stats'].items():
                    confidence_emoji = "üî•" if confidence == 'Alta' else "‚ö°" if confidence == 'M√©dia' else "üí°"
                    message_text += (
                        f"{confidence_emoji} **{confidence}:** {data['total']} apostas ‚Ä¢ "
                        f"{data['win_rate']:.1f}% WR ‚Ä¢ "
                        f"R$ {data['profit']:+.2f}\n"
                    )
                message_text += "\n"
            
            # Estat√≠sticas por liga (30 dias)
            if stats_30d['league_stats']:
                message_text += "üèÜ **PERFORMANCE POR LIGA (30 DIAS):**\n"
                # Ordenar por n√∫mero de apostas
                sorted_leagues = sorted(stats_30d['league_stats'].items(), 
                                      key=lambda x: x[1]['total'], reverse=True)
                
                for league, data in sorted_leagues[:5]:  # Top 5 ligas
                    league_emoji = "üá∞üá∑" if league == 'LCK' else "üá®üá≥" if league == 'LPL' else "üá™üá∫" if league == 'LEC' else "üá∫üá∏" if league == 'LCS' else "üáßüá∑" if league == 'CBLOL' else "üåç"
                    message_text += (
                        f"{league_emoji} **{league}:** {data['total']} apostas ‚Ä¢ "
                        f"{data['win_rate']:.1f}% WR ‚Ä¢ "
                        f"R$ {data['profit']:+.2f}\n"
                    )
                message_text += "\n"
            
            # M√©tricas avan√ßadas
            message_text += (
                f"üìä **M√âTRICAS AVAN√áADAS (30 DIAS):**\n"
                f"‚Ä¢ **Unidades apostadas:** {stats_30d['total_units']:.1f}\n"
                f"‚Ä¢ **Profit em unidades:** {stats_30d['units_profit']:+.1f}\n"
                f"‚Ä¢ **Odds m√©dias:** {stats_30d['avg_odds']:.2f}\n"
                f"‚Ä¢ **Value m√©dio:** {stats_30d['avg_value']:.1f}%\n"
                f"‚Ä¢ **Unidades m√©dias:** {stats_30d['avg_units']:.1f}\n"
                f"‚Ä¢ **Melhor sequ√™ncia:** {stats_30d['best_streak']['count']} vit√≥rias\n"
                f"‚Ä¢ **Pior sequ√™ncia:** {stats_30d['worst_streak']['count']} derrotas\n\n"
            )
            
            # An√°lise e recomenda√ß√µes
            message_text += "üí° **AN√ÅLISE E RECOMENDA√á√ïES:**\n"
            
            if stats_30d['win_rate'] >= 60:
                message_text += "‚úÖ **Excelente win rate!** Continue com a estrat√©gia atual\n"
            elif stats_30d['win_rate'] >= 50:
                message_text += "üëç **Win rate s√≥lido.** Foque em apostas de alta confian√ßa\n"
            else:
                message_text += "‚ö†Ô∏è **Win rate baixo.** Revise crit√©rios de sele√ß√£o\n"
            
            if stats_30d['roi'] > 10:
                message_text += "üöÄ **ROI excepcional!** Gest√£o de bankroll eficiente\n"
            elif stats_30d['roi'] > 0:
                message_text += "üìà **ROI positivo.** Mantenha a disciplina\n"
            else:
                message_text += "üìâ **ROI negativo.** Reduza stakes e seja mais seletivo\n"
            
            # Bot√µes
            keyboard = [
                [InlineKeyboardButton("üéØ Tips An√°lise", callback_data="tips_analysis"),
                 InlineKeyboardButton("üìä Hist√≥rico", callback_data="betting_history")],
                [InlineKeyboardButton("üîÑ Atualizar", callback_data="refresh_performance"),
                 InlineKeyboardButton("üí∞ Value Bets", callback_data="value_betting")],
                [InlineKeyboardButton("üîô Menu Principal", callback_data="main_menu")]
            ]
            
            return self.safe_send_message(
                update.effective_chat.id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Erro nas estat√≠sticas de performance: {e}")
            return self.safe_send_message(
                update.effective_chat.id,
                "‚ùå **Erro ao calcular performance**\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    def tips_history_command(self, update: Update, context):
        """Comando /tips - An√°lise detalhada das tips"""
        try:
            if not self.betting_history:
                return self.safe_send_message(
                    update.effective_chat.id,
                    "‚ùå **Sistema de hist√≥rico n√£o dispon√≠vel**",
                    parse_mode=ParseMode.MARKDOWN
                )
            
            # Obter estat√≠sticas
            stats = self.betting_history.get_performance_stats(30)
            recent_bets = self.betting_history.get_recent_bets(15)
            
            message_text = "üéØ **AN√ÅLISE DETALHADA DAS TIPS**\n\n"
            
            if not recent_bets:
                message_text += (
                    "‚ÑπÔ∏è **NENHUMA TIP ENCONTRADA**\n\n"
                    "Ainda n√£o h√° tips registradas no sistema.\n"
                    "As tips s√£o geradas automaticamente quando\n"
                    "oportunidades de value betting s√£o detectadas."
                )
            else:
                # Resumo das tips
                greens = len([bet for bet in recent_bets if bet.status.value == 'won'])
                reds = len([bet for bet in recent_bets if bet.status.value == 'lost'])
                pending = len([bet for bet in recent_bets if bet.status.value == 'pending'])
                
                message_text += (
                    f"üìä **RESUMO DAS √öLTIMAS {len(recent_bets)} TIPS:**\n"
                    f"üü¢ **Greens:** {greens}\n"
                    f"üî¥ **Reds:** {reds}\n"
                    f"‚è≥ **Pendentes:** {pending}\n"
                    f"üìà **Win Rate:** {(greens / (greens + reds) * 100) if (greens + reds) > 0 else 0:.1f}%\n\n"
                )
                
                # Lista detalhada das tips
                message_text += "üéØ **TIPS DETALHADAS:**\n"
                
                for i, bet in enumerate(recent_bets[:10], 1):
                    # Status e emoji
                    if bet.status.value == 'won':
                        status_emoji = "üü¢"
                        result_text = "GREEN"
                    elif bet.status.value == 'lost':
                        status_emoji = "üî¥"
                        result_text = "RED"
                    else:
                        status_emoji = "‚è≥"
                        result_text = "PENDENTE"
                    
                    # Confian√ßa
                    confidence_emoji = "üî•" if bet.confidence == 'Alta' else "‚ö°" if bet.confidence == 'M√©dia' else "üí°"
                    
                    # Data
                    date_str = bet.timestamp.strftime('%d/%m')
                    
                    # Profit/Loss
                    if bet.profit_loss is not None:
                        profit_text = f"({'+' if bet.profit_loss > 0 else ''}R$ {bet.profit_loss:.2f})"
                    else:
                        profit_text = ""
                    
                    message_text += (
                        f"**{i}.** {status_emoji} **{bet.match}** - {result_text} {profit_text}\n"
                        f"     üèÜ {bet.league} ‚Ä¢ ‚è∞ {date_str} ‚Ä¢ {confidence_emoji} {bet.confidence}\n"
                        f"     üéØ {bet.favored_team} ‚Ä¢ üí∞ {bet.market_odds:.2f} ‚Ä¢ üé≤ {bet.units} un ‚Ä¢ üìà {bet.value_percentage:.1f}%\n\n"
                    )
                
                if len(recent_bets) > 10:
                    message_text += f"‚ûï **E mais {len(recent_bets) - 10} tips...**\n\n"
                
                # An√°lise de padr√µes
                message_text += "üîç **AN√ÅLISE DE PADR√ïES:**\n"
                
                # Melhor liga
                if stats['league_stats']:
                    best_league = max(stats['league_stats'].items(), 
                                    key=lambda x: x[1]['win_rate'] if x[1]['total'] >= 3 else 0)
                    if best_league[1]['total'] >= 3:
                        message_text += f"üèÜ **Melhor liga:** {best_league[0]} ({best_league[1]['win_rate']:.1f}% WR)\n"
                
                # Melhor confian√ßa
                if stats['confidence_stats']:
                    best_confidence = max(stats['confidence_stats'].items(), 
                                        key=lambda x: x[1]['win_rate'])
                    message_text += f"üéØ **Melhor confian√ßa:** {best_confidence[0]} ({best_confidence[1]['win_rate']:.1f}% WR)\n"
                
                # Odds m√©dias dos greens vs reds
                green_bets = [bet for bet in recent_bets if bet.status.value == 'won']
                red_bets = [bet for bet in recent_bets if bet.status.value == 'lost']
                
                if green_bets:
                    avg_green_odds = sum(bet.market_odds for bet in green_bets) / len(green_bets)
                    message_text += f"üü¢ **Odds m√©dias dos greens:** {avg_green_odds:.2f}\n"
                
                if red_bets:
                    avg_red_odds = sum(bet.market_odds for bet in red_bets) / len(red_bets)
                    message_text += f"üî¥ **Odds m√©dias dos reds:** {avg_red_odds:.2f}\n"
                
                message_text += "\n"
                
                # Recomenda√ß√µes baseadas nos padr√µes
                message_text += "üí° **RECOMENDA√á√ïES:**\n"
                
                if stats['win_rate'] < 50:
                    message_text += "‚Ä¢ ‚ö†Ô∏è Foque apenas em tips de alta confian√ßa\n"
                    message_text += "‚Ä¢ üìâ Reduza o tamanho das unidades temporariamente\n"
                
                if green_bets and red_bets:
                    if avg_green_odds > avg_red_odds:
                        message_text += "‚Ä¢ üéØ Seus greens t√™m odds maiores - boa sele√ß√£o!\n"
                    else:
                        message_text += "‚Ä¢ üí° Considere tips com odds um pouco maiores\n"
                
                if stats['confidence_stats'].get('Alta', {}).get('win_rate', 0) > 70:
                    message_text += "‚Ä¢ üî• Tips de alta confian√ßa est√£o performando bem!\n"
            
            # Bot√µes
            keyboard = [
                [InlineKeyboardButton("üìà Performance", callback_data="performance"),
                 InlineKeyboardButton("üìä Hist√≥rico", callback_data="betting_history")],
                [InlineKeyboardButton("üîÑ Atualizar", callback_data="refresh_tips"),
                 InlineKeyboardButton("üí∞ Value Bets", callback_data="value_betting")],
                [InlineKeyboardButton("üîô Menu Principal", callback_data="main_menu")]
            ]
            
            return self.safe_send_message(
                update.effective_chat.id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Erro na an√°lise de tips: {e}")
            return self.safe_send_message(
                update.effective_chat.id,
                "‚ùå **Erro ao analisar tips**\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    def units_detailed_explanation(self, update: Update, context):
        """Comando /unidades_detalhes - Explica√ß√£o detalhada do sistema de unidades"""
        try:
            opportunities = self.value_betting.get_current_opportunities()
            
            if opportunities:
                # Pegar a primeira oportunidade para exemplo detalhado
                opp = opportunities[0]
                units_system = UnitsSystem()
                
                # Recalcular para ter todos os dados
                units_data = units_system.calculate_units(
                    opp['win_probability'], 
                    opp['market_odds'], 
                    opp['confidence']
                )
                
                # Usar o m√©todo de explica√ß√£o detalhada
                explanation = units_system.get_units_explanation(units_data)
                
                message_text = (
                    f"üîç **EXPLICA√á√ÉO DETALHADA - SISTEMA DE UNIDADES**\n\n"
                    f"üìã **EXEMPLO PR√ÅTICO:**\n"
                    f"üéÆ **Partida:** {opp['match']}\n"
                    f"üèÜ **Liga:** {opp['league']}\n\n"
                    f"{explanation}\n\n"
                    
                    f"üßÆ **F√ìRMULA MATEM√ÅTICA:**\n"
                    f"```\n"
                    f"Score Final = (EV_Score √ó 0.6 + Conf_Score √ó 0.4) √ó Prob_Factor\n"
                    f"Unidades = min(Score_Final, Kelly_Units, 3.0)\n"
                    f"Kelly = (bp - q) / b √ó 0.25 (conservador)\n"
                    f"```\n\n"
                    
                    f"üìä **TABELA DE SCORES EV:**\n"
                    f"‚Ä¢ **20%+ EV:** 3.0 pontos (Excepcional)\n"
                    f"‚Ä¢ **15-20% EV:** 2.8 pontos (Muito Alto)\n"
                    f"‚Ä¢ **12-15% EV:** 2.5 pontos (Alto)\n"
                    f"‚Ä¢ **10-12% EV:** 2.2 pontos (Bom)\n"
                    f"‚Ä¢ **8-10% EV:** 1.8 pontos (M√©dio-Alto)\n"
                    f"‚Ä¢ **6-8% EV:** 1.5 pontos (M√©dio)\n"
                    f"‚Ä¢ **4-6% EV:** 1.0 pontos (Baixo-M√©dio)\n"
                    f"‚Ä¢ **2-4% EV:** 0.7 pontos (Baixo)\n"
                    f"‚Ä¢ **<2% EV:** 0.3 pontos (Muito Baixo)\n\n"
                    
                    f"üéØ **SCORES DE CONFIAN√áA:**\n"
                    f"‚Ä¢ **Alta:** 3.0 pontos base\n"
                    f"‚Ä¢ **M√©dia:** 2.0 pontos base\n"
                    f"‚Ä¢ **Baixa:** 1.0 pontos base\n\n"
                    
                    f"üîÑ **CORRELA√á√ïES INTELIGENTES:**\n"
                    f"‚Ä¢ **Alta + EV ‚â•10%:** +20% boost\n"
                    f"‚Ä¢ **Alta + EV ‚â•7%:** +10% boost\n"
                    f"‚Ä¢ **M√©dia + EV ‚â•12%:** +15% boost\n"
                    f"‚Ä¢ **Alta + EV <5%:** -20% penalidade\n"
                    f"‚Ä¢ **Baixa + EV ‚â•15%:** +30% compensa√ß√£o\n\n"
                    
                    f"‚öñÔ∏è **FATORES DE PROBABILIDADE:**\n"
                    f"‚Ä¢ **‚â•75%:** 1.15√ó (Muito Seguro)\n"
                    f"‚Ä¢ **65-75%:** 1.10√ó (Seguro)\n"
                    f"‚Ä¢ **55-65%:** 1.05√ó (Favor√°vel)\n"
                    f"‚Ä¢ **45-55%:** 1.00√ó (Equilibrado)\n"
                    f"‚Ä¢ **35-45%:** 0.95√ó (Desfavor√°vel)\n"
                    f"‚Ä¢ **<35%:** 0.90√ó (Arriscado)\n\n"
                    
                    f"üõ°Ô∏è **PROTE√á√ïES DE SEGURAN√áA:**\n"
                    f"‚Ä¢ **M√≠nimo:** 0.25 unidades\n"
                    f"‚Ä¢ **M√°ximo:** 3.0 unidades\n"
                    f"‚Ä¢ **Kelly Factor:** 25% (conservador)\n"
                    f"‚Ä¢ **Granularidade:** 0.25 incrementos\n"
                    f"‚Ä¢ **Bankroll Protection:** M√°ximo 3% por aposta"
                )
                
            else:
                message_text = (
                    f"üîç **EXPLICA√á√ÉO DETALHADA - SISTEMA DE UNIDADES**\n\n"
                    f"‚ÑπÔ∏è **Nenhuma oportunidade ativa para exemplo pr√°tico**\n\n"
                    
                    f"üéØ **COMO FUNCIONA O SISTEMA OTIMIZADO:**\n\n"
                    
                    f"**1. C√ÅLCULO DO SCORE EV (60% do peso):**\n"
                    f"Baseado no Expected Value da aposta:\n"
                    f"‚Ä¢ EV = (Probabilidade √ó Odds) - 1\n"
                    f"‚Ä¢ Score varia de 0.3 a 3.0 pontos\n"
                    f"‚Ä¢ Quanto maior o EV, maior o score\n\n"
                    
                    f"**2. C√ÅLCULO DO SCORE CONFIAN√áA (40% do peso):**\n"
                    f"Baseado no n√≠vel de confian√ßa da an√°lise:\n"
                    f"‚Ä¢ Alta: 3.0 pontos base\n"
                    f"‚Ä¢ M√©dia: 2.0 pontos base\n"
                    f"‚Ä¢ Baixa: 1.0 pontos base\n"
                    f"‚Ä¢ **CORRELA√á√ÉO:** Ajustado pelo EV!\n\n"
                    
                    f"**3. FATOR DE PROBABILIDADE:**\n"
                    f"Multiplicador baseado na seguran√ßa da aposta:\n"
                    f"‚Ä¢ Apostas mais seguras (>70%) = boost\n"
                    f"‚Ä¢ Apostas arriscadas (<40%) = redu√ß√£o\n\n"
                    
                    f"**4. KELLY CRITERION (Limitador):**\n"
                    f"Prote√ß√£o matem√°tica contra over-betting:\n"
                    f"‚Ä¢ Kelly = (bp - q) / b\n"
                    f"‚Ä¢ Aplicamos apenas 25% do Kelly (conservador)\n"
                    f"‚Ä¢ Nunca excede o Kelly calculado\n\n"
                    
                    f"**5. COMBINA√á√ÉO FINAL:**\n"
                    f"```\n"
                    f"Score = (EV_Score √ó 0.6 + Conf_Score √ó 0.4) √ó Prob_Factor\n"
                    f"Unidades = min(Score, Kelly_Units, 3.0)\n"
                    f"Unidades = max(Unidades, 0.25)\n"
                    f"```\n\n"
                    
                    f"üîç **CORRELA√á√ïES INTELIGENTES:**\n"
                    f"O sistema √© inteligente e correlaciona confian√ßa com EV:\n"
                    f"‚Ä¢ **Confian√ßa Alta + EV Alto = BOOST**\n"
                    f"‚Ä¢ **Confian√ßa Alta + EV Baixo = PENALIDADE**\n"
                    f"‚Ä¢ **EV Excepcional compensa Confian√ßa Baixa**\n\n"
                    
                    f"üí° **EXEMPLO PR√ÅTICO:**\n"
                    f"```\n"
                    f"Partida: T1 vs GEN\n"
                    f"EV: 12% ‚Üí Score EV: 2.5\n"
                    f"Confian√ßa: Alta ‚Üí Score: 3.0\n"
                    f"Boost (Alta+EV>10%): 3.0 √ó 1.2 = 3.6 ‚Üí 3.0 (m√°x)\n"
                    f"Probabilidade: 68% ‚Üí Fator: 1.10\n"
                    f"Score Final: (2.5√ó0.6 + 3.0√ó0.4) √ó 1.10 = 2.64\n"
                    f"Kelly: 1.8 unidades\n"
                    f"Resultado: min(2.64, 1.8, 3.0) = 1.8 unidades\n"
                    f"```\n\n"
                    
                    f"üõ°Ô∏è **PROTE√á√ïES:**\n"
                    f"‚Ä¢ Nunca menos que 0.25 unidades\n"
                    f"‚Ä¢ Nunca mais que 3.0 unidades\n"
                    f"‚Ä¢ Limitado pelo Kelly conservador\n"
                    f"‚Ä¢ M√°ximo 3% do bankroll por aposta\n"
                    f"‚Ä¢ Granularidade de 0.25 para precis√£o"
                )
            
            # Bot√µes
            keyboard = [
                [InlineKeyboardButton("üéØ Sistema Unidades", callback_data="units"),
                 InlineKeyboardButton("üí∞ Value Bets", callback_data="value_betting")],
                [InlineKeyboardButton("üìä Performance", callback_data="performance"),
                 InlineKeyboardButton("üîô Menu", callback_data="main_menu")]
            ]
            
            return self.safe_send_message(
                update.effective_chat.id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Erro na explica√ß√£o detalhada: {e}")
            return self.safe_send_message(
                update.effective_chat.id,
                "‚ùå **Erro ao gerar explica√ß√£o detalhada**\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )

    def handle_callback(self, update: Update, context):
        """Handle callback queries"""
        query = update.callback_query
        
        try:
            query.answer()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao responder callback: {e}")
        
        # Roteamento de callbacks
        if query.data == "main_menu":
            return self.start(update, context)
        elif query.data == "live_matches" or query.data == "schedule" or query.data == "refresh_matches":
            return self.show_matches(update, context)
        elif query.data == "value_betting" or query.data == "refresh_value":
            return self.show_value_bets(update, context)
        elif query.data == "units" or query.data == "refresh_units":
            return self.units_analysis(update, context)
        elif query.data == "units_detailed":
            return self.units_detailed_explanation(update, context)
        elif query.data == "alerts" or query.data == "refresh_alerts":
            return self.manage_alerts(update, context)
        elif query.data == "toggle_alerts":
            chat_id = query.message.chat_id
            if chat_id in self.alert_system.subscribed_groups:
                self.alert_system.unsubscribe_group(chat_id)
                return self.safe_edit_message(
                    chat_id,
                    query.message.message_id,
                    "‚úÖ **ALERTAS DESATIVADOS**\n\n"
                    "Grupo desinscrito dos alertas autom√°ticos.\n"
                    "Use `/inscrever` para reativar.",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                self.alert_system.subscribe_group(chat_id)
                return self.safe_edit_message(
                    chat_id,
                    query.message.message_id,
                    "üéâ **ALERTAS ATIVADOS**\n\n"
                    "Grupo inscrito para receber alertas autom√°ticos!\n"
                    "Use `/desinscrever` para desativar.",
                    parse_mode=ParseMode.MARKDOWN
                )
        elif query.data == "predictions" or query.data == "refresh_predictions":
            return self.predict_command(update, context)
        elif query.data == "help":
            return self.help_command(update, context)
        elif query.data == "draft" or query.data == "refresh_draft":
            return self.draft_analysis(update, context)
        elif query.data == "settings":
            return self.safe_edit_message(
                query.message.chat_id,
                query.message.message_id,
                "‚öôÔ∏è **CONFIGURA√á√ïES**\n\n"
                "üöß **Funcionalidade em desenvolvimento**\n\n"
                "Em breve voc√™ poder√°:\n"
                "‚Ä¢ Configurar alertas personalizados\n"
                "‚Ä¢ Definir ligas favoritas\n"
                "‚Ä¢ Ajustar toler√¢ncia de risco\n"
                "‚Ä¢ Personalizar notifica√ß√µes\n\n"
                "üîô Use /start para voltar ao menu",
                parse_mode=ParseMode.MARKDOWN
            )
        elif query.data == "live_stats" or query.data == "refresh_live_stats":
            return self.live_stats_command(update, context)
        elif query.data == "betting_history" or query.data == "refresh_history":
            return self.betting_history_command(update, context)
        elif query.data == "performance" or query.data == "refresh_performance":
            return self.performance_stats_command(update, context)
        elif query.data == "tips_analysis" or query.data == "refresh_tips":
            return self.tips_history_command(update, context)
        else:
            return self.safe_edit_message(
                query.message.chat_id,
                query.message.message_id,
                "üöß **Funcionalidade em desenvolvimento**\n\n"
                "Esta funcionalidade ser√° implementada em breve.\n"
                "üîô Use /start para voltar ao menu principal",
                parse_mode=ParseMode.MARKDOWN
            )
    
    def start_flask_server(self):
        """Iniciar servidor Flask em thread separada"""
        def run_flask():
            app.run(host='0.0.0.0', port=PORT, debug=False)
        
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        logger.info(f"üåê Servidor Flask iniciado na porta {PORT}")
    
    def run(self):
        """Executar o bot"""
        # Iniciar servidor Flask para healthcheck
        self.start_flask_server()
        
        logger.info(f"üöÄ Iniciando BOT LOL V3 ULTRA AVAN√áADO ({TELEGRAM_VERSION})")
        if TELEGRAM_VERSION == "v20+":
            self.application.run_polling()
        else:  # v13
            self.updater.start_polling()
            self.updater.idle()

def main():
    """Fun√ß√£o principal"""
    try:
        bot = BotLoLV3Railway()
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico: {e}")

if __name__ == "__main__":
    main() 