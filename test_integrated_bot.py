#!/usr/bin/env python3
"""
Script para testar o Bot LoL Integrado
Testa todas as funcionalidades de predi√ß√£o
"""

import requests
import json
import time

# Configura√ß√µes
BOT_TOKEN = "7584060058:AAG-L6BJ5Y3Y74MadbGYhzSuiygJixrblNo"
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

def send_message(chat_id: int, text: str):
    """Envia mensagem via API do Telegram"""
    try:
        url = f"{BASE_URL}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text
        }
        response = requests.post(url, json=data)
        return response.json()
    except Exception as e:
        print(f"Erro ao enviar mensagem: {e}")
        return None

def test_bot_locally():
    """Testa o bot localmente"""
    
    print("üß™ TESTANDO BOT INTEGRADO LOCALMENTE")
    print("=" * 40)
    
    # Importar e testar sistema de predi√ß√£o
    from main_integrated import SimplePredictionSystem
    
    print("\nü§ñ Testando Sistema de Predi√ß√£o...")
    prediction_system = SimplePredictionSystem()
    
    # Teste 1: T1 vs G2
    print("\nüìä Teste 1: T1 vs G2")
    result1 = prediction_system.predict_match("T1", "G2")
    print(f"Resultado: {json.dumps(result1, indent=2)}")
    
    # Teste 2: Faker vs Chovy
    print("\nüìä Teste 2: Faker vs Chovy")
    result2 = prediction_system.predict_match("Faker", "Chovy")
    print(f"Resultado: {json.dumps(result2, indent=2)}")
    
    # Teste 3: Times desconhecidos
    print("\nüìä Teste 3: Teams desconhecidos")
    result3 = prediction_system.predict_match("NovoTime", "OutroTime")
    print(f"Resultado: {json.dumps(result3, indent=2)}")
    
    # Teste 4: Estat√≠sticas
    print("\nüìä Teste 4: Estat√≠sticas")
    stats = prediction_system.get_stats()
    print(f"Stats: {json.dumps(stats, indent=2)}")
    
    print("\n‚úÖ TESTES LOCAIS CONCLU√çDOS!")

def test_webhook_locally():
    """Testa webhook local se estiver rodando"""
    
    print("\nüåê TESTANDO WEBHOOK LOCAL (se dispon√≠vel)...")
    
    try:
        # Tentar conectar ao servidor local
        health_response = requests.get("http://localhost:8080/health", timeout=5)
        
        if health_response.status_code == 200:
            print("‚úÖ Servidor local detectado!")
            data = health_response.json()
            print(f"Health: {json.dumps(data, indent=2)}")
            
            # Testar webhook com mensagem simulada
            test_update = {
                "update_id": 123456,
                "message": {
                    "message_id": 789,
                    "from": {
                        "id": 987654321,
                        "is_bot": False,
                        "first_name": "Tester"
                    },
                    "chat": {
                        "id": 987654321,
                        "type": "private"
                    },
                    "date": int(time.time()),
                    "text": "/predict T1 vs G2"
                }
            }
            
            webhook_response = requests.post(
                "http://localhost:8080/webhook",
                json=test_update,
                timeout=10
            )
            
            if webhook_response.status_code == 200:
                print("‚úÖ Webhook funcionando!")
            else:
                print(f"‚ö†Ô∏è Webhook response: {webhook_response.status_code}")
        
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è Servidor local n√£o dispon√≠vel")
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")

def show_integration_summary():
    """Mostra resumo da integra√ß√£o"""
    
    print("\n" + "="*50)
    print("üéØ RESUMO DA INTEGRA√á√ÉO COMPLETA")
    print("="*50)
    
    print("""
‚úÖ **COMPONENTES IMPLEMENTADOS:**

ü§ñ **Sistema de Predi√ß√£o:**
   ‚Ä¢ 15+ times principais (LCK, LPL, LEC, LCS)
   ‚Ä¢ Players famosos (Faker, Chovy, Caps)
   ‚Ä¢ Sistema ELO para c√°lculo de probabilidades
   ‚Ä¢ Randomiza√ß√£o para realismo

üì± **Bot Telegram:**
   ‚Ä¢ /start - Apresenta√ß√£o
   ‚Ä¢ /help - Guia completo
   ‚Ä¢ /predict Team1 vs Team2 - Predi√ß√µes
   ‚Ä¢ /stats - Estat√≠sticas
   ‚Ä¢ /teams - Times dispon√≠veis
   ‚Ä¢ /status - Status do sistema

üèóÔ∏è **Arquitetura:**
   ‚Ä¢ Flask para webhook
   ‚Ä¢ Threading para evitar event loop issues
   ‚Ä¢ Sistema robusto de error handling
   ‚Ä¢ Health checks funcionais

üìä **Features:**
   ‚Ä¢ Predi√ß√µes com probabilidades
   ‚Ä¢ N√≠veis de confian√ßa (Alta/M√©dia/Baixa)
   ‚Ä¢ Contador de predi√ß√µes
   ‚Ä¢ Informa√ß√µes regionais dos times

üöÄ **PR√ìXIMOS PASSOS:**
   1. Deploy da vers√£o integrada
   2. Teste no Telegram real
   3. Refinamento baseado em feedback
   4. Expans√£o do banco de times
    """)

def main():
    """Fun√ß√£o principal"""
    
    print("üî¨ TESTADOR COMPLETO - BOT LOL INTEGRADO")
    print("=" * 50)
    
    # Testes locais
    test_bot_locally()
    
    # Teste de webhook local
    test_webhook_locally()
    
    # Resumo
    show_integration_summary()
    
    print("\nüéâ INTEGRA√á√ÉO COMPLETA E TESTADA!")
    print("üìã Ready para deploy no Railway!")

if __name__ == "__main__":
    main() 