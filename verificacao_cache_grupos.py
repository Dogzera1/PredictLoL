#!/usr/bin/env python3
"""
‚úÖ VERIFICA√á√ÉO: Corre√ß√£o do Cache de Grupos
Script para verificar se o problema "grupo j√° est√° ativo" foi resolvido
"""

print("üîç VERIFICA√á√ÉO: Corre√ß√£o do Cache de Grupos")
print("=" * 70)

# 1. Verificar se as corre√ß√µes foram aplicadas
print("\n1Ô∏è‚É£ VERIFICANDO CORRE√á√ïES APLICADAS:")
print("-" * 50)

try:
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
    
    from bot.telegram_bot.alerts_system import TelegramAlertsSystem
    
    # Verificar se m√©todo _clear_groups_cache existe
    alerts_system = TelegramAlertsSystem("test_token")
    
    if hasattr(alerts_system, '_clear_groups_cache'):
        print("‚úÖ M√©todo _clear_groups_cache implementado")
    else:
        print("‚ùå M√©todo _clear_groups_cache N√ÉO encontrado")
    
    if hasattr(alerts_system, '_handle_reset_groups'):
        print("‚úÖ Comando /reset_groups implementado")
    else:
        print("‚ùå Comando /reset_groups N√ÉO encontrado")
    
    # Verificar se a limpeza funciona
    alerts_system.groups = {-123: "teste"}
    alerts_system.blocked_groups = {-456}
    
    print(f"üìä Antes da limpeza: {len(alerts_system.groups)} grupos, {len(alerts_system.blocked_groups)} bloqueados")
    
    alerts_system._clear_groups_cache()
    
    print(f"üìä Depois da limpeza: {len(alerts_system.groups)} grupos, {len(alerts_system.blocked_groups)} bloqueados")
    
    if len(alerts_system.groups) == 0 and len(alerts_system.blocked_groups) == 0:
        print("‚úÖ Limpeza de cache funcionando corretamente")
    else:
        print("‚ùå Limpeza de cache com problemas")
        
except Exception as e:
    print(f"‚ùå Erro ao verificar corre√ß√µes: {e}")

# 2. Verificar arquivo de inicializa√ß√£o
print("\n2Ô∏è‚É£ VERIFICANDO INICIALIZA√á√ÉO:")
print("-" * 50)

try:
    with open("bot/telegram_bot/alerts_system.py", "r", encoding="utf-8") as f:
        content = f.read()
        
    if "_clear_groups_cache()" in content and "async def initialize" in content:
        print("‚úÖ Limpeza de cache est√° sendo chamada na inicializa√ß√£o")
    else:
        print("‚ùå Limpeza de cache N√ÉO est√° na inicializa√ß√£o")
        
    if "CommandHandler(\"reset_groups\"" in content:
        print("‚úÖ Comando /reset_groups registrado nos handlers")
    else:
        print("‚ùå Comando /reset_groups N√ÉO registrado")
        
except Exception as e:
    print(f"‚ùå Erro ao verificar arquivo: {e}")

# 3. Verificar √∫ltimo commit
print("\n3Ô∏è‚É£ VERIFICANDO DEPLOY:")
print("-" * 50)

import subprocess
try:
    # Verificar √∫ltimo commit
    result = subprocess.run(['git', 'log', '--oneline', '-1'], 
                          capture_output=True, text=True, cwd='.')
    
    if result.returncode == 0:
        last_commit = result.stdout.strip()
        print(f"‚úÖ √öltimo commit: {last_commit}")
        
        if "cache" in last_commit.lower() or "grupo" in last_commit.lower() or "reset" in last_commit.lower():
            print("‚úÖ Commit relacionado ao cache de grupos encontrado")
        else:
            print("‚ö†Ô∏è √öltimo commit n√£o parece relacionado ao cache")
    else:
        print("‚ùå Erro ao verificar commits")
        
    # Verificar se foi feito push
    result = subprocess.run(['git', 'status', '--porcelain'], 
                          capture_output=True, text=True, cwd='.')
    
    if result.returncode == 0:
        if result.stdout.strip() == "":
            print("‚úÖ Todas as altera√ß√µes foram commitadas")
        else:
            print("‚ö†Ô∏è Existem altera√ß√µes n√£o commitadas")
            print(f"   {result.stdout.strip()}")
    
except Exception as e:
    print(f"‚ùå Erro ao verificar git: {e}")

# 4. Instru√ß√µes de uso
print("\n4Ô∏è‚É£ INSTRU√á√ïES DE USO:")
print("-" * 50)
print("""
üéØ COMO RESOLVER O PROBLEMA "GRUPO J√Å EST√Å ATIVO":

1Ô∏è‚É£ M√âTODO AUTOM√ÅTICO (Recomendado):
   ‚Ä¢ O cache √© limpo automaticamente a cada redeploy
   ‚Ä¢ Aguarde alguns minutos ap√≥s o redeploy
   ‚Ä¢ Tente /activate_group novamente

2Ô∏è‚É£ M√âTODO MANUAL (Se ainda estiver com problema):
   ‚Ä¢ No seu grupo do Telegram, digite: /reset_groups
   ‚Ä¢ Aguarde a confirma√ß√£o de limpeza
   ‚Ä¢ Digite /activate_group normalmente

3Ô∏è‚É£ M√âTODO DE EMERG√äNCIA:
   ‚Ä¢ Remova o bot do grupo
   ‚Ä¢ Adicione o bot novamente
   ‚Ä¢ Use /activate_group

‚ö†Ô∏è IMPORTANTE:
‚Ä¢ As corre√ß√µes foram aplicadas no c√≥digo
‚Ä¢ Railway vai aplicar automaticamente no pr√≥ximo redeploy
‚Ä¢ O problema deve ser resolvido permanentemente
""")

print("\n" + "=" * 70)
print("üéâ VERIFICA√á√ÉO CONCLU√çDA!")
print("\nüí° Dica: Se ainda tiver problemas, use /reset_groups no grupo")
print("üìù Log: Todas as opera√ß√µes s√£o registradas nos logs do sistema") 