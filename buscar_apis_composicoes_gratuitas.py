import asyncio
import aiohttp
import json
from datetime import datetime

async def testar_apis_gratuitas():
    """Testa APIs alternativas gratuitas para obter dados de composi√ß√µes"""
    
    print(f'üîç BUSCANDO APIS GRATUITAS PARA COMPOSI√á√ïES')
    print(f'Hor√°rio: {datetime.now().strftime("%H:%M:%S")}')
    print('=' * 60)
    
    # 1. LIVE CLIENT DATA API (Riot Games - Local)
    print('üì° 1. TESTANDO LIVE CLIENT DATA API (Local Riot)')
    print('URL: https://developer.riotgames.com/docs/lol#live-client-data-api')
    print('Status: Gratuita, mas requer cliente local rodando')
    
    try:
        async with aiohttp.ClientSession() as session:
            # Testa se h√° cliente local rodando
            local_url = 'https://127.0.0.1:2999/liveclientdata/allgamedata'
            
            try:
                async with session.get(local_url, ssl=False, timeout=3) as response:
                    if response.status == 200:
                        data = await response.json()
                        print('‚úÖ Cliente local detectado!')
                        
                        # Verifica dados de players
                        if 'allPlayers' in data:
                            players = data['allPlayers']
                            print(f'   üë• {len(players)} players encontrados')
                            
                            for player in players[:2]:  # Primeiros 2 players
                                champion = player.get('championName', 'Unknown')
                                team = player.get('team', 'Unknown')
                                print(f'      {team}: {champion}')
                        
                        return True
                    else:
                        print(f'‚ö†Ô∏è Cliente local: Status {response.status}')
            except:
                print('‚ùå Cliente local n√£o detectado ou n√£o em jogo')
    except Exception as e:
        print(f'‚ùå Erro Live Client API: {e}')
    
    # 2. ESPORTS API (Riot Games - Gratuita)
    print(f'\nüì° 2. TESTANDO RIOT ESPORTS API')
    print('URL: https://esports-api.lolesports.com/')
    print('Status: Gratuita para dados de esports')
    
    try:
        esports_url = 'https://esports-api.lolesports.com/persisted/gw/getLive'
        params = {'hl': 'en-US'}
        
        async with aiohttp.ClientSession() as session:
            async with session.get(esports_url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    print('‚úÖ Riot Esports API funcionando!')
                    
                    events = data.get('data', {}).get('schedule', {}).get('events', [])
                    live_events = [e for e in events if e.get('state') == 'inProgress']
                    
                    print(f'   üéÆ {len(live_events)} eventos ao vivo')
                    
                    for event in live_events[:2]:
                        teams = event.get('match', {}).get('teams', [])
                        if len(teams) >= 2:
                            team1 = teams[0].get('name', 'Team1')
                            team2 = teams[1].get('name', 'Team2')
                            print(f'      Match: {team1} vs {team2}')
                    
                    return True
                else:
                    print(f'‚ùå Esports API: Status {response.status}')
    except Exception as e:
        print(f'‚ùå Erro Esports API: {e}')
    
    # 3. DATA DRAGON (Riot Games - Gratuita)
    print(f'\nüì° 3. TESTANDO DATA DRAGON API')
    print('URL: https://ddragon.leagueoflegends.com/')
    print('Status: Gratuita para dados est√°ticos')
    
    try:
        dragon_url = 'https://ddragon.leagueoflegends.com/api/versions.json'
        
        async with aiohttp.ClientSession() as session:
            async with session.get(dragon_url) as response:
                if response.status == 200:
                    versions = await response.json()
                    latest_version = versions[0]
                    print(f'‚úÖ Data Dragon funcionando! Vers√£o: {latest_version}')
                    
                    # Testa dados de champions
                    champ_url = f'https://ddragon.leagueoflegends.com/cdn/{latest_version}/data/en_US/champion.json'
                    
                    async with session.get(champ_url) as champ_response:
                        if champ_response.status == 200:
                            champ_data = await champ_response.json()
                            champions = list(champ_data.get('data', {}).keys())
                            print(f'   üèÜ {len(champions)} champions dispon√≠veis')
                            print(f'   Exemplos: {", ".join(champions[:5])}...')
                            
                            return True
                else:
                    print(f'‚ùå Data Dragon: Status {response.status}')
    except Exception as e:
        print(f'‚ùå Erro Data Dragon: {e}')
    
    # 4. LEAGUEGRAPHS API (Terceiros - Gratuita)
    print(f'\nüì° 4. TESTANDO LEAGUEGRAPHS API')
    print('URL: https://www.leagueofgraphs.com/')
    print('Status: Gratuita com limita√ß√µes')
    
    try:
        # API endpoint p√∫blico do LeagueOfGraphs
        lg_url = 'https://www.leagueofgraphs.com/api/champions/stats'
        
        async with aiohttp.ClientSession() as session:
            async with session.get(lg_url) as response:
                if response.status == 200:
                    print('‚úÖ LeagueOfGraphs API acess√≠vel!')
                    return True
                else:
                    print(f'‚ö†Ô∏è LeagueOfGraphs: Status {response.status}')
    except Exception as e:
        print(f'‚ùå Erro LeagueOfGraphs: {e}')
    
    # 5. OPGG API (Terceiros)
    print(f'\nüì° 5. TESTANDO OP.GG API')
    print('URL: https://op.gg/')
    print('Status: Endpoints p√∫blicos limitados')
    
    try:
        opgg_url = 'https://op.gg/api/v1.0/internal/bypass/games/lol/champions'
        
        async with aiohttp.ClientSession() as session:
            async with session.get(opgg_url) as response:
                if response.status == 200:
                    print('‚úÖ OP.GG API acess√≠vel!')
                    return True
                else:
                    print(f'‚ö†Ô∏è OP.GG: Status {response.status}')
    except Exception as e:
        print(f'‚ùå Erro OP.GG: {e}')
    
    return False

async def buscar_apis_alternativas():
    """Busca outras APIs dispon√≠veis"""
    
    print(f'\n' + '=' * 60)
    print(f'üåê APIS ALTERNATIVAS ENCONTRADAS NA WEB:')
    print('=' * 60)
    
    apis_alternativas = [
        {
            'nome': 'Riot Live Client Data API',
            'url': 'https://127.0.0.1:2999/liveclientdata/',
            'custo': 'Gratuita',
            'dados': 'Composi√ß√µes ao vivo (requer cliente local)',
            'vantagem': '‚úÖ Dados em tempo real completos',
            'desvantagem': '‚ùå S√≥ funciona localmente'
        },
        {
            'nome': 'Riot Esports API',
            'url': 'https://esports-api.lolesports.com/',
            'custo': 'Gratuita',
            'dados': 'Dados de partidas profissionais',
            'vantagem': '‚úÖ Dados oficiais de esports',
            'desvantagem': '‚ùå Pode n√£o ter composi√ß√µes detalhadas'
        },
        {
            'nome': 'LoL Esports Stats API',
            'url': 'https://lolesports.com/api-docs',
            'custo': 'Gratuita',
            'dados': 'Estat√≠sticas de esports',
            'vantagem': '‚úÖ Espec√≠fico para competi√ß√µes',
            'desvantagem': '‚ùå Rate limits'
        },
        {
            'nome': 'OPGG Public Endpoints',
            'url': 'https://op.gg/api/',
            'custo': 'Gratuita (limitada)',
            'dados': 'Builds e composi√ß√µes populares',
            'vantagem': '‚úÖ Dados de meta atual',
            'desvantagem': '‚ùå N√£o oficial, pode mudar'
        },
        {
            'nome': 'U.GG API',
            'url': 'https://u.gg/api',
            'custo': 'Gratuita (limitada)',
            'dados': 'Stats de champions e builds',
            'vantagem': '‚úÖ Dados anal√≠ticos',
            'desvantagem': '‚ùå Rate limits agressivos'
        },
        {
            'nome': 'LoLalytics Scraping',
            'url': 'https://lolalytics.com/',
            'custo': 'Gratuita (scraping)',
            'dados': 'Meta analytics',
            'vantagem': '‚úÖ Dados detalhados',
            'desvantagem': '‚ùå Contra ToS, inst√°vel'
        }
    ]
    
    for api in apis_alternativas:
        print(f"\nüîå {api['nome']}")
        print(f"   URL: {api['url']}")
        print(f"   üí∞ Custo: {api['custo']}")
        print(f"   üìä Dados: {api['dados']}")
        print(f"   {api['vantagem']}")
        print(f"   {api['desvantagem']}")

async def implementar_solucao_live_client():
    """Implementa solu√ß√£o usando Live Client Data API"""
    
    print(f'\n' + '=' * 60)
    print(f'üöÄ SOLU√á√ÉO RECOMENDADA: LIVE CLIENT DATA API')
    print('=' * 60)
    
    print(f'üìã IMPLEMENTA√á√ÉO:')
    print(f'1. üéÆ Detectar se h√° jogo LoL rodando localmente')
    print(f'2. üì° Conectar na Live Client Data API (127.0.0.1:2999)')
    print(f'3. üìä Obter dados completos: /liveclientdata/allgamedata')
    print(f'4. üèÜ Extrair composi√ß√µes de ambos os times')
    print(f'5. ü§ñ Gerar tip com dados completos')
    
    codigo_exemplo = '''
# EXEMPLO DE IMPLEMENTA√á√ÉO:
async def get_live_compositions():
    """Obt√©m composi√ß√µes do cliente local"""
    try:
        url = "https://127.0.0.1:2999/liveclientdata/allgamedata"
        async with aiohttp.ClientSession() as session:
            async with session.get(url, ssl=False) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    players = data.get('allPlayers', [])
                    team1_comp = []
                    team2_comp = []
                    
                    for player in players:
                        champion = player.get('championName')
                        team = player.get('team')
                        
                        if team == 'ORDER':
                            team1_comp.append(champion)
                        else:
                            team2_comp.append(champion)
                    
                    return team1_comp, team2_comp
    except:
        return None, None
    '''
    
    print(f'\nüìù C√ìDIGO DE EXEMPLO:')
    print(codigo_exemplo)
    
    print(f'\n‚úÖ VANTAGENS:')
    print(f'‚Ä¢ 100% gratuita')
    print(f'‚Ä¢ Dados oficiais da Riot')
    print(f'‚Ä¢ Composi√ß√µes completas e atualizadas')
    print(f'‚Ä¢ Sem rate limits')
    print(f'‚Ä¢ Dados em tempo real')
    
    print(f'\n‚ö†Ô∏è LIMITA√á√ïES:')
    print(f'‚Ä¢ Funciona apenas localmente')
    print(f'‚Ä¢ Requer jogo LoL rodando')
    print(f'‚Ä¢ N√£o serve para dados remotos')

async def main():
    """Execu√ß√£o principal"""
    
    print('üîç BUSCANDO APIS GRATUITAS PARA COMPOSI√á√ïES DE DRAFT')
    
    # Testa APIs dispon√≠veis
    await testar_apis_gratuitas()
    
    # Lista APIs alternativas
    await buscar_apis_alternativas()
    
    # Prop√µe solu√ß√£o
    await implementar_solucao_live_client()
    
    print(f'\n' + '=' * 60)
    print(f'üìã CONCLUS√ÉO:')
    print(f'‚úÖ Live Client Data API √© a melhor op√ß√£o gratuita')
    print(f'‚úÖ Riot Esports API como backup')
    print(f'‚úÖ Data Dragon para dados est√°ticos')
    print(f'‚ö†Ô∏è APIs de terceiros t√™m limita√ß√µes')

if __name__ == '__main__':
    asyncio.run(main()) 