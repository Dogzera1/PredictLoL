#!/usr/bin/env python3
"""
Teste para verificar remo√ß√£o de dados fict√≠cios das funcionalidades principais
Mantendo apenas demonstra√ß√µes para testes
"""

import sys
import re
import os

def test_dados_reais():
    """Testa se dados fict√≠cios foram removidos das funcionalidades principais"""
    
    print("üîç TESTE: Verifica√ß√£o de Dados Reais vs Fict√≠cios")
    print("=" * 60)
    
    # Ler o arquivo do bot
    try:
        with open('bot_v13_railway.py', 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        print("‚ùå Arquivo bot_v13_railway.py n√£o encontrado!")
        return False
    
    # Verificar se random foi removido das importa√ß√µes
    print("\n1. üì¶ Verificando importa√ß√µes...")
    if "import random" in content:
        print("‚ùå ERRO: 'import random' ainda presente!")
        return False
    else:
        print("‚úÖ OK: 'import random' removido")
    
    # Verificar fun√ß√µes principais sem dados fict√≠cios
    print("\n2. üö® Verificando sistema de alertas...")
    
    # Verificar _check_live_matches
    if "random.random()" in content and "_check_live_matches" in content:
        # Verificar se random est√° na fun√ß√£o de alertas
        lines = content.split('\n')
        in_check_live = False
        for line in lines:
            if "def _check_live_matches" in line:
                in_check_live = True
            elif in_check_live and "def " in line and not line.strip().startswith("#"):
                in_check_live = False
            elif in_check_live and "random.random()" in line:
                print("‚ùå ERRO: random.random() ainda presente em _check_live_matches!")
                return False
    
    print("‚úÖ OK: _check_live_matches sem dados fict√≠cios")
    
    # Verificar _check_value_opportunities
    lines = content.split('\n')
    in_check_value = False
    for line in lines:
        if "def _check_value_opportunities" in line:
            in_check_value = True
        elif in_check_value and "def " in line and not line.strip().startswith("#"):
            in_check_value = False
        elif in_check_value and "random.random()" in line:
            print("‚ùå ERRO: random.random() ainda presente em _check_value_opportunities!")
            return False
    
    print("‚úÖ OK: _check_value_opportunities sem dados fict√≠cios")
    
    # Verificar _get_scheduled_matches
    print("\n3. üìÖ Verificando agenda de partidas...")
    lines = content.split('\n')
    in_scheduled = False
    has_simulation = False
    for line in lines:
        if "def _get_scheduled_matches" in line:
            in_scheduled = True
        elif in_scheduled and "def " in line and not line.strip().startswith("#"):
            in_scheduled = False
        elif in_scheduled and ("random." in line or "simular" in line.lower()):
            has_simulation = True
            break
    
    if has_simulation:
        print("‚ùå ERRO: _get_scheduled_matches ainda tem simula√ß√£o!")
        return False
    else:
        print("‚úÖ OK: _get_scheduled_matches sem dados fict√≠cios")
    
    # Verificar get_live_stats
    print("\n4. üìä Verificando estat√≠sticas ao vivo...")
    lines = content.split('\n')
    in_live_stats = False
    has_simulation = False
    for line in lines:
        if "def get_live_stats" in line:
            in_live_stats = True
        elif in_live_stats and "def " in line and not line.strip().startswith("#"):
            in_live_stats = False
        elif in_live_stats and ("random." in line or "simular" in line.lower()):
            has_simulation = True
            break
    
    if has_simulation:
        print("‚ùå ERRO: get_live_stats ainda tem simula√ß√£o!")
        return False
    else:
        print("‚úÖ OK: get_live_stats sem dados fict√≠cios")
    
    # Verificar se demonstra√ß√µes foram mantidas
    print("\n5. üé≤ Verificando demonstra√ß√µes...")
    if "get_demo_value_analysis" in content:
        print("‚úÖ OK: get_demo_value_analysis mantida para demonstra√ß√£o")
    else:
        print("‚ö†Ô∏è AVISO: get_demo_value_analysis n√£o encontrada")
    
    if "format_value_demo" in content:
        print("‚úÖ OK: format_value_demo mantida para demonstra√ß√£o")
    else:
        print("‚ö†Ô∏è AVISO: format_value_demo n√£o encontrada")
    
    # Verificar coment√°rios atualizados
    print("\n6. üí¨ Verificando coment√°rios...")
    if "# TODO: Implementar integra√ß√£o com API real da Riot Games" in content:
        print("‚úÖ OK: Coment√°rios atualizados para API real")
    else:
        print("‚ö†Ô∏è AVISO: Coment√°rios TODO n√£o encontrados")
    
    # Verificar se ainda h√° uso de random nas fun√ß√µes principais
    print("\n7. üîç Verifica√ß√£o final de random...")
    
    # Fun√ß√µes que N√ÉO devem ter random
    main_functions = [
        "_check_live_matches",
        "_check_value_opportunities", 
        "_get_scheduled_matches",
        "get_live_stats",
        "partidas",
        "stats",
        "agenda"
    ]
    
    for func_name in main_functions:
        lines = content.split('\n')
        in_function = False
        for i, line in enumerate(lines):
            if f"def {func_name}" in line:
                in_function = True
            elif in_function and "def " in line and not line.strip().startswith("#"):
                in_function = False
            elif in_function and "random." in line:
                print(f"‚ùå ERRO: random encontrado em {func_name} na linha {i+1}")
                print(f"   Linha: {line.strip()}")
                return False
    
    print("‚úÖ OK: Nenhum uso de random nas fun√ß√µes principais")
    
    print("\n" + "=" * 60)
    print("üéâ TESTE CONCLU√çDO COM SUCESSO!")
    print("‚úÖ Todos os dados fict√≠cios foram removidos das funcionalidades principais")
    print("‚úÖ Demonstra√ß√µes mantidas para testes")
    print("‚úÖ Sistema preparado para dados reais da API")
    
    return True

def test_readme_updated():
    """Testa se o README foi atualizado corretamente"""
    
    print("\nüîç TESTE: Verifica√ß√£o do README")
    print("=" * 60)
    
    try:
        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        print("‚ùå Arquivo README.md n√£o encontrado!")
        return False
    
    # Verificar se changelog foi atualizado
    if "v3.0.1 - Dados Reais Apenas" in content:
        print("‚úÖ OK: Changelog atualizado com v3.0.1")
    else:
        print("‚ùå ERRO: Changelog n√£o atualizado")
        return False
    
    # Verificar se se√ß√£o de status foi atualizada
    if "FUNCIONALIDADES PRINCIPAIS (Aguardando API Real)" in content:
        print("‚úÖ OK: Status da API atualizado")
    else:
        print("‚ö†Ô∏è AVISO: Status da API pode n√£o estar atualizado")
    
    print("‚úÖ README verificado com sucesso!")
    return True

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTES DE DADOS REAIS")
    print("=" * 60)
    
    success = True
    
    # Teste principal
    if not test_dados_reais():
        success = False
    
    # Teste do README
    if not test_readme_updated():
        success = False
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema pronto para dados reais")
        print("‚úÖ Demonstra√ß√µes funcionais mantidas")
        print("‚úÖ Documenta√ß√£o atualizada")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        print("‚ö†Ô∏è Verifique os erros acima")
        sys.exit(1) 