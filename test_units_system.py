#!/usr/bin/env python3
"""
Teste do Sistema de Unidades Profissionais - Bot LoL V3 Ultra Avan√ßado

Script para testar o c√°lculo de unidades em diferentes cen√°rios.
"""

import os
import sys
from typing import List, Dict, Any

# Adiciona o diret√≥rio atual ao path para importar m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from bot.core_logic import ProfessionalUnitsSystem
from bot.utils.logger_config import setup_logging, get_logger

# Configura√ß√£o de logging para testes
logger = setup_logging(log_level="INFO", log_file=None)
test_logger = get_logger("test_units")


def test_scenario(units_system: ProfessionalUnitsSystem, scenario: Dict[str, Any]) -> None:
    """Testa um cen√°rio espec√≠fico"""
    name = scenario["name"]
    confidence = scenario["confidence"]
    ev_percentage = scenario["ev_percentage"] 
    league_tier = scenario.get("league_tier", 2)
    odds = scenario.get("odds")
    
    print(f"\n{'='*60}")
    print(f"üß™ TESTE: {name}")
    print(f"{'='*60}")
    
    print(f"üìä Par√¢metros:")
    print(f"   ‚Ä¢ Confian√ßa: {confidence:.1%}")
    print(f"   ‚Ä¢ Expected Value: {ev_percentage:.1f}%")
    print(f"   ‚Ä¢ Tier da Liga: {league_tier}")
    if odds:
        print(f"   ‚Ä¢ Odds: {odds:.2f}")
    
    # Calcula unidades
    result = units_system.calculate_units(confidence, ev_percentage, league_tier, odds)
    
    # Mostra resultado
    if result["valid"]:
        print(f"\n‚úÖ RESULTADO V√ÅLIDO:")
        print(f"   ‚Ä¢ Unidades: {result['units']:.1f}")
        print(f"   ‚Ä¢ N√≠vel de Risco: {result['risk_level']}")
        print(f"   ‚Ä¢ Valor da Aposta: R${result['bet_amount']:.2f}")
        print(f"   ‚Ä¢ % do Bankroll: {result['percentage_of_bankroll']:.1f}%")
        
        print(f"\nüîß Modificadores aplicados:")
        for modifier, value in result["modifiers_applied"].items():
            print(f"   ‚Ä¢ {modifier}: {value:+.2f}")
        
        print(f"\nüìù Explica√ß√£o:")
        print(result["reasoning"])
        
        # Avalia√ß√£o de risco
        risk_assessment = units_system.get_risk_assessment(result["units"])
        print(f"\n‚ö†Ô∏è Avalia√ß√£o: {risk_assessment}")
        
    else:
        print(f"\n‚ùå RESULTADO INV√ÅLIDO:")
        print(f"   ‚Ä¢ Motivo: {result['reason']}")
        print(f"   ‚Ä¢ Detalhes: {result['details']}")


def test_validation_scenarios(units_system: ProfessionalUnitsSystem) -> None:
    """Testa cen√°rios de valida√ß√£o"""
    print(f"\n{'='*80}")
    print("üîç TESTES DE VALIDA√á√ÉO")
    print(f"{'='*80}")
    
    validation_scenarios = [
        {
            "name": "Confian√ßa muito baixa",
            "confidence": 0.50,  # 50% - abaixo do m√≠nimo (70%)
            "ev_percentage": 10.0
        },
        {
            "name": "EV muito baixo",
            "confidence": 0.80,  # 80% - OK
            "ev_percentage": 2.0  # 2% - abaixo do m√≠nimo (5%)
        },
        {
            "name": "Odds muito baixas",
            "confidence": 0.85,
            "ev_percentage": 8.0,
            "odds": 1.20  # Abaixo do m√≠nimo (1.30)
        },
        {
            "name": "Odds muito altas",
            "confidence": 0.75,
            "ev_percentage": 6.0,
            "odds": 4.00  # Acima do m√°ximo (3.50)
        }
    ]
    
    for scenario in validation_scenarios:
        test_scenario(units_system, scenario)


def test_kelly_criterion(units_system: ProfessionalUnitsSystem) -> None:
    """Testa c√°lculo de Kelly"""
    print(f"\n{'='*80}")
    print("üìä TESTE: KELLY CRITERION")
    print(f"{'='*80}")
    
    kelly_scenarios = [
        {"win_prob": 0.60, "odds": 2.00, "description": "Cen√°rio equilibrado"},
        {"win_prob": 0.75, "odds": 1.80, "description": "Alta probabilidade, odds baixas"},
        {"win_prob": 0.55, "odds": 2.50, "description": "Probabilidade moderada, odds altas"},
        {"win_prob": 0.90, "odds": 1.50, "description": "Alt√≠ssima probabilidade"},
    ]
    
    for scenario in kelly_scenarios:
        win_prob = scenario["win_prob"]
        odds = scenario["odds"]
        description = scenario["description"]
        
        kelly_fraction = units_system.calculate_kelly_criterion(win_prob, odds)
        kelly_percentage = kelly_fraction * 100
        
        print(f"\nüéØ {description}:")
        print(f"   ‚Ä¢ Probabilidade: {win_prob:.1%}")
        print(f"   ‚Ä¢ Odds: {odds:.2f}")
        print(f"   ‚Ä¢ Kelly: {kelly_percentage:.2f}% do bankroll")


def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ Iniciando testes do Sistema de Unidades Profissionais...")
    print(f"üîß Python: {sys.version}")
    print(f"üìÅ Diret√≥rio: {os.getcwd()}")
    
    # Inicializa sistema com bankroll de teste
    bankroll = 2000.0  # R$ 2.000
    units_system = ProfessionalUnitsSystem(bankroll=bankroll)
    
    print(f"\nüè¶ Sistema inicializado:")
    print(f"   ‚Ä¢ Bankroll: R${bankroll:.2f}")
    print(f"   ‚Ä¢ 1 Unidade = R${units_system.unit_value:.2f}")
    
    # Mostra explica√ß√£o do sistema
    print(f"\n{units_system.get_units_explanation()}")
    
    # Cen√°rios de teste principais
    main_scenarios = [
        {
            "name": "Cen√°rio ULTRA HIGH (LCK)",
            "confidence": 0.92,
            "ev_percentage": 18.0,
            "league_tier": 1,  # LCK (Tier 1)
            "odds": 2.10
        },
        {
            "name": "Cen√°rio HIGH (CBLOL)", 
            "confidence": 0.82,
            "ev_percentage": 12.0,
            "league_tier": 2,  # CBLOL (Tier 2)
            "odds": 1.85
        },
        {
            "name": "Cen√°rio MEDIUM (LEC)",
            "confidence": 0.74,
            "ev_percentage": 7.5,
            "league_tier": 1,  # LEC (Tier 1)
            "odds": 2.25
        },
        {
            "name": "Cen√°rio LOW (Liga Menor)",
            "confidence": 0.68,
            "ev_percentage": 5.2,
            "league_tier": 3,  # Liga menor (Tier 3)
            "odds": 1.95
        },
        {
            "name": "Cen√°rio M√çNIMO V√ÅLIDO",
            "confidence": 0.70,  # Exatamente no m√≠nimo
            "ev_percentage": 5.0,  # Exatamente no m√≠nimo
            "league_tier": 2
        },
        {
            "name": "Cen√°rio EXTREMO (Odds ideais)",
            "confidence": 0.95,
            "ev_percentage": 22.0,
            "league_tier": 1,
            "odds": 2.00  # Odds ideais
        }
    ]
    
    # Executa testes principais
    for scenario in main_scenarios:
        test_scenario(units_system, scenario)
    
    # Testa cen√°rios de valida√ß√£o
    test_validation_scenarios(units_system)
    
    # Testa Kelly Criterion
    test_kelly_criterion(units_system)
    
    # Teste de valida√ß√£o de crit√©rios
    print(f"\n{'='*80}")
    print("‚úÖ TESTE: VALIDA√á√ÉO DE CRIT√âRIOS")
    print(f"{'='*80}")
    
    test_analyses = [
        {
            "confidence": 0.85,
            "ev_percentage": 12.0,
            "odds": 2.10,
            "description": "An√°lise v√°lida"
        },
        {
            "confidence": 0.65,  # Muito baixa
            "ev_percentage": 8.0,
            "odds": 1.90,
            "description": "Confian√ßa insuficiente"
        }
    ]
    
    for analysis in test_analyses:
        valid, reason = units_system.validate_tip_criteria(analysis)
        status = "‚úÖ V√ÅLIDO" if valid else "‚ùå INV√ÅLIDO"
        print(f"\n{status}: {analysis['description']}")
        print(f"   Motivo: {reason}")
    
    # Teste de atualiza√ß√£o de bankroll
    print(f"\n{'='*80}")
    print("üí∞ TESTE: ATUALIZA√á√ÉO DE BANKROLL")
    print(f"{'='*80}")
    
    print(f"Bankroll atual: R${units_system.bankroll:.2f}")
    new_bankroll = 3000.0
    units_system.update_bankroll(new_bankroll)
    print(f"Novo bankroll: R${units_system.bankroll:.2f}")
    print(f"Nova unidade: R${units_system.unit_value:.2f}")
    
    print(f"\n{'='*80}")
    print("üéâ TODOS OS TESTES CONCLU√çDOS!")
    print(f"{'='*80}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n\n‚ùå Erro fatal durante os testes: {e}")
        sys.exit(1) 
